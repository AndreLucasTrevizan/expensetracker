************************************************************************
*                            Pelissari                                 *
************************************************************************
* Autor     : Rondinei da Silva                                         *
* Data      : 06.06.2017                                               *
************************************************************************
* Descrição : Relatórios comerciais - Carteira de Pedidos              *
************************************************************************
* Alteração : AK01                                                     *
* Autor     : André Raenner Kiche                                      *
* Data      : 14.06.2017                                               *
* Descrição : Consulta/Filtro por status dos itens (VBUP)              *
************************************************************************
* Alteração : AA01                                                     *
* Autor     : Arthur Ferreira Amorim                                   *
* Data      : 15.06.2017                                               *
* Descrição : Ajustes no relatório                                     *
************************************************************************
* Alteração : GA01                                                     *
* Autor     : Gionei de Andrade                                        *
* Data      : 15.06.2017                                               *
* Descrição : Ajustes no relatório.                                     *
************************************************************************
* Alteração : AA01                                                     *
* Autor     : Arthur Ferreira Amorim                                   *
* Data      : 20.06.2017                                               *
* Descrição : Ajustes no relatório                                     *
************************************************************************
* Alteração : ES01                                                     *
* Autor     : Eduardo Silva                                            *
* Data      : 07.07.2017                                               *
* Descrição : Ajustes no relatório - Desbloqueio OV com commit para    *
*            cada ov. Se executado todos com um commit só, causa       *
*            problema na verificação de disponibilidade                *
*            Chamado 3550                                              *
************************************************************************
* Alteração : ES01                                                     *
* Autor     : Eduardo Silva                                            *
* Data      : 07.07.2017                                               *
* Descrição : Inclusão campo VBAK-ZZCARGA no relatório                 *
************************************************************************
* Alteração : TLF01                                                    *
* Autor     : Túlio Luís de Freitas                                    *
* Data      : 14.07.2017                                               *
* Descrição : 4248 / 97572 - Ajuste de performance.                    *
************************************************************************
* Alteração : GGS01                                                    *
* Autor     : Gabriel Guedes de Sena                                   *
* Data      : 21.07.2017                                               *
* Descrição : 98192 - Ajuste de performance.                           *
************************************************************************
* Alteração : FHA01                                                    *
* Autor     : Fernando Hugo de Andrade                                 *
* Data      : 01.08.2017                                               *
* Descrição : 98192 - Ajuste de resultado.                             *
************************************************************************
* Alteração : BI01                                                     *
* Autor     : Bruno Ise                                                *
* Funcional : Jackson Deuschle                                         *
* Data      : 31.01.2018                                               *
* Descrição : 99114 - OV's - SM Fora do calendário.                    *
************************************************************************
* Alteração : HKS01                                                    *
* Autor     : Hellen Kulka da Silva                                    *
* Funcional : Eigom Souza                                              *
* Data      : 26.02.2018                                               *
* Descrição : 115941, Filtro por grupo de mercadorias                  *
************************************************************************
* Alteração : EME01                                                    *
* Autor     : Eduardo Melo                                             *
* Funcional : Douglas Miron Cavaiar                                    *
* Data      : 21.03.2018                                               *
* Descrição : 11234, OV´s data saida = data desejada                   *
************************************************************************
* Alteração : MF01                                                     *
* Autor     : Maria Fernanda                                           *
* Funcional : Diego Costa                                              *
* Data      : 02.07.2018                                               *
* Descrição : 12008, inserção do campo Representante de Venda          *
************************************************************************
* Alteração : NM01                                                     *
* Autor     : Naiany Melo                                              *
* Funcional : Alex                                                     *
* Data      : 07.12.2018                                               *
* Descrição : Inclusão de campos Vlr NET, VlrUnit, Perc.Contrato       *
************************************************************************
* Alteração : MF02                                                     *
* Autor     : Maria Fernanda                                           *
* Funcional : Diego Costa                                              *
* Data      : 20.12.2018                                               *
* Descrição : 17941, inserção do campo Transporte                      *
************************************************************************
* Alteração : MF03                                                     *
* Autor     : Maria Fernanda                                           *
* Funcional : Thiago Costa                                             *
* Data      : 28.03.2019                                               *
* Descrição : 19778, alteração do cálculo da coluna Total NET          *
************************************************************************
* Alteração : MF04                                                     *
* Autor     : Maria Fernanda                                           *
* Funcional : Herinaldo Santos                                         *
* Data      : 24.05.2019                                               *
* Descrição : 24592, inserção do campo Valor do montante               *
************************************************************************
* Alteração : MF04                                                     *
* Autor     : Tiago Cruz                                               *
* Funcional : Herinaldo Santos                                         *
* Data      : 02.09.2020                                               *
* Descrição : 7000000312 - Consiste MESES                              *
************************************************************************
* Alteração : VC01                                                     *
* Autor     : Victor Clemente                                          *
* Funcional : Adenilson Lourenço                                       *
* Data      : 13.03.2023                                               *
* Descrição : 7000005150 - Novo filtro Transportador de Insumo         *
************************************************************************
* Alteração : MS01                                                     *
* Autor     : Mariana Matias dos Santos                                *
* Funcional : Henrique Magalhães                                       *
* Data      : 31.08.2024                                               *
* Descrição : C2427 – Integração Infosal                               *
************************************************************************
* Alteração : OR01                                                     *
* Autor     : Órion Rigel                                              *
* Funcional : Henrique Magalhães                                       *
* Data      : 29.10.2024                                               *
* Descrição : C2427 – Integração Infosal                               *
************************************************************************
REPORT zsd_039_v1.

*--------------------------------------------------------------------*
* Tipos
*--------------------------------------------------------------------*
TABLES: vbak,
        vbap, "GA01
        vbrk, "AA01
        vbrp, "AA01
        cdhdr,
        adrp,
        vbkd, "ajuste Homine 06/01/2021
*        mara. "HKS01
        vbpa. "VC01

CONSTANTS:
  c_8 TYPE c VALUE '8', "MF02
  c_j TYPE c VALUE 'J', "MF02

  BEGIN OF c_param,
    modulo TYPE /pgtpa/param_par-modulo VALUE 'SD',
    param1 TYPE /pgtpa/param_par-param1 VALUE 'BLOQUEIO_OV',

    BEGIN OF status,
      param2 TYPE /pgtpa/param_par-param2 VALUE 'ZSD00003',
      param3 TYPE /pgtpa/param_par-param3 VALUE 'STAT',

      BEGIN OF param4,
        lib1 TYPE /pgtpa/param_par-param4 VALUE 'LIB1',
        lib2 TYPE /pgtpa/param_par-param4 VALUE 'LIB2',
        lib3 TYPE /pgtpa/param_par-param4 VALUE 'LIB3',
        blk1 TYPE /pgtpa/param_par-param4 VALUE 'BLK1',
        blk2 TYPE /pgtpa/param_par-param4 VALUE 'BLK2',
        blk3 TYPE /pgtpa/param_par-param4 VALUE 'BLK3',
        blk4 TYPE /pgtpa/param_par-param4 VALUE 'BLK4',
        blk5 TYPE /pgtpa/param_par-param4 VALUE 'BLK5',
        blk6 TYPE /pgtpa/param_par-param4 VALUE 'BLK6',
        blk7 TYPE /pgtpa/param_par-param4 VALUE 'BLK7',
        blk8 TYPE /pgtpa/param_par-param4 VALUE 'BLK8',
      END OF param4,
    END OF status,

    BEGIN OF desc,
      param2 TYPE /pgtpa/param_par-param2 VALUE 'DESC',

      BEGIN OF param3,
        nivel_1   TYPE /pgtpa/param_par-param3 VALUE 'NIVEL_1',
        nivel_2   TYPE /pgtpa/param_par-param3 VALUE 'NIVEL_2',
        nivel_3   TYPE /pgtpa/param_par-param3 VALUE 'NIVEL_3',
        aprovados TYPE /pgtpa/param_par-param3 VALUE 'APROVADOS',
        sem_aprov TYPE /pgtpa/param_par-param3 VALUE 'SEM_APROV',
      END OF param3,
    END OF desc,
  END OF c_param,

  BEGIN OF c_parvw,
    emissor_ordem  TYPE vbpa-parvw VALUE 'AG',
    agente_frete   TYPE vbpa-parvw VALUE 'SP',
    recebedor_merc TYPE vbpa-parvw VALUE 'WE',
    redespacho     TYPE vbpa-parvw VALUE 'ZT',
    repres_venda   TYPE vbpa-parvw VALUE 'ZC', "MF01
    transp_insumos TYPE vbpa-parvw VALUE 'ZI', "VC01
  END OF c_parvw.

TYPES:

  BEGIN OF tp_alv,
    vbeln                TYPE zssd_relatorio_carteira-vbeln,
    posnr                TYPE zssd_relatorio_carteira-posnr,
    pstyv                TYPE zssd_relatorio_carteira-pstyv,
    vdatu                TYPE zssd_relatorio_carteira-vdatu,
    bstdk                TYPE zesd_dt_agenda,                       "MS01
    wadat                TYPE zssd_relatorio_carteira-wadat,
    auart                TYPE zssd_relatorio_carteira-auart,
    kunnr                TYPE zssd_relatorio_carteira-kunnr,
    name1                TYPE zssd_relatorio_carteira-name1,
    ort01                TYPE zssd_relatorio_carteira-ort01,
    ort01_kunwe          TYPE zssd_relatorio_carteira-ort01_kunwe,
    regio                TYPE zssd_relatorio_carteira-regio,
    obscli               TYPE zesd_observacao,
    lifsk                TYPE zssd_relatorio_carteira-lifsk,
    vtext                TYPE tvlst-vtext,
    faksk                TYPE zssd_relatorio_carteira-faksk,
    matnr                TYPE zssd_relatorio_carteira-matnr,
    maktx                TYPE zssd_relatorio_carteira-maktx,
    pesitm               TYPE zssd_relatorio_carteira-pesitm,
    vlunit               TYPE zssd_relatorio_carteira-vlunit,
    kwmeng               TYPE zssd_relatorio_carteira-kwmeng,
    qtdvbep              TYPE zssd_relatorio_carteira-qtdvbep,
    zzqtd_caixas         TYPE zesd_qtd_caixas,
    zzqtd_palete         TYPE zesd_qtd_palete,
    vltotov              TYPE zssd_relatorio_carteira-vltotov,       "GA01
    vltotnet             TYPE zssd_relatorio_carteira-vltotnet,      "AA01
    abgru                TYPE zssd_relatorio_carteira-abgru,

    stat_aprov           TYPE zssd_relatorio_carteira-stat_aprov,
    werks                TYPE zssd_relatorio_carteira-werks,
    tname1                TYPE t001w-name1,
    vstel                TYPE vbap-vstel,                            "AA01
    lgort                TYPE zssd_relatorio_carteira-lgort,
    vkorg                TYPE zssd_relatorio_carteira-vkorg,
    vtweg                TYPE zssd_relatorio_carteira-vtweg,
    tvtext               TYPE tvtwt-vtext,
    spart                TYPE zssd_relatorio_carteira-spart,
    vkgrp                TYPE zssd_relatorio_carteira-vkgrp,
    bezei_vkgrp          TYPE zssd_relatorio_carteira-bezei_vkgrp,
    vkbur                TYPE zssd_relatorio_carteira-vkbur,
    bezei_vkbur          TYPE zssd_relatorio_carteira-bezei_vkbur,
    lifnr                TYPE zssd_relatorio_carteira-lifnr,
    name1_lifnr          TYPE zssd_relatorio_carteira-name1_lifnr,
    transporte           TYPE vbfa-vbeln,                          "MF02 - Transportadora"
    obsexp               TYPE zesd_observacao_expedicao,
    obstrans             TYPE zesd_observacao_transporte,
    lifnr_r              TYPE zssd_relatorio_carteira-lifnr,       "Transp. Redespacho
    name1_lifnr_r        TYPE zssd_relatorio_carteira-name1_lifnr, "Transp. Redespacho
    lifnr_2              TYPE zssd_relatorio_carteira-lifnr,       "MF01 "Representante de venda
    name1_lifnr_2        TYPE zssd_relatorio_carteira-name1_lifnr, "MF01 "Representante de venda
    matkl                TYPE zssd_relatorio_carteira-matkl,
    wgbez                TYPE zssd_relatorio_carteira-wgbez,
    prodh1               TYPE prodh1,
    prodh1_ds            TYPE t179t-vtext,
    prodh2               TYPE prodh2,
    prodh2_ds            TYPE t179t-vtext,
    prodh3               TYPE prodh3,
    prodh3_ds            TYPE t179t-vtext,
    prodh4               TYPE prodh4,
    prodh4_ds            TYPE t179t-vtext,
    prodh5               TYPE prodh5,
    prodh5_ds            TYPE t179t-vtext,
    prodh6               TYPE prodh6,
    prodh6_ds            TYPE t179t-vtext,
    lprio                TYPE zssd_relatorio_carteira-lprio,
    inco1                TYPE zssd_relatorio_carteira-inco1,
    inco2                TYPE zssd_relatorio_carteira-inco2,
    zterm                TYPE zssd_relatorio_carteira-zterm,
    vtext_zterm          TYPE zssd_relatorio_carteira-vtext_zterm,
    kbmeng               TYPE zssd_relatorio_carteira-kbmeng,
    vrkme                TYPE zssd_relatorio_carteira-vrkme,
    remessa              TYPE vbfa-vbeln,                            "AA01
    edatu                TYPE zssd_relatorio_carteira-edatu,
    fatura               TYPE zssd_relatorio_carteira-fatura,        "GA01
    fkdat                TYPE vbrk-fkdat,                            "AA01
*    fat_estornada       TYPE zssd_relatorio_carteira-fat_estornada, "GA01
    qtdfat               TYPE zssd_relatorio_carteira-qtdfat,
    vlfatu               TYPE zssd_relatorio_carteira-vlfatu,
*    vlafat             TYPE zssd_relatorio_carteira-vlafat,       "AA01
    nfenum               TYPE zssd_relatorio_carteira-nfenum,        "GA01
*    vlafaturado        TYPE zssd_relatorio_carteira-vlafaturado,   "GA01
    cmgst                TYPE zssd_relatorio_carteira-cmgst,
    statcred             TYPE zssd_relatorio_carteira-statcred,
*    stglobal           TYPE zssd_relatorio_carteira-stglobal,
*    qtdaft             TYPE zssd_relatorio_carteira-qtdaft,
    regio_kunwe          TYPE zssd_relatorio_carteira-regio_kunwe,
    lfsta                TYPE zssd_relatorio_carteira-lfsta,
    absta                TYPE zssd_relatorio_carteira-absta,
    erdat                TYPE zssd_relatorio_carteira-erdat,         "GA01
    erzet                TYPE zssd_relatorio_carteira-erzet,         "GA01
    ernam                TYPE zssd_relatorio_carteira-ernam,         "GA01
    city2_emissor        TYPE adrc-city2,                            "AA01
    post_code1_emissor   TYPE adrc-post_code1,                       "AA01
    street_emissor       TYPE adrc-street,                           "AA01
    house_num1_emissor   TYPE adrc-house_num1,                       "AA01
    status_usu           TYPE zssd_relatorio_carteira-status_usu,    "AA01
    status_usu_desc      TYPE zssd_relatorio_carteira-status_usu_desc, "AA01
    mvgr1                TYPE vbap-mvgr1,                            "AA01
    bstkd_e              TYPE vbkd-bstkd_e,                          "AA01
    ihrez_e              TYPE vbkd-ihrez_e,                          "AA01
    xblnr                TYPE vbak-xblnr,                            "AA01
    augru                TYPE vbak-augru,                            "AA01
    desc_augru           TYPE tvaut-bezei,                           "AA01
    zzcarga              TYPE vbak-zzcarga,                          "ES02


** Inicio Alteração - Naiany Melo NL - ITSGROUP - 07/12/18 **
    zvp2                 TYPE zssd_relatorio_carteira-vltotov,      "NM01
    zvp4                 TYPE zssd_relatorio_carteira-vltotov,      "NM01
    valor_net            TYPE zssd_relatorio_carteira-vltotov,      "NM01
    ztnf                 TYPE konv-kbetr, "MF04
** Fim Alteração - Naiany Melo NL - ITSGROUP - 07/12/18 **

** Inicio Alteração - Lamartine Cavalcante LC- Homine - 24/02/21 **
    zicm                 TYPE zssd_relatorio_carteira-vltotov,      "LC01
    zpis                 TYPE zssd_relatorio_carteira-vltotov,      "LC01
    zcof                 TYPE zssd_relatorio_carteira-vltotov,      "LC01
    zcre                 TYPE zssd_relatorio_carteira-vltotov,      "LC01
    zcra                 TYPE zssd_relatorio_carteira-vltotov,      "LC01
    zfre                 TYPE konv-kbetr, "LC01
    zfru                 TYPE konv-kbetr, "LC01
    zcro                 TYPE konv-kbetr, "LC01
** Fim Alteração - Lamartine Cavalcante LC - Homine - 24/02/21 **

*** Inicio - TIROL - SOLMAN 7000000868
    vlr_uni              TYPE zssd_relatorio_carteira-vlr_uni,
    vlr_ttl_ov           TYPE zssd_relatorio_carteira-vlr_ttl_ov,
*** Fim - TIROL - SOLMAN 7000000868
* CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Inicio
    username             TYPE zbre_login_resp_recusa, "CDHDR-USERNAME,
    name_full            TYPE zbre_nome_resp_recusa,  "CHAR80
* CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Fim
    kvgr2                TYPE tvv2t-bezei, "vbak-kvgr2,             "ANORCE
    vsart                TYPE vbkd-vsart,                            "ERT
    vtext_bezei          TYPE t173t-bezei,
*    vbtyp         TYPE zssd_relatorio_carteira-vbtyp,             "AA01
*    aufnr         TYPE vbak-aufnr,
*    autlf         TYPE zssd_relatorio_carteira-autlf,             "AA01
*    bstnk         TYPE zssd_relatorio_carteira-bstnk,             "AA01
*    bstdk         TYPE zssd_relatorio_carteira-bstdk,             "AA01
*    netwr         TYPE zssd_relatorio_carteira-netwr,             "AA01
*    waerk         TYPE zssd_relatorio_carteira-waerk,             "AA01
*    volum         TYPE zssd_relatorio_carteira-volum,             "AA01
*    volum_pend    TYPE zssd_relatorio_carteira-volum_pend,        "AA01
*    volum_lib     TYPE zssd_relatorio_carteira-volum_lib,         "AA01
*    voleh         TYPE zssd_relatorio_carteira-voleh,             "AA01
*    mwsbp         TYPE zssd_relatorio_carteira-mwsbp,             "AA01
*    kdgrp         TYPE zssd_relatorio_carteira-kdgrp,             "AA01
*    kdgrp_ds      TYPE t151t-ktext,                               "AA01
*    bzirk         TYPE zssd_relatorio_carteira-bzirk,
*    kursk         TYPE zssd_relatorio_carteira-kursk,             "AA01
*    vltot         TYPE zssd_relatorio_carteira-vltot,             "AA01
*    umzin         TYPE zssd_relatorio_carteira-umzin,
*    umziz         TYPE zssd_relatorio_carteira-umziz,
*    meins         TYPE zssd_relatorio_carteira-meins,
*    qtditm        TYPE zssd_relatorio_carteira-qtditm,            "AA01
*    vlunit        TYPE zssd_relatorio_carteira-vlunit,            "AA01
*    qtdcnf        TYPE zssd_relatorio_carteira-qtdcnf,            "AA01
*    vlconf        TYPE zssd_relatorio_carteira-vlconf,            "AA01
*    mbdat         TYPE zssd_relatorio_carteira-mbdat,             "AA01
*    lifsp         TYPE zssd_relatorio_carteira-lifsp,             "AA01
*    qtdent        TYPE zssd_relatorio_carteira-qtdent,            "AA01
*    vlentr        TYPE zssd_relatorio_carteira-vlentr,            "AA01
*    qtdpen        TYPE zssd_relatorio_carteira-qtdpen,            "AA01
*    vlpend        TYPE zssd_relatorio_carteira-vlpend,            "AA01
*    qtdlib        TYPE zssd_relatorio_carteira-qtdlib,            "AA01
*    vllibe        TYPE zssd_relatorio_carteira-vllibe,            "AA01
*    pespen        TYPE zssd_relatorio_carteira-pespen,            "AA01
*    peslib        TYPE zssd_relatorio_carteira-peslib,            "AA01
*    stat_user     TYPE zssd_relatorio_carteira-stat_user,         "AA01
*    hkunnr        TYPE zssd_relatorio_carteira-hkunnr,            "AA01
*    name1_hkunnr  TYPE zssd_relatorio_carteira-name1_hkunnr,      "AA01
    bstkd                TYPE  vbkd-bstkd,
    charg                TYPE vbap-charg,
    transp_insumos       TYPE zesd_transp_insumos,                "VC01
    transp_insumos_descr TYPE zesd_transp_insumos_descricao,      "VC01
    brgew                TYPE vbap-brgew,                         "OR01
    vsbed                TYPE vbak-vsbed,                         "OR01
  END OF tp_alv,
  tp_t_alv TYPE STANDARD TABLE OF tp_alv,

  BEGIN OF tp_alv_sint,
    vkorg   TYPE zssd_relatorio_carteira-vkorg,
    vtweg   TYPE zssd_relatorio_carteira-vtweg,
    vkbur   TYPE zssd_relatorio_carteira-vkbur,
    vkgrp   TYPE zssd_relatorio_carteira-vkgrp,
    werks   TYPE zssd_relatorio_carteira-werks,
    regio   TYPE zssd_relatorio_carteira-regio,
    wadat   TYPE zssd_relatorio_carteira-wadat,
    vlunit  TYPE zssd_relatorio_carteira-vlunit,
    kwmeng  TYPE zssd_relatorio_carteira-kwmeng,
    vltotov TYPE zssd_relatorio_carteira-vltotov,
    matnr   TYPE mara-matnr,
** Inicio Alteração - Naiany Melo NL - ITSGROUP - 07/12/18 **
    zvp2    TYPE zssd_relatorio_carteira-vltotov, "NM01
    zvp4    TYPE zssd_relatorio_carteira-vltotov, "NM01
** Fim Alteração - Naiany Melo NL - ITSGROUP - 07/12/18 **
    kvgr2   TYPE  tvv2t-bezei, "  vbak-kvgr2,  " ANORCE
  END OF tp_alv_sint,
  tp_t_alv_sint TYPE TABLE OF tp_alv_sint,

  BEGIN OF tp_alv_sfat,
    vkorg TYPE zssd_relatorio_carteira-vkorg,
    vtweg TYPE zssd_relatorio_carteira-vtweg,
    vkbur TYPE zssd_relatorio_carteira-vkbur,
    vkgrp TYPE zssd_relatorio_carteira-vkgrp,
    werks TYPE zssd_relatorio_carteira-werks,
    regio TYPE zssd_relatorio_carteira-regio,
    fkdat TYPE vbrk-fkdat,
    fkimg TYPE vbrp-fkimg,
    kwert TYPE konv-kwert,
    matnr TYPE mara-matnr,
    kvgr2 TYPE tvv2t-bezei, "vbak-kvgr2 " ANORCE
  END OF tp_alv_sfat,
  tp_t_alv_sfat TYPE TABLE OF tp_alv_sfat,

  BEGIN OF tp_vbap,
    vbeln  TYPE vbap-vbeln,
    posnr  TYPE vbap-posnr,
    matnr  TYPE vbap-matnr,
    matkl  TYPE vbap-matkl,
    pstyv  TYPE vbap-pstyv,
    abgru  TYPE vbap-abgru,
    zmeng  TYPE vbap-zmeng,
    umziz  TYPE vbap-umziz,
    umzin  TYPE vbap-umzin,
    meins  TYPE vbap-meins,
    netwr  TYPE vbap-netwr,
    waerk  TYPE vbap-waerk,
    kwmeng TYPE vbap-kwmeng,
    kbmeng TYPE vbap-kbmeng,
    vrkme  TYPE vbap-vrkme,
    brgew  TYPE vbap-brgew,
    volum  TYPE vbap-volum,
    voleh  TYPE vbap-voleh,
    lprio  TYPE vbap-lprio,
    werks  TYPE vbap-werks,
    name1  TYPE t001w-name1,
    lgort  TYPE vbap-lgort,
    route  TYPE vbap-route,
    mwsbp  TYPE vbap-mwsbp,
    prodh  TYPE vbap-prodh,
    vstel  TYPE vbap-vstel,
    mvgr1  TYPE vbap-mvgr1,
    charg  TYPE vbap-charg,
  END OF tp_vbap,
  tp_t_vbap TYPE SORTED TABLE OF tp_vbap
            WITH NON-UNIQUE KEY vbeln,

  BEGIN OF tp_vbak,
    vbeln   TYPE vbak-vbeln,
    erdat   TYPE vbak-erdat,
    erzet   TYPE vbak-erzet,
    ernam   TYPE vbak-ernam,
    vbtyp   TYPE vbak-vbtyp,
    auart   TYPE vbak-auart,
    lifsk   TYPE vbak-lifsk,
    lifsp   TYPE tvlst-lifsp,
    vtext   TYPE tvlst-vtext,
    faksk   TYPE vbak-faksk,
    vkorg   TYPE vbak-vkorg,
    vtweg   TYPE vbak-vtweg,
    tvtext  TYPE tvtwt-vtext,
    spart   TYPE vbak-spart,
    vkgrp   TYPE vbak-vkgrp,
    vkbur   TYPE vbak-vkbur,
    knumv   TYPE vbak-knumv,
    vdatu   TYPE vbak-vdatu,
    autlf   TYPE vbak-autlf,
    bstnk   TYPE vbak-bstnk,
    bstdk   TYPE vbak-bstdk,
    kunnr   TYPE vbak-kunnr,
    objnr   TYPE vbak-objnr,
    cmgst   TYPE vbak-zzcmgst,
    aufnr   TYPE vbak-aufnr,
    xblnr   TYPE vbak-xblnr, "AA01
    augru   TYPE vbak-augru, "AA01
    bezei   TYPE tvaut-bezei, "AA01
    zzcarga TYPE vbak-zzcarga, "ES02
    kvgr2   TYPE vbak-kvgr2, "ANORCE
    vbsed   TYPE vbak-vsbed, "OR01
  END OF tp_vbak,
  tp_t_vbak TYPE SORTED TABLE OF tp_vbak
            WITH NON-UNIQUE KEY vbeln,

  BEGIN OF tp_vbep,
    vbeln TYPE vbep-vbeln,
    posnr TYPE vbep-posnr,
    etenr TYPE vbep-etenr,
    edatu TYPE vbep-edatu,
    bmeng TYPE vbep-bmeng,
    wadat TYPE vbep-wadat,
    lifsp TYPE vbep-lifsp,
    mbdat TYPE vbep-mbdat,
  END OF tp_vbep,
  tp_t_vbep TYPE SORTED TABLE OF tp_vbep
            WITH NON-UNIQUE KEY vbeln posnr,

** Inicio - EME01
*  tp_t_vbep_sm TYPE STANDARD TABLE OF tp_vbep,
** Fim    - EME01

  BEGIN OF tp_vbkd,
    vbeln   TYPE vbkd-vbeln,
    posnr   TYPE vbkd-posnr,
    kdgrp   TYPE vbkd-kdgrp,
    bzirk   TYPE vbkd-bzirk,
    inco1   TYPE vbkd-inco1,
    inco2   TYPE vbkd-inco2,
    valtg   TYPE vbkd-valtg,
    zterm   TYPE vbkd-zterm,
    kursk   TYPE vbkd-kursk,
    bstkd   TYPE vbkd-bstkd,
    bstdk   TYPE vbkd-bstdk,   "MS01
    bstkd_e TYPE vbkd-bstkd_e,
    ihrez_e TYPE vbkd-ihrez_e,
    vsart   TYPE vbkd-vsart,
  END OF tp_vbkd,
  tp_t_vbkd TYPE HASHED TABLE OF tp_vbkd
            WITH UNIQUE KEY vbeln posnr,

  BEGIN OF tp_vbpa,
    vbeln TYPE vbpa-vbeln,
    posnr TYPE vbpa-posnr,
    parvw TYPE vbpa-parvw,
    kunnr TYPE vbpa-kunnr,
    lifnr TYPE vbpa-lifnr,
  END OF tp_vbpa,
  tp_t_vbpa TYPE HASHED TABLE OF tp_vbpa
            WITH UNIQUE KEY vbeln parvw,

  BEGIN OF tp_tvgrt_key,
    vkgrp TYPE tvgrt-vkgrp,
  END OF tp_tvgrt_key,
  tp_t_tvgrt_key TYPE HASHED TABLE OF tp_tvgrt_key
                 WITH UNIQUE KEY vkgrp,

  BEGIN OF tp_tvgrt,
    vkgrp TYPE tvgrt-vkgrp,
    bezei TYPE tvgrt-bezei,
  END OF tp_tvgrt,
  tp_t_tvgrt TYPE HASHED TABLE OF tp_tvgrt
             WITH UNIQUE KEY vkgrp,

  BEGIN OF tp_tvkbt_key,
    vkbur TYPE tvkbt-vkbur,
  END OF tp_tvkbt_key,
  tp_t_tvkbt_key TYPE HASHED TABLE OF tp_tvkbt_key
                 WITH UNIQUE KEY vkbur,

  BEGIN OF tp_tvkbt,
    vkbur TYPE tvkbt-vkbur,
    bezei TYPE tvkbt-bezei,
  END OF tp_tvkbt,
  tp_t_tvkbt TYPE HASHED TABLE OF tp_tvkbt
             WITH UNIQUE KEY vkbur,

  BEGIN OF tp_makt_key,
    matnr TYPE makt-matnr,
  END OF tp_makt_key,
  tp_t_makt_key TYPE HASHED TABLE OF tp_makt_key
                WITH UNIQUE KEY matnr,

  BEGIN OF tp_makt,
    matnr TYPE makt-matnr,
    maktx TYPE makt-maktx,
  END OF tp_makt,
  tp_t_makt TYPE HASHED TABLE OF tp_makt
            WITH UNIQUE KEY matnr,

  BEGIN OF tp_t023t_key,
    matkl TYPE t023t-matkl,
  END OF tp_t023t_key,
  tp_t_t023t_key TYPE HASHED TABLE OF tp_t023t_key
                 WITH UNIQUE KEY matkl,

  BEGIN OF tp_t023t,
    matkl TYPE t023t-matkl,
    wgbez TYPE t023t-wgbez,
  END OF tp_t023t,
  tp_t_t023t TYPE HASHED TABLE OF tp_t023t
             WITH UNIQUE KEY matkl,

  BEGIN OF tp_tvagt_key,
    abgru TYPE tvagt-abgru,
  END OF tp_tvagt_key,
  tp_t_tvagt_key TYPE HASHED TABLE OF tp_tvagt_key
                 WITH UNIQUE KEY abgru,

  BEGIN OF tp_tvagt,
    spras TYPE tvagt-spras,
    abgru TYPE tvagt-abgru,
    bezei TYPE tvagt-bezei,
  END OF tp_tvagt,
  tp_t_tvagt TYPE HASHED TABLE OF tp_tvagt
             WITH UNIQUE KEY abgru,

  BEGIN OF tp_kna1_key,
    kunnr TYPE kna1-kunnr,
  END OF tp_kna1_key,
  tp_t_kna1_key TYPE HASHED TABLE OF tp_kna1_key
                WITH UNIQUE KEY kunnr,

  BEGIN OF tp_kna1,
    kunnr TYPE kna1-kunnr,
    name1 TYPE kna1-name1,
    ort01 TYPE kna1-ort01,
    regio TYPE kna1-regio,
    adrnr TYPE kna1-adrnr, "AA01
  END OF tp_kna1,
  tp_t_kna1 TYPE HASHED TABLE OF tp_kna1
            WITH UNIQUE KEY kunnr,

  BEGIN OF tp_lfa1_key,
    lifnr TYPE lfa1-lifnr,
  END OF tp_lfa1_key,
  tp_t_lfa1_key TYPE HASHED TABLE OF tp_lfa1_key
                WITH UNIQUE KEY lifnr,

  BEGIN OF tp_lfa1,
    lifnr TYPE lfa1-lifnr,
    name1 TYPE lfa1-name1,
    adrnr TYPE lfa1-adrnr, "AA01
  END OF tp_lfa1,
  tp_t_lfa1 TYPE HASHED TABLE OF tp_lfa1
            WITH UNIQUE KEY lifnr,

  BEGIN OF tp_vbfa_fat,
    vbelv TYPE vbfa-vbelv,
    vbeln TYPE vbfa-vbeln,
    fkdat TYPE vbrk-fkdat,
  END OF tp_vbfa_fat,

  BEGIN OF tp_vbfa,
    vbelv   TYPE vbfa-vbelv,
    posnv   TYPE vbfa-posnv,
    vbeln   TYPE vbfa-vbeln,
    posnn   TYPE vbfa-posnn,
    vbtyp_n TYPE vbfa-vbtyp_n,
    rfmng   TYPE vbfa-rfmng,
    erdat   TYPE vbfa-erdat,
    erzet   TYPE vbfa-erzet,
  END OF tp_vbfa,
  tp_t_vbfa TYPE SORTED TABLE OF tp_vbfa
            WITH NON-UNIQUE KEY vbelv posnv erdat erzet,

  BEGIN OF tp_tvzbt,
    zterm TYPE tvzbt-zterm,
    vtext TYPE tvzbt-vtext,
  END OF tp_tvzbt,
  tp_t_tvzbt TYPE HASHED TABLE OF tp_tvzbt
             WITH UNIQUE KEY zterm,

  BEGIN OF tp_t173t,
    vsart TYPE t173t-vsart,
    bezei TYPE t173t-bezei,
  END OF tp_t173t,
  tp_t_t173t TYPE HASHED TABLE OF tp_t173t
             WITH UNIQUE KEY vsart,

  BEGIN OF tp_knvh_key,
    kunnr TYPE knvh-kunnr,
    vkorg TYPE knvh-vkorg,
    vtweg TYPE knvh-vtweg,
    spart TYPE knvh-spart,
  END OF tp_knvh_key,
  tp_t_knvh_key TYPE HASHED TABLE OF tp_knvh_key
                WITH UNIQUE KEY kunnr vkorg vtweg spart,

  BEGIN OF tp_knvh,
    hityp  TYPE knvh-hityp,
    kunnr  TYPE knvh-kunnr,
    vkorg  TYPE knvh-vkorg,
    vtweg  TYPE knvh-vtweg,
    spart  TYPE knvh-spart,
    datab  TYPE knvh-datab,
    hkunnr TYPE knvh-hkunnr,
  END OF tp_knvh,
  tp_t_knvh TYPE SORTED TABLE OF tp_knvh
            WITH NON-UNIQUE KEY kunnr vkorg vtweg spart,

  BEGIN OF tp_jest_key,
    objnr TYPE jest-objnr,
  END OF tp_jest_key,
  tp_t_jest_key TYPE HASHED TABLE OF tp_jest_key
                WITH UNIQUE KEY objnr,

  BEGIN OF tp_jest,
    objnr TYPE jest-objnr,
    stat  TYPE jest-stat,
    inact TYPE jest-inact,
  END OF tp_jest,
  tp_t_jest TYPE SORTED TABLE OF tp_jest
            WITH NON-UNIQUE KEY objnr,

  BEGIN OF tp_stat,
    lib1 TYPE jest-stat,
    lib2 TYPE jest-stat,
*    lib3 TYPE jest-stat,
    blk1 TYPE jest-stat,
    blk2 TYPE jest-stat,
*    blk3 TYPE jest-stat,
*    blk4 TYPE jest-stat,
*    blk5 TYPE jest-stat,
*    blk6 TYPE jest-stat,
*    blk7 TYPE jest-stat,
*    blk8 TYPE jest-stat,
  END OF tp_stat,

  BEGIN OF tp_status,
    vbeln TYPE vbak-vbeln,
    lib1  TYPE jest-inact,
    lib2  TYPE jest-inact,
*    lib3  TYPE jest-inact,
    blk1  TYPE jest-inact,
    blk2  TYPE jest-inact,
*    blk3  TYPE jest-inact,
*    blk4  TYPE jest-inact,
*    blk5  TYPE jest-inact,
*    blk6  TYPE jest-inact,
*    blk7  TYPE jest-inact,
*    blk8  TYPE jest-inact,
  END OF tp_status,
  tp_t_status TYPE HASHED TABLE OF tp_status
              WITH UNIQUE KEY vbeln,

  BEGIN OF tp_tvro_key,
    route TYPE tvro-route,
  END OF tp_tvro_key,
  tp_t_tvro_key TYPE HASHED TABLE OF tp_tvro_key
                WITH UNIQUE KEY route,

  BEGIN OF tp_tvro,
    route  TYPE tvro-route,
    traztd TYPE tvro-traztd,
  END OF tp_tvro,
  tp_t_tvro TYPE HASHED TABLE OF tp_tvro
            WITH UNIQUE KEY route,

  BEGIN OF tp_t179t,
    prodh TYPE t179t-prodh,
    vtext TYPE t179t-vtext,
  END OF tp_t179t,
  tp_t_t179t TYPE HASHED TABLE OF tp_t179t
            WITH UNIQUE KEY prodh,

  BEGIN OF tp_t151t,
    kdgrp TYPE t151t-kdgrp,
    ktext TYPE t151t-ktext,
  END OF tp_t151t,
  tp_t_t151t TYPE HASHED TABLE OF tp_t151t
            WITH UNIQUE KEY kdgrp,

  BEGIN OF tp_likp_key,
    vbeln TYPE vbfa-vbeln,
  END OF tp_likp_key,
  tp_t_likp_key TYPE HASHED TABLE OF tp_likp_key
                WITH UNIQUE KEY vbeln,

  BEGIN OF tp_vbup,
    vbeln TYPE vbup-vbeln,
    posnr TYPE vbup-posnr,
    lfsta TYPE vbup-lfsta,
    absta TYPE vbup-absta,
  END OF tp_vbup,
  tp_t_vbup TYPE SORTED TABLE OF tp_vbup
            WITH NON-UNIQUE KEY vbeln posnr,

*** AA01 - Inicio
  BEGIN OF tp_vbuk,
    vbeln TYPE vbuk-vbeln,
    cmgst TYPE vbuk-cmgst,
  END OF tp_vbuk,
  tp_t_vbuk TYPE TABLE OF tp_vbuk,

  BEGIN OF tp_tj30,
    stsma TYPE tj30-stsma,
    estat TYPE tj30-estat,
  END OF tp_tj30,
  tp_t_tj30 TYPE TABLE OF tp_tj30,

  BEGIN OF tp_konv_key,
    knumv TYPE vbak-knumv,
    posnr TYPE vbap-posnr,
  END OF tp_konv_key,
  tp_t_konv_key TYPE TABLE OF tp_konv_key,

  BEGIN OF tp_vbak_key,
    vbeln TYPE vbak-vbeln,
    vkorg TYPE vbak-vkorg,
  END OF tp_vbak_key,
  tp_t_vbak_key TYPE TABLE OF tp_vbak_key,

  BEGIN OF tp_lin_key,
    refkey TYPE j_1bnflin-refkey,
    refitm TYPE j_1bnflin-refitm,
  END OF tp_lin_key,
  tp_t_lin_key TYPE SORTED TABLE OF tp_lin_key
                    WITH NON-UNIQUE KEY refkey refitm,


  BEGIN OF tp_adrc_emissor,
    addrnumber TYPE adrc-addrnumber,
    name1      TYPE adrc-name1,
    city1      TYPE adrc-city1,
    city2      TYPE adrc-city2,
    post_code1 TYPE adrc-post_code1,
    street     TYPE adrc-street,
    house_num1 TYPE adrc-house_num1,
    country    TYPE adrc-country,
    region     TYPE adrc-region,
    tel_number TYPE adrc-tel_number,
  END OF tp_adrc_emissor,
  tp_t_adrc_emissor TYPE STANDARD TABLE OF tp_adrc_emissor,

  BEGIN OF tp_vbrk,
    vbeln TYPE vbrk-vbeln,
    fksto TYPE vbrk-fksto,
    fkdat TYPE vbrk-fkdat,
    knumv TYPE vbrk-knumv, "AA01
  END OF tp_vbrk,
  tp_t_vbrk TYPE STANDARD TABLE OF tp_vbrk,

  BEGIN OF tp_vbrp,
    vbeln TYPE vbrp-vbeln,
    posnr TYPE vbrp-posnr,
    fkimg TYPE vbrp-fkimg,
    vrkme TYPE vbrp-vrkme,
    netwr TYPE vbrp-netwr,
    mwsbp TYPE vbrp-mwsbp,
  END OF tp_vbrp,
  tp_t_vbrp TYPE STANDARD TABLE OF tp_vbrp,

  BEGIN OF tp_ov,
    vbeln TYPE vbak-vbeln,
    posnr TYPE vbap-posnr,
    auart TYPE vbak-auart,
    vstel TYPE vbap-vstel,
    bstdk TYPE vbkd-bstdk,
  END OF tp_ov,
  tp_t_ov    TYPE STANDARD TABLE OF tp_ov,

  tp_r_cmgst TYPE RANGE OF cmgst, "AA01
  tp_r_stat  TYPE RANGE OF j_status, "AA01

*  GA01 - Início
  BEGIN OF tp_j1bnflin,
    docnum TYPE j_1bnflin-docnum,
    itmnum TYPE j_1bnflin-itmnum,
    refkey TYPE j_1bnflin-refkey,
    refitm TYPE j_1bnflin-refitm,
    netwr  TYPE j_1bnflin-netwr,
  END OF tp_j1bnflin,
  tp_t_j1bnflin TYPE SORTED TABLE OF tp_j1bnflin
                WITH UNIQUE KEY docnum itmnum refkey refitm,

  BEGIN OF tp_j1bnfdoc,
    docnum TYPE j_1bnfdoc-docnum,
    nfenum TYPE j_1bnfdoc-nfenum,
  END OF tp_j1bnfdoc,
  tp_t_j1bnfdoc TYPE SORTED TABLE OF tp_j1bnfdoc
                WITH UNIQUE KEY docnum,

  BEGIN OF tp_j1bnfstx,
    docnum TYPE j_1bnfstx-docnum,
    itmnum TYPE j_1bnfstx-itmnum,
    taxval TYPE j_1bnfstx-taxval,
  END OF tp_j1bnfstx,
  tp_t_j1bnfstx TYPE SORTED TABLE OF tp_j1bnfstx
                WITH UNIQUE KEY docnum itmnum,

* TLF01 - Início
  BEGIN OF tp_tj30t,
    stsma TYPE tj30t-stsma,
    estat TYPE tj30t-estat,
    spras TYPE tj30t-spras,
    txt04 TYPE tj30t-txt04,
    txt30 TYPE tj30t-txt30,
  END OF tp_tj30t,
* TLF01 - Fim

  BEGIN OF tp_konv,
    knumv TYPE konv-knumv,
    kposn TYPE konv-kposn,
    kschl TYPE konv-kschl,
    kbetr TYPE konv-kbetr,
    kwert TYPE konv-kwert,
  END OF tp_konv,
*  tp_t_konv TYPE SORTED TABLE OF tp_konv
*                  WITH UNIQUE KEY knumv kposn kschl.
  tp_t_konv TYPE TABLE OF tp_konv,  "AA01

*  GA01 - Fim

  " OR01 - Inicio
  BEGIN OF ty_integra_me_output,
    status_icon TYPE char25,
    status      TYPE symsgty,
    vbeln       TYPE vbeln_va,
    msg         TYPE bapi_msg,
  END OF ty_integra_me_output,
  ty_t_integra_me_output TYPE STANDARD TABLE OF ty_integra_me_output.
" OR01 - Fim

*** AA01 - Inicio
DATA:
  tl_alv      TYPE tp_t_alv,
  tl_alv_sint TYPE tp_t_alv_sint,
  tl_alv_sfat TYPE tp_t_alv_sfat.

DATA:
  vg_authority      TYPE c,
  vg_incl_zncr_zprt TYPE c,
  vg_layout         TYPE slis_vari,

  vg_days           TYPE vtbbewe-atage,
  vg_msg            TYPE c LENGTH 200,
  vg_qtde_dias      TYPE dbcon_name,
  vg_erro           TYPE c,
  vg_ztnf           TYPE konv-kbetr.

*... Definição de Classe Local
INCLUDE zsd_039dc01.
*... Implementação de Classe Local
INCLUDE zsd_039ic01.

DATA:
  ct_vbrk_fat TYPE TABLE OF vbrk,
  wl_vbrk_fat TYPE          vbrk,
  ct_vbfa_fat TYPE TABLE OF tp_vbfa_fat,
  wt_vbfa_fat TYPE          tp_vbfa_fat.

DATA:
  gr_events TYPE REF TO lcl_handle_events.
DATA:
  ol_salv_layout        TYPE REF TO cl_salv_layout,
  ol_salv_functions     TYPE REF TO cl_salv_functions,
  ol_salv_columns_table TYPE REF TO cl_salv_columns_table,
  ol_salv_column_table  TYPE REF TO cl_salv_column_table,
  ol_salv_display       TYPE REF TO cl_salv_display_settings,
  ol_selections         TYPE REF TO cl_salv_selections,
  ol_salv_table         TYPE REF TO cl_salv_table,
  ol_salv_columns       TYPE REF TO cl_salv_columns,
  ol_salv_column        TYPE REF TO cl_salv_column,
  ol_salv_sort          TYPE REF TO cl_salv_sorts.
*** AA01 - Fim

** ANORCE INicio
DATA: gv_kvgr2 TYPE tvv2t-bezei.
** ANORCE Fim

**********************************************************************
* Tela de Seleção
**********************************************************************
* Definição
*--------------------------------------------------------------------*
"AA01 - Incio
* Modo de Exibição
SELECTION-SCREEN BEGIN OF BLOCK b04 WITH FRAME TITLE TEXT-b04.
PARAMETERS: p_comp RADIOBUTTON GROUP gr3 USER-COMMAND b04 DEFAULT 'X',
            p_sint RADIOBUTTON GROUP gr3,
            p_sfat RADIOBUTTON GROUP gr3.
SELECTION-SCREEN END OF BLOCK b04.

SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE TEXT-b01.
SELECT-OPTIONS:

  s_auart   FOR vbak-auart MODIF ID sov, " SINTESE OV
  s_fkart   FOR vbrk-fkart MODIF ID fat, " FATURA
  s_vbeln   FOR vbak-vbeln MODIF ID cpl, " COMPLETO
* Chamado 8000001335 - Stefanini - Régis Medeiros - 02.12.2019 - Inicio
*  s_fkdat   FOR vbrk-fkdat MODIF ID fat, " FATURA
  s_fkdat   FOR vbrk-fkdat MODIF ID cmn, " FATURA
* Chamado 8000001335 - Stefanini - Régis Medeiros - 02.12.2019 - Fim
  s_vbelnf  FOR vbrk-vbeln MODIF ID fat, " FATURA
  s_audat   FOR vbak-audat MODIF ID sov, " SINTESE OV
  s_vdatu   FOR vbak-vdatu MODIF ID sov, " SINTESE OV
  s_vkorg   FOR vbak-vkorg MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_vtweg   FOR vbak-vtweg MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_vkgrp   FOR vbak-vkgrp MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_vkbur   FOR vbak-vkbur MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_abgru   FOR vbap-abgru MODIF ID cpl, " COMPLETO
* CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Inicio
  s_usern   FOR cdhdr-username MODIF ID cpl, " COMPLETO
  s_nfull   FOR adrp-name_text MODIF ID cpl, " COMPLETO
* CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Fim
  s_werks   FOR vbap-werks MODIF ID cmn, " COMUM OV/FATURA/COMPLETO

  s_kvgr2   FOR vbak-kvgr2 , " ANORCE

  s_lgort   FOR vbap-lgort MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_kunnr   FOR vbak-kunnr MODIF ID cpl, " COMPLETO
  s_matnr   FOR vbap-matnr MODIF ID cmn, " COMPLETO
*  s_matkl   FOR mara-matkl, "HKS01
  s_vstel   FOR vbap-vstel MODIF ID cmn, " COMUM OV/FATURA/COMPLETO
  s_lifsk   FOR vbak-lifsk MODIF ID cpl, " COMPLETO

  s_vsart FOR vbkd-vsart MODIF ID sov,
  s_lifnr FOR vbpa-lifnr.  "VC01

SELECTION-SCREEN END OF BLOCK b01.
"AA01 - Fim

* GA01 - Início
SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE TEXT-b02.
PARAMETERS:
  p_emcart RADIOBUTTON GROUP stat MODIF ID sta, "Ordens de Venda em carteira (sem remessa)
  p_carlib RADIOBUTTON GROUP stat MODIF ID sta, "Ordens de Venda em carteira com Liberação de Crédito e Liberação Comercial       "AA01
  p_cremes RADIOBUTTON GROUP stat MODIF ID sta, "Somente o que está em remessa (não foi feito o faturamento)
  p_fatura RADIOBUTTON GROUP stat MODIF ID sta, "Faturados
  p_todos  RADIOBUTTON GROUP stat MODIF ID sta DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b02.

*** AA01 - 21.06.2017 - Inicio
SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE TEXT-b03.
PARAMETERS: p_layout TYPE slis_vari MODIF ID lay.
SELECTION-SCREEN END OF BLOCK b03.


AT SELECTION-SCREEN OUTPUT.

  LOOP AT SCREEN.
* **Inicio - TIROL - SOLMAN 7000000868
    IF p_comp IS NOT INITIAL.
      IF screen-name = 'S_AUART-LOW' OR
* **Inicio - TIROL - SOLMAN 7000000868
*       screen-name = 'S_AUDAT-LOW' OR
         screen-name = 'S_VKORG-LOW' OR
* **Inicio - TIROL - SOLMAN 7000000868
*      screen-name = 'S_FKART-LOW' OR
*      screen-name = 'S_FKDAT-LOW'.
         screen-name = 'S_FKART-LOW'.
* **Fim - TIROL - SOLMAN 7000000868
        screen-required = '2'.
        MODIFY SCREEN.
      ENDIF.
    ELSE.
      IF screen-name = 'S_AUART-LOW' OR
         screen-name = 'S_AUDAT-LOW' OR
         screen-name = 'S_VKORG-LOW' OR
         screen-name = 'S_FKART-LOW' OR
         screen-name = 'S_FKDAT-LOW'.
        screen-required = '2'.
        MODIFY SCREEN.
      ENDIF.

    ENDIF.
* **Fim - TIROL - SOLMAN 7000000868
    IF screen-name = 'S_FKDAT-LOW' AND p_sfat IS INITIAL.
      screen-required = '0'.
      MODIFY SCREEN.
    ENDIF.

* Modo Sintético - Ordem de Venda
    IF p_sint IS NOT INITIAL.
      IF screen-group1 EQ 'STA' OR
         screen-group1 EQ 'LAY' OR
         screen-group1 EQ 'CPL' OR
         screen-group1 EQ 'FAT'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.

* Modo Sintético - Fatura
    IF p_sfat IS NOT INITIAL.
      IF screen-group1 EQ 'STA' OR
         screen-group1 EQ 'LAY' OR
         screen-group1 EQ 'CPL' OR
         screen-group1 EQ 'SOV' .
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.

* Modo Completo
    IF p_comp IS NOT INITIAL.
      IF screen-group1 EQ 'FAT'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.

  ENDLOOP.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_layout.
  PERFORM f4_layout.

AT SELECTION-SCREEN.

  IF sy-ucomm EQ 'ONLI'.

* Modo Sintético - Ordem de Venda
    IF p_sint IS NOT INITIAL.
      IF s_auart IS INITIAL OR
         s_audat IS INITIAL OR
         s_vkorg IS INITIAL.
        MESSAGE s368(00) WITH 'Preenhcer todos os campos obrigatórios'(007) DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 1000.
      ENDIF.
    ENDIF.

* Modo Sintético - Ordem de Venda
    IF p_sfat IS NOT INITIAL.
      IF s_fkart IS INITIAL OR
         s_fkdat IS INITIAL OR
         s_vkorg IS INITIAL.
        MESSAGE s368(00) WITH 'Preenhcer todos os campos obrigatórios'(007) DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 1000.
      ENDIF.
    ENDIF.

* Modo Completo
    IF p_comp IS NOT INITIAL.
      IF s_auart IS INITIAL OR
* **Inicio - TIROL - SOLMAN 7000000868
*        s_audat IS INITIAL OR
* **Fim - TIROL - SOLMAN 7000000868
         s_vkorg IS INITIAL.
        MESSAGE s368(00) WITH 'Preenhcer todos os campos obrigatórios'(007) DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 1000.
      ENDIF.
* **Inicio - TIROL - SOLMAN 7000000868

      IF ( s_audat[] IS NOT INITIAL AND
           s_fkdat[] IS NOT INITIAL AND
           s_vdatu[] IS NOT INITIAL ) OR
         ( s_audat[] IS INITIAL     AND
           s_fkdat[] IS NOT INITIAL AND
           s_vdatu[] IS NOT INITIAL ) OR
        ( s_audat[] IS NOT INITIAL AND
          s_fkdat[] IS INITIAL     AND
          s_vdatu[] IS NOT INITIAL ) OR
        ( s_audat[] IS NOT INITIAL AND
          s_fkdat[] IS NOT INITIAL AND
          s_vdatu[] IS INITIAL ).
        MESSAGE 'Só é permitido fazer seleção pelos campos Data do faturamento,Data de criação da OV e Data da saída de mercadorias somente um por vez' TYPE 'S' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 1000.

      ELSEIF s_audat[] IS INITIAL AND
             s_fkdat[] IS INITIAL AND
             s_vdatu[] IS INITIAL.
        MESSAGE 'Tem que informar o campos Data do faturamento ou Data de criação da OV ou Data da saída de mercadorias' TYPE 'S' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 1000.
      ENDIF.
* **Fim - TIROL - SOLMAN 7000000868
    ENDIF.

    vg_layout = p_layout.

    AUTHORITY-CHECK OBJECT 'ZSD_VSTEL'
             ID 'VSTEL' FIELD s_vstel.
    IF sy-subrc <> 0.
      MESSAGE s368(00) WITH 'Usuário não possui autorização para Local expedição'(006) DISPLAY LIKE 'E'.
    ENDIF.

  ELSEIF sy-ucomm EQ 'B04'.
    PERFORM limpa_tela.
  ENDIF.
*** AA01 - 21.06.2017 - Fim

*--------------------------------------------------------------------*
* Eventos
*--------------------------------------------------------------------*
INITIALIZATION.


**********************************************************************
* Processamento
**********************************************************************
START-OF-SELECTION.

  PERFORM consiste_days. " ADD - 7000000312 - 7000000312 - Consiste DAYS
  IF vg_erro IS INITIAL.
    PERFORM executa.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Form  EXECUTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM executa .

  DATA:
    tl_vbap         TYPE tp_t_vbap,
    tl_vbak         TYPE tp_t_vbak,
    tl_tvgrt        TYPE tp_t_tvgrt,
    tl_tvkbt        TYPE tp_t_tvkbt,
    tl_kna1         TYPE tp_t_kna1,
    tl_vbpa         TYPE tp_t_vbpa,
    tl_lfa1         TYPE tp_t_lfa1,
    tl_makt         TYPE tp_t_makt,
    tl_t023t        TYPE tp_t_t023t,
    tl_knvh         TYPE tp_t_knvh,
    tl_vbkd         TYPE tp_t_vbkd,
    tl_tvzbt        TYPE tp_t_tvzbt,
    tl_t173t        TYPE tp_t_t173t,
    tl_vbep         TYPE tp_t_vbep,
    tl_vbfa         TYPE tp_t_vbfa,
    tl_tvro         TYPE tp_t_tvro,
    tl_tvagt        TYPE tp_t_tvagt,
    tl_status       TYPE tp_t_status,
    tl_jest         TYPE tp_t_jest,
    tl_t179t        TYPE tp_t_t179t,
    tl_t151t        TYPE tp_t_t151t,
    tl_vbup         TYPE tp_t_vbup,
    tl_j1bnflin     TYPE tp_t_j1bnflin,     "GA01
    tl_j1bnfdoc     TYPE tp_t_j1bnfdoc,     "GA01
    tl_j1bnfstx     TYPE tp_t_j1bnfstx,     "GA01
    tl_konv_ov      TYPE tp_t_konv,         "GA01 "AA01
    tl_konv_fatura  TYPE tp_t_konv,         "AA01
    tl_adrc_emissor TYPE tp_t_adrc_emissor, "AA01
    tl_vbrk         TYPE tp_t_vbrk,         "AA01
    tl_vbrp         TYPE tp_t_vbrp,         "AA01
    tl_vbuk         TYPE tp_t_vbuk,         "AA01
    tl_tj30         TYPE tp_t_tj30.         "AA01

** Inicio - EME01
*  DATA:
*    tl_vbep_sm TYPE tp_t_vbep_sm.
** Fim    - EME01

  IF p_sint IS NOT INITIAL OR   "Modo Sintético OV
     p_comp IS NOT INITIAL.     "Modo Completo

    IF s_audat[] IS NOT INITIAL.

      PERFORM seleciona_dados_audat CHANGING  tl_vbap
                                        tl_vbak
                                        tl_tvgrt
                                        tl_tvkbt
                                        tl_kna1
                                        tl_vbpa
                                        tl_lfa1
                                        tl_makt
                                        tl_t023t
                                        tl_knvh
                                        tl_vbkd
                                        tl_tvzbt
                                        tl_t173t
                                        tl_vbep
*                                      tl_vbep_sm  "EME01
                                        tl_vbfa
                                        tl_tvro
                                        tl_tvagt
                                        tl_jest
                                        tl_t179t
                                        tl_t151t
                                        tl_status
                                        tl_vbup
                                        tl_j1bnflin  "GA01
                                        tl_j1bnfdoc  "GA01
                                        tl_j1bnfstx  "GA01
                                        tl_konv_ov   "GA01 "AA01
                                        tl_konv_fatura  "AA01
                                        tl_adrc_emissor "AA01
                                        tl_vbrk         "AA01
                                        tl_vbrp         "AA01
                                        tl_vbuk         "AA01
                                        tl_tj30.        "AA01

    ELSEIF s_fkdat[] IS NOT INITIAL OR s_vdatu[] IS NOT INITIAL.

      PERFORM seleciona_dados_fkdat_vdatu CHANGING tl_vbap
                                          tl_vbak
                                          tl_tvgrt
                                          tl_tvkbt
                                          tl_kna1
                                          tl_vbpa
                                          tl_lfa1
                                          tl_makt
                                          tl_t023t
                                          tl_knvh
                                          tl_vbkd
                                          tl_tvzbt
                                          tl_t173t
                                          tl_vbep
*                                      tl_vbep_sm  "EME01
                                          tl_vbfa
                                          tl_tvro
                                          tl_tvagt
                                          tl_jest
                                          tl_t179t
                                          tl_t151t
                                          tl_status
                                          tl_vbup
                                          tl_j1bnflin  "GA01
                                          tl_j1bnfdoc  "GA01
                                          tl_j1bnfstx  "GA01
                                          tl_konv_ov   "GA01 "AA01
                                          tl_konv_fatura  "AA01
                                          tl_adrc_emissor "AA01
                                          tl_vbrk         "AA01
                                          tl_vbrp         "AA01
                                          tl_vbuk         "AA01
                                          tl_tj30.        "AA01
    ENDIF.

    IF tl_vbap IS INITIAL.
      MESSAGE s368(00) WITH 'Nenhum registro encontrado'(003) DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
* TLF01 - Início
    SORT tl_konv_ov BY knumv kposn.
* TLF01 - Fim
    PERFORM processa_dados USING tl_vbap
                                 tl_vbak
                                 tl_tvgrt
                                 tl_tvkbt
                                 tl_kna1
                                 tl_vbpa
                                 tl_lfa1
                                 tl_makt
                                 tl_t023t
                                 tl_knvh
                                 tl_vbkd
                                 tl_tvzbt
                                 tl_t173t
                                 tl_vbep
*                                 tl_vbep_sm
                                 tl_vbfa
                                 tl_tvro
                                 tl_tvagt
                                 tl_jest
                                 tl_t179t
                                 tl_t151t
                                 tl_status
                                 tl_vbup
                                 tl_j1bnflin "GA01
                                 tl_j1bnfdoc "GA01
                                 tl_j1bnfstx "GA01
                                 tl_konv_ov      "AA01
                                 tl_konv_fatura  "AA01
                                 tl_adrc_emissor "AA01
                                 tl_vbrk         "AA01
                                 tl_vbrp         "AA01
                                 tl_vbuk         "AA01
                                 tl_tj30         "AA01
                                 CHANGING tl_alv.

*     Chamado 8000001335 - Stefanini - Régis Medeiros - 03.12.2019 - Inicio
    IF s_fkdat IS NOT INITIAL.
      DELETE tl_alv WHERE NOT fkdat IN s_fkdat.
    ENDIF.
*     Chamado 8000001335 - Stefanini - Régis Medeiros - 03.12.2019 - FIM

  ELSE.  " Modo Sintético Fatura

    PERFORM seleciona_dados_fatura CHANGING tl_alv_sfat.

    PERFORM processa_dados_fatura CHANGING tl_alv_sfat.

  ENDIF.

  IF tl_alv IS INITIAL AND
     tl_alv_sint IS INITIAL AND
     tl_alv_sfat IS INITIAL.
    MESSAGE s368(00) WITH 'Nenhum registro encontrado'(003) DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  PERFORM exibe_alv USING tl_alv
                          tl_alv_sint
                          tl_alv_sfat.


ENDFORM.                    " EXECUTA
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM seleciona_dados_audat CHANGING  ct_vbap            TYPE tp_t_vbap
                                ct_vbak            TYPE tp_t_vbak
                                ct_tvgrt           TYPE tp_t_tvgrt
                                ct_tvkbt           TYPE tp_t_tvkbt
                                ct_kna1            TYPE tp_t_kna1
                                ct_vbpa            TYPE tp_t_vbpa
                                ct_lfa1            TYPE tp_t_lfa1
                                ct_makt            TYPE tp_t_makt
                                ct_t023t           TYPE tp_t_t023t
                                ct_knvh            TYPE tp_t_knvh
                                ct_vbkd            TYPE tp_t_vbkd
                                ct_tvzbt           TYPE tp_t_tvzbt
                                ct_t173t           TYPE tp_t_t173t
                                ct_vbep            TYPE tp_t_vbep
*                                ct_vbep_sm         TYPE tp_t_vbep_sm
                                ct_vbfa            TYPE tp_t_vbfa
                                ct_tvro            TYPE tp_t_tvro
                                ct_tvagt           TYPE tp_t_tvagt
                                ct_jest            TYPE tp_t_jest
                                ct_t179t           TYPE tp_t_t179t
                                ct_t151t           TYPE tp_t_t151t
                                ct_status          TYPE tp_t_status
                                ct_vbup            TYPE tp_t_vbup
                                ct_j1bnflin        TYPE tp_t_j1bnflin
                                ct_j1bnfdoc        TYPE tp_t_j1bnfdoc
                                ct_j1bnfstx        TYPE tp_t_j1bnfstx
                                ct_konv_ov         TYPE tp_t_konv
                                ct_konv_fatura     TYPE tp_t_konv
                                ct_adrc_emissor    TYPE tp_t_adrc_emissor
                                ct_vbrk            TYPE tp_t_vbrk
                                ct_vbrp            TYPE tp_t_vbrp
                                ct_vbuk            TYPE tp_t_vbuk
                                ct_tj30            TYPE tp_t_tj30.

  DEFINE busca_param_stat.
    CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
      EXPORTING
        i_modulo            = c_param-modulo
        i_param1            = c_param-param1
        i_param2            = c_param-status-param2
        i_param3            = c_param-status-param3
        i_param4            = c_param-status-param4-&1
      IMPORTING
        e_valor             = wl_stat-&1
      EXCEPTIONS
        nao_encontrado      = 1
        range_nao_informado = 2
        OTHERS              = 3.
    IF sy-subrc IS INITIAL.
      CLEAR wl_r_stat.
      wl_r_stat-sign   = 'I'.
      wl_r_stat-option = 'EQ'.
      wl_r_stat-low    = wl_stat-&1.
      APPEND wl_r_stat TO rl_stat.
    ENDIF.
  END-OF-DEFINITION.

  DATA:
    tl_tvgrt_key    TYPE tp_t_tvgrt_key,
    tl_tvkbt_key    TYPE tp_t_tvkbt_key,
    tl_kna1_key     TYPE tp_t_kna1_key,
    tl_lfa1_key     TYPE tp_t_lfa1_key,
    tl_makt_key     TYPE tp_t_makt_key,
    tl_t023t_key    TYPE tp_t_t023t_key,
    tl_tvagt_key    TYPE tp_t_tvagt_key,
    tl_knvh_key     TYPE tp_t_knvh_key,
    tl_jest_key     TYPE tp_t_jest_key,
    tl_tvro_key     TYPE tp_t_tvro_key,
    tl_likp_key     TYPE tp_t_likp_key,
    tl_konv_ov_key  TYPE tp_t_konv_key, "AA01
    tl_konv_fat_key TYPE tp_t_konv_key, "AA01

    rl_stat         TYPE RANGE OF jest-stat,

    wl_vbap         TYPE tp_vbap,
    wl_vbak         TYPE tp_vbak,
    wl_vbpa         TYPE tp_vbpa,
    wl_tvgrt_key    TYPE tp_tvgrt_key,
    wl_tvkbt_key    TYPE tp_tvkbt_key,
    wl_kna1_key     TYPE tp_kna1_key,
    wl_lfa1_key     TYPE tp_lfa1_key,
    wl_makt_key     TYPE tp_makt_key,
    wl_t023t_key    TYPE tp_t023t_key,
    wl_tvagt_key    TYPE tp_tvagt_key,
    wl_knvh_key     TYPE tp_knvh_key,
    wl_knvh         TYPE tp_knvh,
    wl_jest_key     TYPE tp_jest_key,
    wl_jest         TYPE tp_jest,
    wl_vbfa         TYPE tp_vbfa,
    wl_tvzbt        TYPE tp_tvzbt,
    wl_tvro_key     TYPE tp_tvro_key,
    wl_tvro         TYPE tp_tvro,
    wl_stat         TYPE tp_stat,
    wl_status       TYPE tp_status,
    wl_r_stat       LIKE LINE OF rl_stat,
    wl_likp_key     TYPE tp_likp_key,
    wl_konv_ov_key  TYPE tp_konv_key, "AA01
    wl_konv_fat_key TYPE tp_konv_key, "AA01

    vl_nivel_1      TYPE string,
    vl_nivel_2      TYPE string,
    vl_nivel_3      TYPE string,
    vl_aprovados    TYPE string,
    vl_sem_aprov    TYPE string.

* AA01 - 15.06.2017 - Inicio
  TYPES: BEGIN OF tp_vbfa_remessas,
           vbeln TYPE vbfa-vbeln,
           posnn TYPE vbfa-posnn,
         END OF tp_vbfa_remessas,

         BEGIN OF tp_vbfa_faturas,
           vbeln TYPE vbfa-vbeln,
           posnr TYPE vbfa-posnn,
         END OF tp_vbfa_faturas.

*         GA01 - Início - Movido para a área global
*         BEGIN OF tp_j1bnflin,
*           docnum TYPE j_1bnflin-docnum,
*           itmnum TYPE j_1bnflin-itmnum,
*           refkey TYPE j_1bnflin-refkey,
*           netwr  TYPE j_1bnflin-netwr,
*         END OF tp_j1bnflin,
*
*         BEGIN OF tp_j1bnfdoc,
*           docnum TYPE j_1bnfdoc-docnum,
*           nfenum TYPE j_1bnfdoc-nfenum,
*         END OF tp_j1bnfdoc,
*
**        GA01 - Início
*         BEGIN OF tp_j1bnfstx,
*           docnum  TYPE j_1bnfstx-docnum,
*           itmnum  TYPE j_1bnfstx-itmnum,
*           taxval TYPE j_1bnfstx-taxval,
*         END OF tp_j1bnfstx,

*         BEGIN OF tp_konv,
*           knumv TYPE konv-knumv,
*           kposn TYPE konv-kposn,
*           kschl TYPE konv-kschl,
*           kwert TYPE konv-kwert,
*         END OF tp_konv.
**        GA01 - Fim

  DATA: tl_vbfa_remessas TYPE TABLE OF tp_vbfa_remessas,
        tl_vbfa_faturas  TYPE TABLE OF tp_vbfa_faturas.
  DATA: tl_j1bnflin_key TYPE tp_t_lin_key,
        wl_j1bnflin_key TYPE tp_lin_key.

*        GA01 - Movido para a área global
*        tl_j1bnflin        TYPE TABLE OF tp_j1bnflin,
*        tl_j1bnfdoc        TYPE TABLE OF tp_j1bnfdoc,
*        tl_j1bnfstx        TYPE TABLE OF tp_j1bnfstx, "GA01
*        tl_konv            TYPE TABLE OF tp_konv.
*        GA01 - Fim


* AA01 - 15.06.2017 - Fim

  "Obtém dados dos cabeçalhos de OV
*  SELECT vbeln erdat erzet ernam vbtyp auart lifsk faksk vkorg vtweg spart
*         vkgrp vkbur knumv vdatu autlf bstnk bstdk kunnr objnr zzcmgst aufnr
*         xblnr augru "AA01
*    FROM vbak
*    INTO TABLE ct_vbak
*    WHERE vbeln IN s_vbeln
*      AND auart IN s_auart
*      AND audat IN s_audat
**      AND vbtyp IN ('C', 'I')
*      AND vtweg IN s_vtweg
*      AND vkbur IN s_vkbur
**      AND vdatu IN s_vdatu "GA01
*      AND vkorg IN s_vkorg
*      AND kunnr IN s_kunnr "GA01
*      AND lifsk IN s_lifsk. "AA01


  SELECT vbak~vbeln, vbak~erdat, vbak~erzet, vbak~ernam, vbak~vbtyp, vbak~auart, vbak~lifsk, tvlst~lifsp, tvlst~vtext, vbak~faksk, vbak~vkorg, vbak~vtweg, tvtwt~vtext, vbak~spart,
         vbak~vkgrp, vbak~vkbur, vbak~knumv, vbak~vdatu, vbak~autlf, vbak~bstnk, vbak~bstdk, vbak~kunnr, vbak~objnr, vbak~zzcmgst, vbak~aufnr,
         vbak~xblnr, vbak~augru, tvaut~bezei, vbak~zzcarga, vbak~kvgr2 "AA01 "ANORCE
    FROM vbak AS vbak
    LEFT JOIN tvlst as tvlst on vbak~lifsk = tvlst~lifsp
    LEFT JOIN tvls AS tvls ON
               tvls~lifsp = tvlst~lifsp AND tvlst~spras = @sy-langu
    LEFT JOIN tvtwt AS tvtwt ON
               vbak~vtweg = tvtwt~vtweg AND tvtwt~spras = @sy-langu
    LEFT OUTER JOIN tvaut AS tvaut ON
               tvaut~augru = vbak~augru
           AND tvaut~spras = @sy-langu
    INTO TABLE @ct_vbak
    WHERE vbeln IN @s_vbeln
      AND auart IN @s_auart
      AND audat IN @s_audat
*      AND vbtyp IN ('C', 'I')
      AND vbak~vtweg IN @s_vtweg
      AND vkbur IN @s_vkbur
*      AND vdatu IN s_vdatu "GA01
      AND vbak~vkorg IN @s_vkorg
      AND vbak~kunnr IN @s_kunnr "GA01
      AND vbak~lifsk IN @s_lifsk  "AA01
      AND vbak~vkgrp IN @s_vkgrp
      AND vbak~kvgr2 IN @s_kvgr2 . "ANORCE

  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

*   Chamado 8000001335 - Stefanini - Régis Medeiros - 03.12.2019 - Inicio
  IF s_fkdat IS NOT INITIAL.
    SELECT vbfa~vbelv, vbfa~vbeln, vbrk~fkdat
      FROM vbrk
      LEFT OUTER JOIN vbfa AS vbfa ON
               vbfa~vbeln = vbrk~vbeln
      INTO TABLE @ct_vbfa_fat
      FOR ALL ENTRIES IN @ct_vbak
    WHERE vbfa~vbelv = @ct_vbak-vbeln
      AND fkdat IN @s_fkdat
      AND vbtyp_n EQ 'M'.

    LOOP AT ct_vbak INTO wl_vbak.
      READ TABLE ct_vbfa_fat WITH KEY vbelv = wl_vbak-vbeln TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        DELETE TABLE ct_vbak FROM wl_vbak.
      ENDIF.
    ENDLOOP.

  ENDIF.
  IF ct_vbak[] IS INITIAL.
    RETURN.
  ENDIF.
*   Chamado 8000001335 - Stefanini - Régis Medeiros - 03.12.2019 - Fim

  "Obtém dados referentes aos itens a partir das OVs
  SELECT vbap~vbeln vbap~posnr vbap~matnr vbap~matkl vbap~pstyv vbap~abgru vbap~zmeng vbap~umziz vbap~umzin vbap~meins vbap~netwr vbap~waerk
      vbap~kwmeng vbap~kbmeng vbap~vrkme vbap~brgew vbap~volum vbap~voleh vbap~lprio vbap~werks t001w~name1 vbap~lgort vbap~route vbap~mwsbp vbap~prodh
      vbap~vstel vbap~mvgr1 vbap~charg
    FROM vbap AS vbap
    INNER JOIN t001w AS t001w on vbap~werks = t001w~werks
    INTO TABLE ct_vbap
    FOR ALL ENTRIES IN ct_vbak
    WHERE vbeln = ct_vbak-vbeln
      AND abgru IN s_abgru  "GA01
      AND vbap~werks IN s_werks  "GA01
      AND lgort IN s_lgort  "GA01
      AND matnr IN s_matnr  "GA01
      AND vbap~vstel IN s_vstel.  "AA01
*      AND matkl IN s_matkl. "HKS01

  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  "GGS01 - Inicio
  "elimina OVs desnecessárias
  LOOP AT ct_vbak INTO wl_vbak.
    READ TABLE ct_vbap WITH TABLE KEY vbeln = wl_vbak-vbeln TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      DELETE TABLE ct_vbak FROM wl_vbak.
    ENDIF.
  ENDLOOP.
  "GGS01 - Fim

* AK01 - Início
  "Recupera Status de Remessa (LFSTA) e Status de Recusa (ABSTA) dos itens da ordem
  SELECT vbeln posnr lfsta absta
    FROM vbup
    INTO TABLE ct_vbup
    FOR ALL ENTRIES IN ct_vbap
    WHERE vbeln = ct_vbap-vbeln
    AND   posnr = ct_vbap-posnr.
* AK01 - Fim.

* GA01 - Início
  IF s_vdatu[] IS NOT INITIAL.
    PERFORM f_busca_intervalo_data_sm USING ct_vbap.
  ENDIF.
* GA01 - Fim

  "Obtém os dados de divisão de remessa a partir dos itens obtidos
  IF NOT ct_vbap[] IS INITIAL. "GGS01
    SELECT vbeln posnr etenr edatu bmeng wadat lifsp mbdat
      FROM vbep
      INTO TABLE ct_vbep
      FOR ALL ENTRIES IN ct_vbap
      WHERE vbeln = ct_vbap-vbeln
        AND posnr = ct_vbap-posnr
*      AND wadat IN s_vdatu "GA01
        AND edatu IN s_vdatu "AA01
        AND etenr EQ '1'.    "AA01 "EME01 - Buscar todas div. remessa para ordem

** Inicio - EME01
**   --Separação de tabelas internas para ajuste do campo "Saida Mercadoria" (ALV-WADAT)
*    ct_vbep_sm[] = ct_vbep[].
*    DELETE ct_vbep WHERE etenr <> '0001'.
*
*    SORT ct_vbep_sm BY etenr DESCENDING vbeln posnr ASCENDING.
** Fim    - EME01
  ENDIF. "GGS01
**SOLMAN 7000001605 - Inicio - 26.01.2021
  IF ct_vbep[] IS INITIAL.

    DELETE s_auart WHERE low NE 'VEF'.

    IF s_auart[] IS INITIAL .
      PERFORM f_ajusta_vbep_vbap CHANGING ct_vbep
                                          ct_vbap
                                          ct_vbak.

      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

    ENDIF.
  ELSE.
**SOLMAN 7000001605 - Fim - 26.01.2021
* GA01 - Início - Ajusta a tabela vbep para que fique com apenas
*                 um item (o primeiro) e com os valores sumarizados
    PERFORM f_ajusta_vbep_vbap CHANGING ct_vbep
                                        ct_vbap
                                        ct_vbak.
* GA01 - Fim

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

**SOLMAN 7000001605 - Inicio - 26.01.2021
  ENDIF.
***SOLMAN 7000001605 - Fim - 26.01.2021

  "Obtém transportadora da Ordem de Venda
  IF NOT ct_vbak[] IS INITIAL. "GGS01
    SELECT vbeln posnr parvw kunnr lifnr
      INTO TABLE ct_vbpa
      FROM vbpa
      FOR ALL ENTRIES IN ct_vbak
      WHERE vbeln = ct_vbak-vbeln
        AND posnr = 0
        AND parvw IN (c_parvw-agente_frete,
                      c_parvw-emissor_ordem,
                      c_parvw-recebedor_merc,
                      c_parvw-redespacho,
                      c_parvw-repres_venda, "MF01
                      c_parvw-transp_insumos). "VC01
    IF sy-subrc EQ 0 AND "VC01 - Inicio - Filtro Trasportador de Insumos
       s_lifnr[] IS NOT INITIAL.

      DELETE ct_vbpa WHERE lifnr NOT IN s_lifnr OR
                           parvw NE c_parvw-transp_insumos.

      "Remover as linhas de Header e Itens que não atendem ao filtro do transportador
      LOOP AT ct_vbak INTO wl_vbak.

        READ TABLE ct_vbpa
              WITH KEY vbeln = wl_vbak-vbeln
              TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          DELETE TABLE ct_vbak FROM wl_vbak.

          LOOP AT ct_vbap INTO wl_vbap WHERE vbeln EQ wl_vbak-vbeln.
            DELETE TABLE ct_vbap FROM wl_vbap.
          ENDLOOP.

        ENDIF.

      ENDLOOP.

    ENDIF. "VC01 - Fim
  ENDIF.                    "GGS01

*  IF sy-subrc IS INITIAL. "VC01
  LOOP AT ct_vbpa INTO wl_vbpa.
    IF wl_vbpa-lifnr IS NOT INITIAL.
      CLEAR wl_lfa1_key.
      wl_lfa1_key-lifnr = wl_vbpa-lifnr.
      COLLECT wl_lfa1_key INTO tl_lfa1_key.
    ENDIF.

    IF wl_vbpa-kunnr IS NOT INITIAL.
      CLEAR wl_kna1_key.
      wl_kna1_key-kunnr = wl_vbpa-kunnr.
      COLLECT wl_kna1_key INTO tl_kna1_key.
    ENDIF.
  ENDLOOP.
*  ENDIF. "VC01

  IF tl_lfa1_key IS NOT INITIAL.
    SELECT lifnr name1
      adrnr "AA01
      INTO TABLE ct_lfa1
      FROM lfa1
      FOR ALL ENTRIES IN tl_lfa1_key
      WHERE lifnr = tl_lfa1_key-lifnr.
  ENDIF.

  "Obtém os dados de Fluxos de Documento

**SOLMAN 7000001605 - Inicio - 26.01.2021
  DATA: r_dele_fat    TYPE RANGE OF vbfa-vbeln,
        strl_dele_fat LIKE LINE OF r_dele_fat.

  READ TABLE s_auart WITH KEY low = 'VEF'
   TRANSPORTING NO FIELDS.

  IF sy-subrc EQ 0.
    DATA(vl_yes_vef) = abap_true.
  ENDIF.

*  IF NOT ct_vbap[] IS  INITIAL. "GGS01
  IF NOT ct_vbap[] IS  INITIAL AND vl_yes_vef IS INITIAL.
**SOLMAN 7000001605 - Fim - 26.01.2021
    SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
           erdat erzet "GA01
      FROM vbfa
      INTO TABLE ct_vbfa
      FOR ALL ENTRIES IN ct_vbap
      WHERE vbelv = ct_vbap-vbeln
        AND posnv = ct_vbap-posnr
        AND vbtyp_n IN ('J', 'M', 'N', 'R', 'h').

**SOLMAN 7000001605 - Inicio - 26.01.2021
  ELSEIF NOT ct_vbap[] IS  INITIAL AND vl_yes_vef IS NOT INITIAL.

    SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
         erdat erzet "GA01
    FROM vbfa
    INTO TABLE ct_vbfa
    FOR ALL ENTRIES IN ct_vbap
    WHERE vbelv = ct_vbap-vbeln
      AND posnv = ct_vbap-posnr
      AND vbtyp_n EQ 'M'.

    IF ct_vbfa[] IS NOT INITIAL.

      SELECT vbeln
        FROM vbrk
        INTO TABLE @DATA(tl_vbrk_fa)
        FOR ALL ENTRIES IN @ct_vbfa
        WHERE  vbeln EQ @ct_vbfa-vbeln
          AND  fkart EQ  'FA'.

      IF tl_vbrk_fa[] IS NOT INITIAL.

        LOOP AT ct_vbfa ASSIGNING FIELD-SYMBOL(<f_vbfa>).

          READ TABLE tl_vbrk_fa WITH KEY vbeln = <f_vbfa>-vbeln
          TRANSPORTING NO FIELDS.

          IF sy-subrc NE 0.

            strl_dele_fat = VALUE #( sign   = 'I'
                                     option = 'EQ'
                                     low    = <f_vbfa>-vbeln ).

            APPEND strl_dele_fat TO r_dele_fat.
            CLEAR strl_dele_fat.

          ENDIF.
        ENDLOOP.

        DELETE ct_vbfa WHERE vbeln IN r_dele_fat.

      ENDIF.
    ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021

  ENDIF. "GGS01

  LOOP AT ct_vbfa INTO wl_vbfa.
    CHECK wl_vbfa-vbtyp_n = 'J'.
    wl_likp_key-vbeln = wl_vbfa-vbeln.
    COLLECT wl_likp_key INTO tl_likp_key.
  ENDLOOP.

  IF NOT tl_likp_key[] IS INITIAL. "GGS01
    SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
           erdat erzet "GA01
      FROM vbfa
      APPENDING TABLE ct_vbfa
      FOR ALL ENTRIES IN tl_likp_key
      WHERE vbelv = tl_likp_key-vbeln
        AND vbtyp_n IN ('M', 'N', 'R', 'h').
  ENDIF. "GGS01


******* AA01 - 21.06.2017 - Inicio - Ajuste de Performance
****  IF sy-uname EQ 'PEL_AAMORIM'.
****
****    BREAK pel_aamorim.
****
****    TYPES: BEGIN OF tp_atp,
****             vbeln_rem  TYPE vbfa-vbeln,
****             posnn_rem  TYPE vbfa-posnn,
****             vbeln_fat  TYPE vbfa-vbeln,
****             posnn_fat  TYPE vbfa-posnn,
****             vbeln_est  TYPE vbrk-vbeln,
****             fksto      TYPE vbrk-fksto,
****             docnum_lin TYPE j_1bnflin-docnum,
****             itmnum_lin TYPE j_1bnflin-itmnum,
****             refkey     TYPE j_1bnflin-refkey,
****             refitm     TYPE j_1bnflin-refitm,
****             netwr      TYPE j_1bnflin-netwr,
****             docnum_doc TYPE j_1bnfdoc-docnum,
****             nfenum     TYPE j_1bnfdoc-nfenum,
****             docnum_stx TYPE j_1bnfstx-docnum,
****             itmnum_stx TYPE j_1bnfstx-itmnum,
****             taxval     TYPE j_1bnfstx-taxval,
****           END OF tp_atp,
****           tp_t_atp TYPE STANDARD TABLE OF tp_atp.
****
****    DATA: tl_atp TYPE tp_t_atp.
****
****    SELECT vbfa_rem~vbeln   AS vbeln_rem ,
****           vbfa_rem~posnn   AS posnn_rem ,
****           vbfa_fat~vbeln   AS vbeln_fat ,
****           vbfa_fat~posnn   AS posnn_fat ,
****           vbrk_est~vbeln   AS vbeln_est ,
****           vbrk_est~fksto                ,
****           j_1bnflin~docnum AS docnum_lin,
****           j_1bnflin~itmnum AS itmnum_lin,
****           j_1bnflin~refkey              ,
****           j_1bnflin~refitm              ,
****           j_1bnflin~netwr               ,
****           j_1bnfdoc~docnum AS docnum_doc,
****           j_1bnfdoc~nfenum              ,
****           j_1bnfstx~docnum AS docnum_stx,
****           j_1bnfstx~itmnum AS itmnum_stx,
****           j_1bnfstx~taxval
****      FROM vbak AS vbak
****      INNER JOIN vbap       AS vbap ON
****                               vbak~vbeln       = vbap~vbeln
****      INNER JOIN vbfa       AS vbfa_rem ON
****                               vbfa_rem~vbelv   = vbap~vbeln
****                           AND vbfa_rem~posnv   = vbap~posnr
****                           AND vbfa_rem~vbtyp_n = 'J'
****       LEFT JOIN vbfa       AS vbfa_fat ON
****                               vbfa_fat~vbelv   = vbfa_rem~vbeln
****                           AND vbfa_fat~posnv   = vbfa_rem~posnn
****                           AND vbfa_fat~vbtyp_n = 'M'
****       LEFT JOIN vbrk       AS vbrk_est ON
****                               vbrk_est~vbeln   = vbfa_fat~vbeln
****                           AND vbrk_est~fksto   = @abap_true
****       LEFT JOIN j_1bnflin  AS j_1bnflin ON
****                     SUBSTRING( j_1bnflin~refkey, 1, 10 ) = vbfa_fat~vbeln
****                           AND j_1bnflin~refitm  = vbfa_fat~posnn
****       LEFT JOIN j_1bnfdoc  AS j_1bnfdoc ON
****                               j_1bnfdoc~docnum  = j_1bnflin~docnum
****       LEFT JOIN j_1bnfstx  AS j_1bnfstx ON
****                               j_1bnfstx~docnum  = j_1bnflin~docnum
****                           AND j_1bnfstx~itmnum  = j_1bnflin~itmnum
****                           AND j_1bnfstx~taxtyp  = 'ICS3'
****      WHERE vbak~vbeln IN @s_vbeln
****        AND vbak~auart IN @s_auart
****        AND vbak~audat IN @s_audat
****        AND vbak~vbtyp IN ('C', 'I')
****        AND vbak~vtweg IN @s_vtweg
****        AND vbak~vkbur IN @s_vkbur
****        AND vbak~vkorg IN @s_vkorg
****        AND vbak~kunnr IN @s_kunnr
****        AND vbap~abgru IN @s_abgru
****        AND vbap~werks IN @s_werks
****        AND vbap~lgort IN @s_lgort
****        AND vbap~matnr IN @s_matnr
****        INTO TABLE @tl_atp.
****
****  ENDIF.
******* AA01 - 21.06.2017 - Fim


* AA01 - 15.06.2017 - Inicio
* Busca Remessas
  IF NOT ct_vbap[] IS INITIAL. "GGS01
    SELECT vbeln posnn
      FROM vbfa
      INTO TABLE tl_vbfa_remessas
      FOR ALL ENTRIES IN ct_vbap
      WHERE vbelv   EQ ct_vbap-vbeln
        AND posnv   EQ ct_vbap-posnr
        AND ( vbtyp_n EQ 'J'    "Remessa
         OR   vbtyp_n EQ 'T' ). "Remessa Devolução
  ENDIF.

* Busca Fatura
  IF vl_yes_vef IS NOT INITIAL .

    IF tl_vbfa_remessas[] IS NOT INITIAL.
      SELECT vbeln posnn
        FROM vbfa
        INTO TABLE tl_vbfa_faturas
        FOR ALL ENTRIES IN tl_vbfa_remessas
        WHERE vbelv   EQ tl_vbfa_remessas-vbeln
          AND posnv   EQ tl_vbfa_remessas-posnn
          AND ( vbtyp_n EQ 'M'    "Fatura
           OR   vbtyp_n EQ 'O' ). "Nota de Crédito
    ENDIF.

    IF ct_vbap[] IS NOT INITIAL.
* Ch. 00040 - Stefanini - Régis Medeiros - Fim
      SELECT vbeln posnn
        FROM vbfa
        APPENDING TABLE tl_vbfa_faturas
        FOR ALL ENTRIES IN ct_vbap
        WHERE vbelv   EQ ct_vbap-vbeln
          AND posnv   EQ ct_vbap-posnr
          AND ( vbtyp_n EQ 'M'    "Fatura
           OR   vbtyp_n EQ 'O' ). "Nota de Crédito

    ENDIF.
  ELSE.
    IF tl_vbfa_remessas[] IS NOT INITIAL.
      SELECT vbeln posnn
        FROM vbfa
        INTO TABLE tl_vbfa_faturas
        FOR ALL ENTRIES IN tl_vbfa_remessas
        WHERE vbelv   EQ tl_vbfa_remessas-vbeln
          AND posnv   EQ tl_vbfa_remessas-posnn
          AND ( vbtyp_n EQ 'M'    "Fatura
           OR   vbtyp_n EQ 'O' ). "Nota de Crédito
* Ch. 00040 - Stefanini - Régis Medeiros - Inicio
*  ELSE.
    ELSEIF ct_vbap[] IS NOT INITIAL.
* Ch. 00040 - Stefanini - Régis Medeiros - Fim
      SELECT vbeln posnn
        FROM vbfa
        INTO TABLE tl_vbfa_faturas
        FOR ALL ENTRIES IN ct_vbap
        WHERE vbelv   EQ ct_vbap-vbeln
          AND posnv   EQ ct_vbap-posnr
          AND ( vbtyp_n EQ 'M'    "Fatura
           OR   vbtyp_n EQ 'O' ). "Nota de Crédito
    ENDIF.
  ENDIF.

  SORT tl_vbfa_faturas BY vbeln.
  DELETE ADJACENT DUPLICATES FROM tl_vbfa_faturas.

* Busca Flag de Estorno da Fatura
  IF NOT tl_vbfa_faturas[] IS INITIAL. "GGS01
    SELECT vbeln fksto fkdat
      FROM vbrk
      INTO TABLE ct_vbrk
      FOR ALL ENTRIES IN tl_vbfa_faturas
      WHERE vbeln EQ tl_vbfa_faturas-vbeln.
*      AND fksto = 'X'. "GA01 "AA01
  ENDIF. "GGS01

* Busca dados de item da fatura
  IF NOT ct_vbrk[] IS INITIAL. "GGS01
    SELECT vbeln posnr fkimg vrkme netwr mwsbp
      FROM vbrp
      INTO TABLE ct_vbrp
      FOR ALL ENTRIES IN ct_vbrk
    WHERE vbeln EQ ct_vbrk-vbeln.
  ENDIF. "GGS01

**SOLMAN 7000001605 - Inicio - 26.01.2021
  IF vl_yes_vef NE abap_true.
**SOLMAN 7000001605 - Fim - 26.01.2021
    LOOP AT tl_vbfa_faturas REFERENCE INTO DATA(wlr_faturas).
      READ TABLE ct_vbrk WITH KEY vbeln = wlr_faturas->vbeln
                                  fksto = abap_true TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        CONTINUE.
      ENDIF.
      wl_j1bnflin_key-refkey = wlr_faturas->vbeln.
      wl_j1bnflin_key-refitm = wlr_faturas->posnr.
      INSERT wl_j1bnflin_key INTO TABLE tl_j1bnflin_key.
    ENDLOOP.
**SOLMAN 7000001605 - Inicio - 26.01.2021
  ELSEIF vl_yes_vef EQ abap_true.

    LOOP AT ct_vbfa ASSIGNING <f_vbfa>.
      wl_j1bnflin_key-refkey = <f_vbfa>-vbeln.
      wl_j1bnflin_key-refitm = <f_vbfa>-posnn.
      INSERT wl_j1bnflin_key INTO TABLE tl_j1bnflin_key.
    ENDLOOP.

  ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021

* Busca Nota Fiscal
  IF NOT tl_j1bnflin_key[] IS INITIAL. "GGS01
    SELECT docnum itmnum refkey refitm netwr
      FROM j_1bnflin
      INTO TABLE ct_j1bnflin
      FOR ALL ENTRIES IN tl_j1bnflin_key
      WHERE refkey EQ tl_j1bnflin_key-refkey
        AND refitm EQ tl_j1bnflin_key-refitm.
  ENDIF. "GGS01


*  SORT ct_j1bnflin BY docnum refkey. "GA01
  DELETE ADJACENT DUPLICATES FROM ct_j1bnflin.


  IF NOT ct_j1bnflin[] IS INITIAL. "GGS01
    SELECT docnum nfenum
      FROM j_1bnfdoc
      INTO TABLE ct_j1bnfdoc
      FOR ALL ENTRIES IN ct_j1bnflin
      WHERE docnum EQ ct_j1bnflin-docnum.
  ENDIF. "GGS01

  IF sy-subrc IS INITIAL AND ct_j1bnflin[] IS NOT INITIAL.

    SELECT docnum itmnum taxval
      FROM j_1bnfstx
      INTO TABLE ct_j1bnfstx
       FOR ALL ENTRIES IN ct_j1bnflin
     WHERE docnum = ct_j1bnflin-docnum
       AND itmnum = ct_j1bnflin-itmnum
       AND taxtyp = 'ICS3'.

  ENDIF.

  LOOP AT ct_vbap REFERENCE INTO DATA(wlr_vbap).

    READ TABLE ct_vbak REFERENCE INTO DATA(wlr_vbak) WITH KEY vbeln = wlr_vbap->vbeln.

    wl_konv_ov_key-knumv = wlr_vbak->knumv.
    wl_konv_ov_key-posnr = wlr_vbap->posnr.
    APPEND wl_konv_ov_key TO tl_konv_ov_key.

  ENDLOOP.

  SORT tl_konv_ov_key.
  DELETE ADJACENT DUPLICATES FROM tl_konv_ov_key.

  IF NOT tl_konv_ov_key[] IS INITIAL. "GGS01
    SELECT DISTINCT knumv kposn kschl
           kbetr "GA01
           kwert "AA01
      FROM konv
      INTO TABLE ct_konv_ov
      FOR ALL ENTRIES IN tl_konv_ov_key
      WHERE knumv EQ tl_konv_ov_key-knumv
        AND kposn EQ tl_konv_ov_key-posnr
**        AND kschl IN ('ICMI','ZNET').
*        AND kschl IN ('ICMI','ZNET','ZVP2','ZVP4', 'ZTNF'). "NM01 "MF04
**Inicio - TIROL - SOLMAN 7000000868
*        AND kschl IN ('ICMI','ZNET','ZVP2','ZVP4', 'ZTNF', 'ZNCR','ZPRT','ZP00').
**Fim - TIROL - SOLMAN 7000000868
**Inicio - Lamartine Cavalcante LC - Homine - LC001
        AND kschl IN ('ICMI','ZNET','ZVP2','ZVP4', 'ZTNF', 'ZNCR','ZPRT','ZP00','ZICM','ZPIS','ZCOF','ZCRE','ZCRA','ZFRE','ZFRU','ZCRO','ZNT2','ZNT3').
**Fim - Lamartine Cavalcante LC - Homine - LC001
  ENDIF. "GGS01


  LOOP AT ct_vbrp REFERENCE INTO DATA(wlr_vbrp).

    READ TABLE ct_vbrk REFERENCE INTO DATA(wlr_vbrk) WITH KEY vbeln = wlr_vbrp->vbeln.

    wl_konv_fat_key-knumv = wlr_vbrk->knumv.
    wl_konv_fat_key-posnr = wlr_vbrp->posnr.
    APPEND wl_konv_fat_key TO tl_konv_fat_key.

  ENDLOOP.

  SORT tl_konv_fat_key.
  DELETE ADJACENT DUPLICATES FROM tl_konv_fat_key.


  IF NOT tl_konv_fat_key[] IS INITIAL. "GGS01
    SELECT DISTINCT knumv kposn kschl
           kbetr "GA01
           kwert "AA01
      FROM konv
      INTO TABLE ct_konv_fatura
      FOR ALL ENTRIES IN tl_konv_fat_key
      WHERE knumv EQ tl_konv_fat_key-knumv
        AND kposn EQ tl_konv_fat_key-posnr
        AND kschl EQ 'ICMI'.
  ENDIF. "GGS01

* Buscar status global
  IF NOT ct_vbak[] IS INITIAL. "GGS01
    SELECT vbeln cmgst
      FROM vbuk
      INTO TABLE ct_vbuk
      FOR ALL ENTRIES IN ct_vbak
      WHERE vbeln EQ ct_vbak-vbeln.
*      AND cmgst IN (' ','A','D').
  ENDIF. "GGS01

* AA01 - 15.06.2017 - Fim


  "Obtém os Dados Comerciais a partir dos itens obtidos
  IF NOT ct_vbak[] IS INITIAL. "GGS01
    SELECT vbeln posnr kdgrp bzirk inco1 inco2 valtg zterm kursk
***SOLMAN 7000001835 - Inicio - 26.01.2021
          bstkd
***SOLMAN 7000001835 - Fim   - 26.01.2021
           bstdk           "MS01
           bstkd_e ihrez_e "AA01
           vsart
      FROM vbkd
      INTO TABLE ct_vbkd
      FOR ALL ENTRIES IN ct_vbak
      WHERE vbeln = ct_vbak-vbeln.
*        AND posnr = 0.
  ENDIF. "GGS01

  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  "Seleciona a descrição das condições de pagamento
  IF NOT ct_vbkd IS INITIAL.
    SELECT zterm vtext
      INTO TABLE ct_tvzbt
      FROM tvzbt
      FOR ALL ENTRIES IN ct_vbkd
      WHERE zterm = ct_vbkd-zterm
        AND spras = sy-langu.
  ENDIF.

  "Seleciona a descrição das tipo de expedição
  IF NOT ct_vbkd IS INITIAL.
    SELECT vsart bezei
      INTO TABLE ct_t173t
      FROM t173t
      FOR ALL ENTRIES IN ct_vbkd
      WHERE vsart = ct_vbkd-vsart
        AND spras = sy-langu.
  ENDIF.

  LOOP AT ct_vbak INTO wl_vbak.
    "Monta tabela de chaves para posterior acesso à TVGRT
    CLEAR wl_tvgrt_key.
    wl_tvgrt_key-vkgrp = wl_vbak-vkgrp.
    COLLECT wl_tvgrt_key INTO tl_tvgrt_key.

    "Monta tabela de chaves para posterior acesso à TVKBT
    CLEAR wl_tvkbt_key.
    wl_tvkbt_key-vkbur = wl_vbak-vkbur.
    COLLECT wl_tvkbt_key INTO tl_tvkbt_key.

    "Monta tabela de chaves para posterior acesso à KNA1
    CLEAR wl_kna1_key.
    wl_kna1_key-kunnr = wl_vbak-kunnr.
    COLLECT wl_kna1_key INTO tl_kna1_key.

    "Monta tabela de chaves para posterior acesso à KNVH
    CLEAR wl_knvh_key.
    wl_knvh_key-kunnr = wl_vbak-kunnr.
    wl_knvh_key-vkorg = wl_vbak-vkorg.
    wl_knvh_key-vtweg = wl_vbak-vtweg.
    wl_knvh_key-spart = wl_vbak-spart.
    COLLECT wl_knvh_key INTO tl_knvh_key.

    "Monta tabela de chaves para posterior acesso à JEST
    CLEAR wl_jest_key.
    wl_jest_key-objnr = wl_vbak-objnr.
    COLLECT wl_jest_key INTO tl_jest_key.
  ENDLOOP.

  IF tl_knvh_key IS NOT INITIAL.
    SELECT hityp kunnr vkorg vtweg spart datab hkunnr
      FROM knvh
      INTO TABLE ct_knvh
      FOR ALL ENTRIES IN tl_knvh_key
      WHERE hityp = 'A'
        AND kunnr = tl_knvh_key-kunnr
        AND vkorg = tl_knvh_key-vkorg
        AND vtweg = tl_knvh_key-vtweg
        AND spart = tl_knvh_key-spart.

    IF sy-subrc IS INITIAL.
      LOOP AT ct_knvh INTO wl_knvh.
        CLEAR wl_kna1_key.
        wl_kna1_key-kunnr = wl_knvh-hkunnr.
        COLLECT wl_kna1_key INTO tl_kna1_key.
      ENDLOOP.
    ENDIF.
  ENDIF.

  "A rotina abaixo montará a tabela de chaves para acesso à MAKT e T023T.
  LOOP AT ct_vbap INTO wl_vbap.
    CLEAR wl_makt_key.
    wl_makt_key-matnr = wl_vbap-matnr.
    COLLECT wl_makt_key INTO tl_makt_key.

    CLEAR wl_t023t_key.
    wl_t023t_key-matkl = wl_vbap-matkl.
    COLLECT wl_t023t_key INTO tl_t023t_key.

    READ TABLE ct_vbak INTO wl_vbak
      WITH TABLE KEY vbeln = wl_vbap-vbeln.

    CLEAR wl_tvagt_key.
    wl_tvagt_key-abgru = wl_vbap-abgru.
    COLLECT wl_tvagt_key INTO tl_tvagt_key.

    CLEAR wl_tvro_key.
    wl_tvro_key-route = wl_vbap-route.
    COLLECT wl_tvro_key INTO tl_tvro_key.
  ENDLOOP.

  IF tl_tvgrt_key[] IS NOT INITIAL.
    "Obtém os textos das Equipes de Vendas
    SELECT vkgrp bezei
      FROM tvgrt
      INTO TABLE ct_tvgrt
      FOR ALL ENTRIES IN tl_tvgrt_key
      WHERE spras = sy-langu
        AND vkgrp = tl_tvgrt_key-vkgrp.
  ENDIF.

  IF tl_tvkbt_key[] IS NOT INITIAL.
    "Obtém os textos dos Escritórios de Vendas
    SELECT vkbur bezei
      FROM tvkbt
      INTO TABLE ct_tvkbt
      FOR ALL ENTRIES IN tl_tvkbt_key
      WHERE spras = sy-langu
        AND vkbur = tl_tvkbt_key-vkbur.
  ENDIF.

  IF tl_kna1_key[] IS NOT INITIAL.
    "Obtém as descrições dos clientes
    SELECT kunnr name1 ort01 regio
           adrnr "AA01
      FROM kna1
      INTO TABLE ct_kna1
      FOR ALL ENTRIES IN tl_kna1_key
      WHERE kunnr = tl_kna1_key-kunnr.
  ENDIF.

* Buscar endereço do Emissor
  IF NOT ct_kna1[] IS INITIAL. "GGS01
    SELECT addrnumber name1 city1 city2 post_code1 street house_num1 region tel_number
      FROM adrc
      INTO TABLE ct_adrc_emissor
       FOR ALL ENTRIES IN ct_kna1
     WHERE addrnumber EQ ct_kna1-adrnr.
  ENDIF. "GGS01

  IF tl_makt_key[] IS NOT INITIAL.
    "Obtém as descrições dos materiais
    SELECT matnr maktx
      FROM makt
      INTO TABLE ct_makt
      FOR ALL ENTRIES IN tl_makt_key
      WHERE matnr = tl_makt_key-matnr
        AND spras = sy-langu.
  ENDIF.

  IF tl_t023t_key[] IS NOT INITIAL.
    "Obtém as descrições dos grupos de mercadoria
    SELECT matkl wgbez
      FROM t023t
      INTO TABLE ct_t023t
      FOR ALL ENTRIES IN tl_t023t_key
      WHERE matkl = tl_t023t_key-matkl
        AND spras = sy-langu.
  ENDIF.

  IF tl_tvagt_key IS NOT INITIAL.
    SELECT spras abgru bezei
      FROM tvagt
      INTO TABLE ct_tvagt
      FOR ALL ENTRIES IN tl_tvagt_key
      WHERE spras = sy-langu
        AND abgru = tl_tvagt_key-abgru.
  ENDIF.

  IF tl_tvro_key IS NOT INITIAL.
    SELECT route traztd
      FROM tvro
      INTO TABLE ct_tvro
      FOR ALL ENTRIES IN tl_tvro_key
      WHERE route = tl_tvro_key-route.
  ENDIF.

  "Hierarquia de produtos
  SELECT prodh vtext
    FROM t179t
    INTO TABLE ct_t179t
    WHERE spras = sy-langu.

  busca_param_stat lib1.
  busca_param_stat lib2.
*  busca_param_stat lib3.
  busca_param_stat blk1.
  busca_param_stat blk2.
*  busca_param_stat blk3.
*  busca_param_stat blk4.
*  busca_param_stat blk5.
*  busca_param_stat blk6.
*  busca_param_stat blk7.
*  busca_param_stat blk8.

  IF tl_jest_key IS NOT INITIAL.
    SELECT objnr stat inact
      FROM jest
      INTO TABLE ct_jest
      FOR ALL ENTRIES IN tl_jest_key
      WHERE objnr = tl_jest_key-objnr.
*        AND stat IN rl_stat. "AA01

    SELECT stsma estat
      FROM tj30
      INTO TABLE ct_tj30
      FOR ALL ENTRIES IN ct_jest
    WHERE stsma EQ 'ZSD00000'
      AND estat EQ ct_jest-stat.

    IF sy-subrc IS INITIAL.
      LOOP AT ct_vbak INTO wl_vbak.
        CLEAR wl_status.
        wl_status-vbeln = wl_vbak-vbeln.
        wl_status-lib1  = abap_true.
        wl_status-lib2  = abap_true.
*        wl_status-lib3  = abap_true.
        wl_status-blk1  = abap_true.
        wl_status-blk2  = abap_true.
*        wl_status-blk3  = abap_true.
*        wl_status-blk4  = abap_true.
*        wl_status-blk5  = abap_true.
*        wl_status-blk6  = abap_true.
*        wl_status-blk7  = abap_true.
*        wl_status-blk8  = abap_true.

        LOOP AT ct_jest INTO wl_jest
          WHERE objnr = wl_vbak-objnr.

          CASE wl_jest-stat.
            WHEN wl_stat-lib1.
              wl_status-lib1 = wl_jest-inact.
            WHEN wl_stat-lib2.
              wl_status-lib2 = wl_jest-inact.
*            WHEN wl_stat-lib3.
*              wl_status-lib3 = wl_jest-inact.
            WHEN wl_stat-blk1.
              wl_status-blk1 = wl_jest-inact.
            WHEN wl_stat-blk2.
              wl_status-blk2 = wl_jest-inact.
*            WHEN wl_stat-blk3.
*              wl_status-blk3 = wl_jest-inact.
*            WHEN wl_stat-blk4.
*              wl_status-blk4 = wl_jest-inact.
*            WHEN wl_stat-blk5.
*              wl_status-blk5 = wl_jest-inact.
*            WHEN wl_stat-blk6.
*              wl_status-blk6 = wl_jest-inact.
*            WHEN wl_stat-blk7.
*              wl_status-blk7 = wl_jest-inact.
*            WHEN wl_stat-blk8.
*              wl_status-blk8 = wl_jest-inact.
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        INSERT wl_status INTO TABLE ct_status.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS
*&---------------------------------------------------------------------*
*&      Form  PROCESSA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM processa_dados USING it_vbap         TYPE tp_t_vbap
                          it_vbak         TYPE tp_t_vbak
                          it_tvgrt        TYPE tp_t_tvgrt
                          it_tvkbt        TYPE tp_t_tvkbt
                          it_kna1         TYPE tp_t_kna1
                          it_vbpa         TYPE tp_t_vbpa
                          it_lfa1         TYPE tp_t_lfa1
                          it_makt         TYPE tp_t_makt
                          it_t023t        TYPE tp_t_t023t
                          it_knvh         TYPE tp_t_knvh
                          it_vbkd         TYPE tp_t_vbkd
                          it_tvzbt        TYPE tp_t_tvzbt
                          it_t173t        TYPE tp_t_t173t
                          it_vbep         TYPE tp_t_vbep
*                          it_vbep_sm      TYPE tp_t_vbep_sm
                          it_vbfa         TYPE tp_t_vbfa
                          it_tvro         TYPE tp_t_tvro
                          it_tvagt        TYPE tp_t_tvagt
                          it_jest         TYPE tp_t_jest
                          it_t179t        TYPE tp_t_t179t
                          it_t151t        TYPE tp_t_t151t
                          it_status       TYPE tp_t_status
                          it_vbup         TYPE tp_t_vbup
                          it_j1bnflin     TYPE tp_t_j1bnflin
                          it_j1bnfdoc     TYPE tp_t_j1bnfdoc
                          it_j1bnfstx     TYPE tp_t_j1bnfstx
                          it_konv_ov      TYPE tp_t_konv         "AA01
                          it_konv_fatura  TYPE tp_t_konv         "AA01
                          it_adrc_emissor TYPE tp_t_adrc_emissor "AA01
                          it_vbrk         TYPE tp_t_vbrk         "AA01
                          it_vbrp         TYPE tp_t_vbrp         "AA01
                          it_vbuk         TYPE tp_t_vbuk         "AA01
                          it_tj30         TYPE tp_t_tj30         "AA01
                 CHANGING ct_alv    TYPE tp_t_alv.

  DATA: wl_vbap               TYPE tp_vbap,
        wl_vbup               TYPE tp_vbup,
        wl_vbap_aux           TYPE tp_vbap,
        wl_vbak               TYPE tp_vbak,
        wl_vbep               TYPE tp_vbep,
        wl_vbkd               TYPE tp_vbkd,
        wl_vbpa               TYPE tp_vbpa,
        wl_tvgrt_key          TYPE tp_tvgrt_key,
        wl_tvgrt              TYPE tp_tvgrt,
        wl_tvkbt_key          TYPE tp_tvkbt_key,
        wl_tvkbt              TYPE tp_tvkbt,
        wl_kna1_key           TYPE tp_kna1_key,
        wl_kna1               TYPE tp_kna1,
        wl_lfa1_key           TYPE tp_lfa1_key,
        wl_lfa1               TYPE tp_lfa1,
        wl_makt_key           TYPE tp_makt_key,
        wl_makt               TYPE tp_makt,
        wl_t023t_key          TYPE tp_t023t_key,
        wl_t023t              TYPE tp_t023t,
        wl_tvagt_key          TYPE tp_tvagt_key,
        wl_tvagt              TYPE tp_tvagt,
        wl_knvh_key           TYPE tp_knvh_key,
        wl_knvh               TYPE tp_knvh,
        wl_jest_key           TYPE tp_jest_key,
        wl_jest               TYPE tp_jest,
        wl_vbfa               TYPE tp_vbfa,
        wl_vbfa_transp        TYPE tp_vbfa, "MF02
        wl_vbfa_dt            TYPE vbfa, "MF02
        wl_tvzbt              TYPE tp_tvzbt,
        wl_t173t              TYPE tp_t173t,
        wl_tvro_key           TYPE tp_tvro_key,
        wl_tvro               TYPE tp_tvro,
        wl_stat               TYPE tp_stat,
        wl_status             TYPE tp_status,
        wl_alv                TYPE tp_alv,
        wl_t179t              TYPE tp_t179t,
        wl_t151t              TYPE tp_t151t,
        wl_konv_ov            TYPE tp_konv,     "GA01
        wl_j1bnflin           TYPE tp_j1bnflin, "GA01
        wl_j1bnfstx           TYPE tp_j1bnfstx, "GA01
        wl_j1bnfdoc           TYPE tp_j1bnfdoc, "GA01
        tl_tj30t              TYPE TABLE OF tp_tj30t,    "TLF01

        vl_quantidade_fatura  TYPE vbfa-rfmng,
        vl_quantidade_estorno TYPE vbfa-rfmng,
        vl_quantidade_sm_sai  TYPE vbfa-rfmng,
        vl_quantidade_sm_est  TYPE vbfa-rfmng,
        vl_quantidade_sm      TYPE vbfa-rfmng,
        vl_quantidade_ent     TYPE vbfa-rfmng,
        vl_primeira_data      TYPE dats,
        vl_soma_qtd_conf_vbep TYPE vbep-bmeng,
        vl_unit_float_point   TYPE zesd_menge_15_point5,

        vl_traztd             TYPE c LENGTH 10,
        vl_dias_c             TYPE c LENGTH 10,
        vl_horas_c            TYPE c LENGTH 10,
        vl_dias               TYPE i,

        vl_domvalue           TYPE dd07v-domvalue_l,
        vl_nivel_1            TYPE string,
        vl_nivel_2            TYPE string,
        vl_nivel_3            TYPE string,
        vl_aprovados          TYPE string,
        vl_sem_aprov          TYPE string,
        vl_remessa            TYPE flag,       "GA01
        vl_fatura             TYPE flag,       "GA01
        vl_rfmng              TYPE vbfa-rfmng, "GA01
        vl_fatura_normal      TYPE vbrk-vbeln, "GA01
        vl_item_normal        TYPE vbfa-posnn, "GA01
        vl_fatura_estornada   TYPE vbrk-vbeln, "GA01
        vl_qtditm             TYPE zesd_qtditm_cart, "AA01
        vl_vltot              TYPE zesd_vltot_cart,  "AA01
        vl_vlr_uni_zncr       TYPE konv-kbetr,
        vl_vlr_uni_zprt       TYPE konv-kbetr,
        vl_vlr_ttl_ov_zncr    TYPE konv-kwert,
        vl_vlr_ttl_ov_zprt    TYPE konv-kwert,
        vl_vlr_zp00           TYPE konv-kwert,
        vl_valor_net          TYPE p DECIMALS 3. "MF03
*Inicio da Alteração - GSW - Chamado 8000001928
  DATA: l_tvarvc  TYPE TABLE OF tvarvc,
        wl_tvarvc TYPE tvarvc.
*Fim da Alteração - GSW - Chamado 8000001928
  DATA: rl_cmgst TYPE tp_r_cmgst,
        rl_stat  TYPE tp_r_stat.

  "GA01
  CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
    EXPORTING
      i_modulo            = c_param-modulo
      i_param1            = c_param-param1
      i_param2            = c_param-desc-param2
      i_param3            = c_param-desc-param3-nivel_1
    IMPORTING
      e_valor             = vl_nivel_1
    EXCEPTIONS
      nao_encontrado      = 1
      range_nao_informado = 2
      OTHERS              = 3.
  IF sy-subrc <> 0.
    CLEAR vl_nivel_1.
  ENDIF.

  CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
    EXPORTING
      i_modulo            = c_param-modulo
      i_param1            = c_param-param1
      i_param2            = c_param-desc-param2
      i_param3            = c_param-desc-param3-nivel_2
    IMPORTING
      e_valor             = vl_nivel_2
    EXCEPTIONS
      nao_encontrado      = 1
      range_nao_informado = 2
      OTHERS              = 3.
  IF sy-subrc <> 0.
    CLEAR vl_nivel_2.
  ENDIF.

  CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
    EXPORTING
      i_modulo            = c_param-modulo
      i_param1            = c_param-param1
      i_param2            = c_param-desc-param2
      i_param3            = c_param-desc-param3-nivel_3
    IMPORTING
      e_valor             = vl_nivel_3
    EXCEPTIONS
      nao_encontrado      = 1
      range_nao_informado = 2
      OTHERS              = 3.
  IF sy-subrc <> 0.
    CLEAR vl_nivel_3.
  ENDIF.

  CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
    EXPORTING
      i_modulo            = c_param-modulo
      i_param1            = c_param-param1
      i_param2            = c_param-desc-param2
      i_param3            = c_param-desc-param3-aprovados
    IMPORTING
      e_valor             = vl_aprovados
    EXCEPTIONS
      nao_encontrado      = 1
      range_nao_informado = 2
      OTHERS              = 3.
  IF sy-subrc <> 0.
    CLEAR vl_aprovados.
  ENDIF.

  CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
    EXPORTING
      i_modulo            = c_param-modulo
      i_param1            = c_param-param1
      i_param2            = c_param-desc-param2
      i_param3            = c_param-desc-param3-sem_aprov
    IMPORTING
      e_valor             = vl_sem_aprov
    EXCEPTIONS
      nao_encontrado      = 1
      range_nao_informado = 2
      OTHERS              = 3.
  IF sy-subrc <> 0.
    CLEAR vl_sem_aprov.
  ENDIF.
* TLF01 - Início
  SELECT stsma estat spras txt04 txt30
  FROM tj30t
  INTO TABLE tl_tj30t "(vl_status_usu,vl_status_usu_desc)
  FOR ALL ENTRIES IN it_tj30
 WHERE stsma EQ it_tj30-stsma
   AND estat EQ it_tj30-estat
   AND spras EQ sy-langu.
  IF sy-subrc IS INITIAL.
    SORT tl_tj30t BY stsma estat spras.
  ENDIF.
* TLF01 - Fim
  LOOP AT it_vbap INTO wl_vbap.


* AA01 - Inicio
    AUTHORITY-CHECK OBJECT 'ZSD_VSTEL'
             ID 'VSTEL' FIELD wl_vbap-vstel.
    IF sy-subrc <> 0.
      vg_authority = abap_true.
      CONTINUE.
    ENDIF.
* AA01 - Fim

**SOLMAN 7000001605 - Inicio - 23.02.2021
    READ TABLE it_vbfa ASSIGNING FIELD-SYMBOL(<f_vbfa>)
     WITH KEY vbelv = wl_vbap-vbeln.

    IF <f_vbfa> IS ASSIGNED.

      READ TABLE it_vbrk ASSIGNING FIELD-SYMBOL(<f_vbrk>)
        WITH KEY vbeln = <f_vbfa>-vbeln
                 fksto = abap_true.

      IF <f_vbrk> IS ASSIGNED.
        UNASSIGN: <f_vbrk>, <f_vbfa>.
        CONTINUE.
      ENDIF.
      UNASSIGN <f_vbfa>.
    ENDIF.
**SOLMAN 7000001605 - Fim - 23.02.2021
*    GA01 - Início - Validações para os status da tela de seleção

*    Em carteira (sem remessa)
*    Somente com remessa
*    Faturados

    CLEAR:
      vl_remessa,
      vl_fatura,
      vl_rfmng.
* TLF01 - Início
*    LOOP AT it_vbfa INTO wl_vbfa WHERE vbelv = wl_vbap-vbeln
*                                   AND posnv = wl_vbap-posnr.
    READ TABLE it_vbfa WITH KEY vbelv = wl_vbap-vbeln
                                posnv = wl_vbap-posnr
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
      LOOP AT it_vbfa INTO wl_vbfa FROM sy-tabix.
        IF  wl_vbfa-vbelv <> wl_vbap-vbeln
        OR  wl_vbfa-posnv <> wl_vbap-posnr.
          EXIT.
        ENDIF.
* TLF01 - Fim
        CASE wl_vbfa-vbtyp_n.
          WHEN 'J' OR 'T'.
            vl_remessa = abap_true.
          WHEN 'M' OR 'O'.
            vl_fatura = abap_true.
            vl_rfmng = vl_rfmng + wl_vbfa-rfmng.
          WHEN 'N'.
            vl_rfmng = vl_rfmng - wl_vbfa-rfmng.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
      ENDLOOP.
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
    "Se tiver remessa não deixa mostrar
*Inicio da Alteração - GSW - Chamado 8000001928
*    IF p_emcart IS NOT INITIAL." AND vl_remessa IS NOT INITIAL.
    IF p_emcart IS NOT INITIAL OR p_carlib IS NOT INITIAL." AND vl_remessa IS NOT INITIAL.
      IF vl_remessa IS NOT INITIAL.
        CONTINUE.
      ENDIF.
      SELECT * FROM tvarvc INTO TABLE l_tvarvc
                    WHERE name = 'ZMER068_ORDEM_EXCLUI'
                    AND   type = 'S'.

      READ TABLE l_tvarvc INTO wl_tvarvc WITH KEY low = wl_vbap-vbeln.
      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.
*Fim da Alteração - GSW - Chamado 8000001928
*   Se tiver fatura e não tiver estornada não deixa mostrar
*    ELSEIF p_emcart IS NOT INITIAL AND ( vl_fatura IS NOT INITIAL AND vl_rfmng > 0 ).
    ELSEIF ( p_emcart IS NOT INITIAL OR p_carlib IS NOT INITIAL ) AND ( vl_fatura IS NOT INITIAL AND vl_rfmng > 0 ).
      CONTINUE.
*Inicio da Alteração - GSW - Chamado 8000001928
      SELECT * FROM tvarvc INTO TABLE l_tvarvc
                    WHERE name = 'ZMER068_ORDEM_EXCLUI'
                    AND   type = 'S'.

      READ TABLE l_tvarvc INTO wl_tvarvc WITH KEY low = wl_vbap-vbeln.
      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.
*Fim da Alteração - GSW - Chamado 8000001928

*   Se não tiver remessa não deixa mostrar
    ELSEIF p_cremes IS NOT INITIAL AND vl_remessa IS INITIAL.
      CONTINUE.

*   Se tiver fatura e não estiver estornada não deixa mostrar
    ELSEIF p_cremes IS NOT INITIAL AND ( vl_fatura IS NOT INITIAL AND vl_rfmng > 0 ).
      CONTINUE.

*   Se não tiver fatura não deixa mostar
    ELSEIF p_fatura IS NOT INITIAL AND vl_fatura IS INITIAL.
      CONTINUE.

*   Se tiver fatura e estiver estornada não deixa mostrar
    ELSEIF p_fatura IS NOT INITIAL AND ( vl_fatura IS NOT INITIAL AND vl_rfmng <= 0 ).
      CONTINUE.
    ENDIF.
*    GA01 - Fim

    CLEAR wl_alv.
    CLEAR wl_vbup.
*    CHECK wl_vbap-abgru IS INITIAL. GA01

    "Obtém os dados de cabeçalho para o item corrente
    READ TABLE it_vbak INTO wl_vbak
      WITH TABLE KEY vbeln = wl_vbap-vbeln.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.
*AK01 - Início
    READ TABLE it_vbup INTO wl_vbup
    WITH TABLE KEY vbeln = wl_vbap-vbeln
                   posnr = wl_vbap-posnr.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.
*AK01 - Fim

*   AA01 - Inicio - Define filtro
    IF p_carlib IS NOT INITIAL.

      IF vl_remessa IS NOT INITIAL.
        CONTINUE.
      ENDIF.

      IF ( vl_fatura IS NOT INITIAL AND vl_rfmng > 0 ).
        CONTINUE.
      ENDIF.

      " Monta range de seleção de status
      rl_cmgst = VALUE tp_r_cmgst( BASE rl_cmgst ( sign = 'I' option = 'EQ' low = ' ' ) ).
      rl_cmgst = VALUE tp_r_cmgst( BASE rl_cmgst ( sign = 'I' option = 'EQ' low = 'A' ) ).
      rl_cmgst = VALUE tp_r_cmgst( BASE rl_cmgst ( sign = 'I' option = 'EQ' low = 'D' ) ).

      rl_stat = VALUE tp_r_stat( BASE rl_stat ( sign = 'I' option = 'EQ' low = 'E0004' ) ).
      rl_stat = VALUE tp_r_stat( BASE rl_stat ( sign = 'I' option = 'EQ' low = 'E0008' ) ).
      rl_stat = VALUE tp_r_stat( BASE rl_stat ( sign = 'I' option = 'EQ' low = 'E0009' ) ).
      rl_stat = VALUE tp_r_stat( BASE rl_stat ( sign = 'I' option = 'EQ' low = 'E0010' ) ).
      rl_stat = VALUE tp_r_stat( BASE rl_stat ( sign = 'I' option = 'EQ' low = 'E0012' ) ).

      READ TABLE it_vbuk REFERENCE INTO DATA(wlr_vbuk) WITH KEY vbeln = wl_vbak-vbeln.
      IF sy-subrc EQ 0.
* TLF01 - Início
*        LOOP AT it_jest REFERENCE INTO DATA(wlr_jest) WHERE objnr EQ wl_vbak-objnr
*                                                        AND stat  IN rl_stat.
        READ TABLE it_jest WITH KEY objnr = wl_vbak-objnr
                           BINARY SEARCH
                           TRANSPORTING NO FIELDS.
        IF sy-subrc IS INITIAL.
          LOOP AT it_jest REFERENCE INTO DATA(wlr_jest) FROM sy-tabix.
            IF wlr_jest->stat NOT IN rl_stat
            OR wlr_jest->objnr <> wl_vbak-objnr.
*              EXIT.
              CONTINUE.
            ENDIF.
* TLF01 - Fim
            IF wlr_jest->inact = ' '.  "Está bloqueado
              DATA(vl_saida) = abap_true.
              EXIT.
            ENDIF.

          ENDLOOP.
* TLF01 - Início
        ENDIF.
* TLF01 - Fim
        IF wlr_vbuk->cmgst NOT IN rl_cmgst.  " space ou A ou D
          vl_saida = abap_true.
        ENDIF.

      ENDIF.

    ENDIF.

    IF vl_saida IS NOT INITIAL.
      CLEAR vl_saida.
      CONTINUE.
    ENDIF.
* TLF01 - Início
*    LOOP AT it_jest REFERENCE INTO wlr_jest WHERE objnr = wl_vbak-objnr.
    READ TABLE it_jest WITH KEY objnr = wl_vbak-objnr
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.

      LOOP AT it_jest REFERENCE INTO wlr_jest FROM sy-tabix.
        IF wlr_jest->objnr <> wl_vbak-objnr.
          EXIT.
        ENDIF.
* TLF01 - Fim
        IF wlr_jest->inact EQ ' '.

          READ TABLE it_tj30 REFERENCE INTO DATA(wlr_tj30) WITH KEY estat = wlr_jest->stat.

          IF sy-subrc EQ 0.

            DATA: vl_status_usu      TYPE j_txt04,
                  vl_status_usu_desc TYPE j_txt30.

            CLEAR: vl_status_usu,
                   vl_status_usu_desc.
* TLF01 - Início
*            SELECT SINGLE txt04 txt30
*              FROM tj30t
*              INTO (vl_status_usu,vl_status_usu_desc)
*             WHERE stsma EQ wlr_tj30->stsma
*               AND estat EQ wlr_tj30->estat
*               AND spras EQ sy-langu.
*
*            wl_alv-status_usu      = wl_alv-status_usu      && '/' && vl_status_usu.
*            wl_alv-status_usu_desc = wl_alv-status_usu_desc && '/' && vl_status_usu_desc.
            READ TABLE tl_tj30t REFERENCE INTO DATA(wlr_tj30t)
                                WITH KEY stsma = wlr_tj30->stsma
                                         estat = wlr_tj30->estat
                                         spras = sy-langu
                                BINARY SEARCH.
            IF sy-subrc IS INITIAL.
              wl_alv-status_usu      = wl_alv-status_usu      && '/' && wlr_tj30t->txt04.
              wl_alv-status_usu_desc = wl_alv-status_usu_desc && '/' && wlr_tj30t->txt30.
            ENDIF.


* TLF01 - Fim
          ENDIF.

        ENDIF.

      ENDLOOP.
*   AA01 - Fim
* TLF01 - Início
    ENDIF.
* TLF01 - Fim


    wl_alv-vbeln = wl_vbak-vbeln.
    wl_alv-posnr = wl_vbap-posnr.
    wl_alv-erdat = wl_vbak-erdat.
    wl_alv-erzet = wl_vbak-erzet.
    wl_alv-ernam = wl_vbak-ernam.
*    wl_alv-vbtyp = wl_vbak-vbtyp.  "AA01
    wl_alv-auart = wl_vbak-auart.
    wl_alv-lifsk = wl_vbak-lifsk.
    wl_alv-vtext = wl_vbak-vtext.
    wl_alv-faksk = wl_vbak-faksk.
    wl_alv-vkorg = wl_vbak-vkorg.
    wl_alv-vtweg = wl_vbak-vtweg.
    wl_alv-tvtext = wl_vbak-tvtext.
    wl_alv-spart = wl_vbak-spart.
    wl_alv-vkgrp = wl_vbak-vkgrp.
*    wl_alv-aufnr = wl_vbak-aufnr.   "AA01
    wl_alv-vdatu = wl_vbak-vdatu.
* AK01 - Início
    wl_alv-lfsta = wl_vbup-lfsta.
    wl_alv-absta = wl_vbup-absta.
    wl_alv-xblnr = wl_vbak-xblnr.
    wl_alv-augru = wl_vbak-augru.
    wl_alv-desc_augru = wl_vbak-bezei.
* AK01 - Fim
    wl_alv-zzcarga = wl_vbak-zzcarga. "ES02
    wl_alv-vsbed   = wl_vbak-vbsed. "OR01

***Coopersap 23/02/2024
**Corrigir informação do centro fornecedor transferência
*Início
    CLEAR gv_kvgr2.
*Fim

***** Inicio Anorce  4167
    SELECT SINGLE bezei
            INTO gv_kvgr2
            FROM tvv2t
            WHERE kvgr2 EQ wl_vbak-kvgr2.

    wl_alv-kvgr2 = gv_kvgr2.  "ANORCE
    "wl_alv-kvgr2 = wl_vbak-kvgr2.   " ANORCE
******  Final ANorce 4167



    "Obtém a descrição da equipe de vendas
    READ TABLE it_tvgrt INTO wl_tvgrt
      WITH TABLE KEY vkgrp = wl_vbak-vkgrp.
    IF sy-subrc = 0.
      wl_alv-bezei_vkgrp = wl_tvgrt-bezei.
    ENDIF.

    wl_alv-vkbur = wl_vbak-vkbur.

    "Obtém a descrição do escritório de vendas
    READ TABLE it_tvkbt INTO wl_tvkbt
      WITH TABLE KEY vkbur = wl_vbak-vkbur.
    IF sy-subrc = 0.
      wl_alv-bezei_vkbur = wl_tvkbt-bezei.
    ENDIF.

*    wl_alv-autlf = wl_vbak-autlf.   "AA01
*    wl_alv-bstnk = wl_vbak-bstnk.   "AA01
*    wl_alv-bstdk = wl_vbak-bstdk.   "AA01
    wl_alv-kunnr = wl_vbak-kunnr.

    "Obtém o Nome do Cliente a partir do código
    READ TABLE it_kna1 INTO wl_kna1
      WITH TABLE KEY kunnr = wl_vbak-kunnr.
    IF sy-subrc = 0.
      wl_alv-name1 = wl_kna1-name1.
      wl_alv-ort01 = wl_kna1-ort01.
      wl_alv-regio = wl_kna1-regio.
    ENDIF.

    "Obtém o Código da Transportadora a partir do código
    READ TABLE it_vbpa INTO wl_vbpa
      WITH TABLE KEY vbeln = wl_vbap-vbeln
                     parvw = c_parvw-agente_frete.
    IF sy-subrc = 0.
      wl_alv-lifnr = wl_vbpa-lifnr.
      "Obtém o Nome da Transportadora a partir do código
      READ TABLE it_lfa1 INTO wl_lfa1
        WITH TABLE KEY lifnr = wl_vbpa-lifnr.
      IF sy-subrc = 0.
        wl_alv-name1_lifnr = wl_lfa1-name1.
      ENDIF.
    ENDIF.

    "Obtém o Código da Transportadora redespacho a partir do código
    READ TABLE it_vbpa INTO wl_vbpa
      WITH TABLE KEY vbeln = wl_vbap-vbeln
                     parvw = c_parvw-redespacho.
    IF sy-subrc = 0.
      wl_alv-lifnr_r = wl_vbpa-lifnr.
      READ TABLE it_lfa1 INTO wl_lfa1
        WITH TABLE KEY lifnr = wl_vbpa-lifnr.
      IF sy-subrc = 0.
        wl_alv-name1_lifnr_r = wl_lfa1-name1.
      ENDIF.
    ENDIF.

* VC01 - Inicio - Transportador de Insumos e descrição
    "Obtém o Código da Transportadora a partir do código
    READ TABLE it_vbpa INTO wl_vbpa
      WITH TABLE KEY vbeln = wl_vbap-vbeln
                     parvw = c_parvw-transp_insumos.
    IF sy-subrc = 0.
      wl_alv-transp_insumos = wl_vbpa-lifnr.
      "Obtém o Nome da Transportadora de Insumos a partir do código
      READ TABLE it_lfa1 INTO wl_lfa1
        WITH TABLE KEY lifnr = wl_vbpa-lifnr.
      IF sy-subrc = 0.
        wl_alv-transp_insumos_descr = wl_lfa1-name1.
      ENDIF.
    ENDIF.
* VC01 - Fim - Transportador de Insumos e descrição

* MF01 - Begin - 02.07.2018
    "Obtém o Representante de Vendas
    READ TABLE it_vbpa INTO wl_vbpa
      WITH TABLE KEY vbeln = wl_vbap-vbeln
                     parvw = c_parvw-repres_venda.
    IF sy-subrc = 0.
      wl_alv-lifnr_2 = wl_vbpa-lifnr.
      READ TABLE it_lfa1 INTO wl_lfa1
        WITH TABLE KEY lifnr = wl_vbpa-lifnr.
      IF sy-subrc = 0.
        wl_alv-name1_lifnr_2 = wl_lfa1-name1.
      ENDIF.
    ENDIF.

    READ TABLE it_vbfa INTO wl_vbfa_transp WITH KEY vbelv   = wl_vbap-vbeln
                                                   vbtyp_n = c_j.

    IF sy-subrc EQ 0.
      SELECT SINGLE * FROM vbfa INTO wl_vbfa_dt WHERE vbelv = wl_vbfa_transp-vbeln
                                                  AND vbtyp_n = c_8.
      IF sy-subrc EQ 0.
        MOVE: wl_vbfa_dt-vbeln TO wl_alv-transporte.
      ENDIF.

    ENDIF.
* MF01 - End - 02.07.2018

    wl_alv-matnr = wl_vbap-matnr.
    wl_alv-brgew = wl_vbap-brgew. " OR01
    wl_alv-charg = wl_vbap-charg.

    "Obtém a Descrição do Material
    READ TABLE it_makt INTO wl_makt
      WITH TABLE KEY matnr = wl_vbap-matnr.
    IF sy-subrc = 0.
      wl_alv-maktx = wl_makt-maktx.
    ENDIF.

    wl_alv-matkl = wl_vbap-matkl.

    "Obtém a Descrição do grupo de mercadoria
    READ TABLE it_t023t INTO wl_t023t
      WITH TABLE KEY matkl = wl_vbap-matkl.
    IF sy-subrc = 0.
      wl_alv-wgbez = wl_t023t-wgbez.
    ENDIF.

    READ TABLE it_knvh INTO wl_knvh
      WITH TABLE KEY kunnr = wl_vbak-kunnr
                     vkorg = wl_vbak-vkorg
                     vtweg = wl_vbak-vtweg
                     spart = wl_vbak-spart.

    IF sy-subrc IS INITIAL.
      "AA01 - Inicio
*      IF wl_knvh-hkunnr IS INITIAL.
**        wl_alv-hkunnr = wl_knvh-kunnr.
*      ELSE.
**        wl_alv-hkunnr = wl_knvh-hkunnr.
*      ENDIF.
*
*      READ TABLE it_kna1 INTO wl_kna1
*        WITH TABLE KEY kunnr = wl_alv-hkunnr.
*
*      IF sy-subrc IS INITIAL.
*        wl_alv-name1_hkunnr = wl_kna1-name1.
*      ENDIF.
      "AA01 - Fim
    ENDIF.

    READ TABLE it_vbpa INTO wl_vbpa
      WITH TABLE KEY vbeln = wl_vbap-vbeln
                     parvw = c_parvw-recebedor_merc.

    IF sy-subrc IS INITIAL.
      READ TABLE it_kna1 INTO wl_kna1
        WITH TABLE KEY kunnr = wl_vbpa-kunnr.

      IF sy-subrc IS INITIAL.
        wl_alv-ort01_kunwe = wl_kna1-ort01.
        wl_alv-regio_kunwe = wl_kna1-regio.
      ENDIF.

      " AA01 - Inicio
      READ TABLE it_adrc_emissor REFERENCE INTO DATA(wlr_adrc_emissor)
        WITH KEY addrnumber = wl_kna1-adrnr.

      IF sy-subrc EQ 0.
        wl_alv-city2_emissor      = wlr_adrc_emissor->city2.
        wl_alv-post_code1_emissor = wlr_adrc_emissor->post_code1.
        wl_alv-street_emissor     = wlr_adrc_emissor->street.
        wl_alv-house_num1_emissor = wlr_adrc_emissor->house_num1.
      ENDIF.
      " AA01 - Fim

    ENDIF.

    wl_alv-pstyv = wl_vbap-pstyv.
    wl_alv-abgru = wl_vbap-abgru.
*    wl_alv-netwr = wl_vbap-netwr.   "AA01
*    wl_alv-waerk = wl_vbap-waerk.   "AA01
*    wl_alv-volum = wl_vbap-volum.   "AA01
*    wl_alv-voleh = wl_vbap-voleh.   "AA01
    wl_alv-lprio = wl_vbap-lprio.
    wl_alv-werks = wl_vbap-werks.
    wl_alv-tname1 = wl_vbap-name1.
    wl_alv-vstel = wl_vbap-vstel.
    wl_alv-lgort = wl_vbap-lgort.
*    wl_alv-mwsbp = wl_vbap-mwsbp.   "AA01
    wl_alv-mvgr1 = wl_vbap-mvgr1.   "AA01

    READ TABLE it_vbkd INTO wl_vbkd
      WITH TABLE KEY vbeln = wl_vbak-vbeln
                     posnr = 0.
    IF sy-subrc = 0.
*      wl_alv-kdgrp = wl_vbkd-kdgrp.   "AA01
*      wl_alv-bzirk = wl_vbkd-bzirk.   "AA01
      wl_alv-inco1 = wl_vbkd-inco1.
      wl_alv-inco2 = wl_vbkd-inco2.
      wl_alv-zterm = wl_vbkd-zterm.
*      wl_alv-kursk = wl_vbkd-kursk.   "AA01
***SOLMAN 7000001835 - Inicio - 26.01.2021
      wl_alv-bstkd   = wl_vbkd-bstkd.
***SOLMAN 7000001835 - Fim   - 26.01.2021
      wl_alv-bstdk   = wl_vbkd-bstdk.   "MS01
      wl_alv-bstkd_e = wl_vbkd-bstkd_e. "AA01
      wl_alv-ihrez_e = wl_vbkd-ihrez_e. "AA01

      READ TABLE it_tvzbt INTO wl_tvzbt
        WITH TABLE KEY zterm = wl_vbkd-zterm.
      IF sy-subrc IS INITIAL.
        wl_alv-vtext_zterm = wl_tvzbt-vtext.
      ENDIF.

      "AA01 - Inicio
*      READ TABLE it_t151t INTO wl_t151t
*        WITH TABLE KEY kdgrp = wl_vbkd-zterm.
*      IF sy-subrc IS INITIAL.
*        wl_alv-kdgrp_ds = wl_t151t-ktext.
*      ENDIF.
      "AA01 - Fim
    ENDIF.


    CLEAR wl_vbkd.
    READ TABLE it_vbkd INTO wl_vbkd
      WITH TABLE KEY vbeln = wl_vbak-vbeln
                     posnr = 0.
    IF sy-subrc = 0.
      wl_alv-vsart = wl_vbkd-vsart.
      READ TABLE it_t173t INTO wl_t173t
        WITH TABLE KEY vsart = wl_vbkd-vsart.
      IF sy-subrc IS INITIAL.
        wl_alv-vtext_bezei = wl_t173t-bezei.
      ENDIF.
    ENDIF.

    IF NOT wl_vbkd-vsart IN s_vsart.
      CONTINUE.
    ENDIF.

*>>> INICIO - MS01
    IF wl_alv-bstdk IS INITIAL.
      "Dt. Solic. Agenda
      CLEAR wl_vbkd.
      READ TABLE it_vbkd INTO wl_vbkd
        WITH TABLE KEY vbeln = wl_vbap-vbeln
                       posnr = wl_vbap-posnr.
      IF sy-subrc = 0.
        wl_alv-bstdk   = wl_vbkd-bstdk.   "MS01
      ENDIF.
    ENDIF.
*<<< FIM    - MS01

    wl_alv-prodh1 = wl_vbap-prodh(2).
    wl_alv-prodh2 = wl_vbap-prodh+2(2).
    wl_alv-prodh3 = wl_vbap-prodh+4(2).
    wl_alv-prodh4 = wl_vbap-prodh+6(4).
    wl_alv-prodh5 = wl_vbap-prodh+10(4).
    wl_alv-prodh6 = wl_vbap-prodh+14(4).

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh(2).
    IF sy-subrc IS INITIAL AND wl_alv-prodh1 IS NOT INITIAL.
      wl_alv-prodh1_ds = wl_t179t-vtext.
    ENDIF.

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh(4).
    IF sy-subrc IS INITIAL AND wl_alv-prodh2 IS NOT INITIAL.
      wl_alv-prodh2_ds = wl_t179t-vtext.
    ENDIF.

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh(6).
    IF sy-subrc IS INITIAL AND wl_alv-prodh3 IS NOT INITIAL.
      wl_alv-prodh3_ds = wl_t179t-vtext.
    ENDIF.

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh(10).
    IF sy-subrc IS INITIAL AND wl_alv-prodh4 IS NOT INITIAL.
      wl_alv-prodh4_ds = wl_t179t-vtext.
    ENDIF.

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh(14).
    IF sy-subrc IS INITIAL AND wl_alv-prodh5 IS NOT INITIAL.
      wl_alv-prodh5_ds = wl_t179t-vtext.
    ENDIF.

    READ TABLE it_t179t INTO wl_t179t WITH TABLE KEY prodh = wl_vbap-prodh.
    IF sy-subrc IS INITIAL AND wl_alv-prodh6 IS NOT INITIAL.
      wl_alv-prodh6_ds = wl_t179t-vtext.
    ENDIF.

    "AA01 - Inicio
    "Obtém status global de crédito
*    wl_alv-cmgst = wl_vbak-cmgst.
    READ TABLE it_vbuk REFERENCE INTO wlr_vbuk WITH KEY vbeln = wl_vbak-vbeln.
    IF sy-subrc EQ 0.

      wl_alv-cmgst = wlr_vbuk->cmgst.

*      vl_domvalue = wl_vbak-cmgst.
      vl_domvalue = wlr_vbuk->cmgst.
      CALL FUNCTION 'DOMAIN_VALUE_GET'
        EXPORTING
          i_domname  = 'CMGST'
          i_domvalue = vl_domvalue
        IMPORTING
          e_ddtext   = wl_alv-statcred
        EXCEPTIONS
          not_exist  = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        CLEAR wl_alv-statcred.
      ENDIF.

    ENDIF.
    "AA01 - Fim

    wl_alv-kwmeng = wl_vbap-kwmeng.
    wl_alv-kbmeng = wl_vbap-kbmeng.
    wl_alv-vrkme  = wl_vbap-vrkme.

    DATA: vl_emenge TYPE ekpo-menge,
          vl_imenge TYPE ekpo-menge.


*** Quantidade em paletes
    IF wl_vbap-meins NE 'PAL'.

      CLEAR: vl_emenge, vl_imenge.

      vl_imenge = wl_vbap-kwmeng.

      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = wl_vbap-matnr
          i_in_me              = wl_vbap-meins
          i_out_me             = 'PAL'
          i_menge              = vl_imenge
        IMPORTING
          e_menge              = vl_emenge
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.

      IF sy-subrc EQ 0.
        wl_alv-zzqtd_palete = vl_emenge.
      ENDIF.
    ELSE.
      wl_alv-zzqtd_palete = wl_vbap-kwmeng.
    ENDIF.



*** Quantidade em caixas
    IF wl_vbap-meins NE 'KI'.

      CLEAR: vl_emenge, vl_imenge.

      vl_imenge = wl_vbap-kwmeng.

      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = wl_vbap-matnr
          i_in_me              = wl_vbap-meins
          i_out_me             = 'KI'
          i_menge              = vl_imenge
        IMPORTING
          e_menge              = vl_emenge
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.

      IF sy-subrc EQ 0.
        wl_alv-zzqtd_caixas = vl_emenge.
      ENDIF.
    ELSE.
      wl_alv-zzqtd_caixas = wl_vbap-kwmeng.
    ENDIF.



*    wl_alv-vltot  = ( wl_alv-netwr + wl_alv-mwsbp ) * wl_alv-kursk.       "AA01
*    wl_alv-qtditm = wl_alv-kwmeng / ( wl_vbap-umzin / wl_vbap-umziz  ).   "AA01
    vl_vltot = ( wl_vbap-netwr + wl_vbap-mwsbp ) * wl_vbkd-kursk.          "AA01
    vl_qtditm = wl_alv-kwmeng / ( wl_vbap-umzin / wl_vbap-umziz  ).        "AA01
*    wl_alv-pesitm = wl_vbap-brgew / 1000.                                 "AA01
    wl_alv-pesitm = wl_vbap-brgew.                                         "AA01
*    wl_alv-qtdcnf = wl_alv-kbmeng / ( wl_vbap-umzin / wl_vbap-umziz  ).   "AA01

    "AA01 - Inicio
*    IF wl_alv-qtditm > 0.
*      wl_alv-vlunit       = wl_alv-vltot / wl_alv-qtditm.
*      vl_unit_float_point = wl_alv-vltot / wl_alv-qtditm.   "ATENÇÃO
*    ENDIF.

    IF vl_qtditm > 0.
      vl_unit_float_point = vl_vltot / vl_qtditm.
    ENDIF.
* Inicio - EME01
** BI01 - Início
    READ TABLE it_vbep INTO wl_vbep
      WITH TABLE KEY vbeln = wl_vbak-vbeln
                     posnr = wl_vbap-posnr.
    IF sy-subrc = 0.
      wl_alv-wadat = wl_vbep-wadat.
*      wl_alv-lifsp = wl_vbep-lifsp.
    ENDIF.
** BI01 - FIm
*
**   --Busca data de saída de mercadoria de acordo com confirmação na OV
*    DATA: vl_tabix TYPE sy-tabix.
*
*    CLEAR: vl_tabix, wl_vbep.
*    READ TABLE it_vbep_sm INTO wl_vbep TRANSPORTING NO FIELDS
*         WITH KEY vbeln = wl_vbap-vbeln
*                  posnr = wl_vbap-posnr.
*    vl_tabix = sy-tabix.
*    LOOP AT it_vbep_sm INTO wl_vbep
*                      WHERE vbeln = wl_vbap-vbeln
*                        AND posnr = wl_vbap-posnr.
*      EXIT.
*    ENDLOOP.
*
*    wl_alv-wadat = wl_vbep-edatu.
** Fim    - EME01
    "AA01 - Fim

    CLEAR: vl_quantidade_fatura,
           vl_quantidade_estorno,
           vl_quantidade_sm_sai,
           vl_quantidade_sm_est,
           vl_quantidade_sm,
           vl_quantidade_ent,
           vl_primeira_data,
           vl_soma_qtd_conf_vbep.

    CLEAR vl_fatura_normal.
* TLF01 - Início
*    LOOP AT it_vbfa INTO wl_vbfa
*      WHERE vbelv = wl_vbak-vbeln
*        AND posnv = wl_vbap-posnr
*        AND ( vbtyp_n = 'M'
*         OR   vbtyp_n = 'O' ).
    READ TABLE it_vbfa WITH KEY vbelv = wl_vbak-vbeln
                                posnv = wl_vbap-posnr
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
      LOOP AT it_vbfa INTO wl_vbfa FROM sy-tabix.
        IF    wl_vbfa-vbelv   <> wl_vbak-vbeln
        OR    wl_vbfa-posnv   <> wl_vbap-posnr
        AND ( wl_vbfa-vbtyp_n <> 'M'
        OR    wl_vbfa-vbtyp_n <> 'O' ).
          EXIT.
        ENDIF.
* TLF01 - Fim
*        AND stufe = '01'.
*Homine - Inicio do desenvolvimento - TKT-8000015755
        IF wl_vbfa-vbtyp_n = 'M' OR
           wl_vbfa-vbtyp_n = 'O'.
*Homine - Fim do desenvolvimento - TKT-8000015755
          vl_quantidade_fatura = vl_quantidade_fatura + wl_vbfa-rfmng.

*     Busca a última fatura
          vl_fatura_normal = wl_vbfa-vbeln. "GA01
          vl_item_normal   = wl_vbfa-posnn. "GA01
*Homine - Inicio do desenvolvimento - TKT-8000015755
        ENDIF.
*Homine - Fim do desenvolvimento - TKT-8000015755
      ENDLOOP.
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
    CLEAR vl_fatura_estornada.
* TLF01 - Início
*    LOOP AT it_vbfa INTO wl_vbfa
*      WHERE vbelv = wl_vbak-vbeln
*        AND posnv = wl_vbap-posnr
*        AND vbtyp_n = 'N'.
    READ TABLE it_vbfa WITH KEY vbelv = wl_vbak-vbeln
                                posnv = wl_vbap-posnr
                                vbtyp_n = 'N'
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
*Homine - Inicio da Alteração - Ticket 8000015836
*      LOOP AT it_vbfa INTO wl_vbfa FROM sy-tabix.
*        IF  wl_vbfa-vbelv   <> wl_vbak-vbeln
*        AND wl_vbfa-posnv   <> wl_vbap-posnr
*        AND wl_vbfa-vbtyp_n <> 'N'.
*          EXIT.
*        ENDIF.
      LOOP AT it_vbfa INTO wl_vbfa.
        IF  wl_vbfa-vbelv  = wl_vbak-vbeln
        AND wl_vbfa-posnv  = wl_vbap-posnr
        AND wl_vbfa-vbtyp_n = 'N'.
*Homine - Fim da Alteração - Ticket 8000015836
* TLF01 - Fim
*        AND stufe = '01'.

          vl_quantidade_estorno = vl_quantidade_estorno + wl_vbfa-rfmng.

*     Busca a última fatura estornada
          vl_fatura_estornada = wl_vbfa-vbeln. "GA01
*Homine - Inicio da Alteração - Ticket 8000015836
        ENDIF.
*Homine - Fim da Alteração - Ticket 8000015836
      ENDLOOP.
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
*   GA01 - Início
*   Verifica se a última fatura é a estornada ou não
*   Se não for a estornada, busca o valor faturado na NF
*   e o número da NF
    IF vl_fatura = abap_true.

      IF vl_quantidade_fatura = vl_quantidade_estorno.
        wl_alv-fatura = vl_fatura_estornada.
*        wl_alv-fat_estornada = abap_true.
      ELSE.
        wl_alv-fatura = vl_fatura_normal.

        READ TABLE it_j1bnflin INTO wl_j1bnflin WITH KEY refkey = vl_fatura_normal
                                                         refitm = vl_item_normal.

        IF sy-subrc IS INITIAL.

          CLEAR wl_j1bnfstx.
          READ TABLE it_j1bnfstx INTO wl_j1bnfstx WITH KEY docnum = wl_j1bnflin-docnum
                                                           itmnum = wl_j1bnflin-itmnum.

*          wl_alv-vlafaturado = ( wl_j1bnflin-netwr - wl_j1bnfstx-taxval ).


          READ TABLE it_j1bnfdoc INTO wl_j1bnfdoc WITH KEY docnum = wl_j1bnflin-docnum.

          IF sy-subrc IS INITIAL.
            wl_alv-nfenum = wl_j1bnfdoc-nfenum. "Número da NF
          ENDIF.

        ENDIF.

      ENDIF.

    ENDIF.
*   GA01 - Fim

    "Determina quantidade faturada
    wl_alv-qtdfat = vl_quantidade_fatura - vl_quantidade_estorno.
**SOLMAN 7000001605 - Inicio - 26.01.2021
    IF wl_vbak-auart EQ 'VEF'.

      READ TABLE it_vbfa INTO wl_vbfa
       WITH KEY vbeln = wl_alv-fatura posnn = wl_alv-posnr.

      IF sy-subrc EQ 0.

        SELECT SINGLE netwr
          FROM vbrp
           INTO @DATA(wl_vlr_fat)
            WHERE vbeln EQ @wl_vbfa-vbeln
              AND posnr EQ @wl_vbfa-posnn.

        wl_alv-vlfatu  = wl_vlr_fat.
        CLEAR wl_vlr_fat.

      ENDIF.
    ELSE.
**SOLMAN 7000001605 - Fim - 26.01.2021
      wl_alv-vlfatu = wl_alv-qtdfat * vl_unit_float_point.
**SOLMAN 7000001605 - Inicio - 26.01.2021
    ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021

    "AA01 - Inicio
*    IF wl_alv-qtdfat >= wl_alv-qtditm.
**      CONTINUE. - "GA01
*    ENDIF.
    "AA01 - Fim

    "Determina quantidade confirmada
*    wl_alv-qtdcnf = wl_alv-qtdcnf - wl_alv-qtdfat.   "AA01
*    wl_alv-vlconf = vl_unit_float_point * wl_alv-qtdcnf.

*    LOOP AT it_vbfa INTO wl_vbfa
*      WHERE vbelv = wl_vbak-vbeln
*        AND posnv = wl_vbap-posnr
*        AND vbtyp_n = 'R'.
**        AND stufe = '01'.
*
*      vl_quantidade_sm_sai = vl_quantidade_sm_sai + wl_vbfa-rfmng.
*
*    ENDLOOP.
*
*    LOOP AT it_vbfa INTO wl_vbfa
*      WHERE vbelv = wl_vbak-vbeln
*        AND posnv = wl_vbap-posnr
*        AND vbtyp_n = 'h'.
**        AND stufe = '01'.
*
*      vl_quantidade_sm_est = vl_quantidade_sm_est + wl_vbfa-rfmng.
*
*    ENDLOOP.

    vl_quantidade_sm = vl_quantidade_sm_sai - vl_quantidade_sm_est.

*    "Determina quantidade a faturar
*    wl_alv-qtdaft = vl_quantidade_sm - wl_alv-qtdfat.
*    wl_alv-vlafat = wl_alv-qtdaft * vl_unit_float_point.

    "Quantidade Entregue = "EM EXPEDIÇÃO"
* TLF01 - Início
*    LOOP AT it_vbfa INTO wl_vbfa
*      WHERE vbelv   = wl_vbak-vbeln
*        AND posnv   = wl_vbap-posnr
*        AND ( vbtyp_n = 'J'
*         OR   vbtyp_n = 'T' ).
    READ TABLE it_vbfa WITH KEY vbelv   = wl_vbak-vbeln
                                posnv   = wl_vbap-posnr
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.

      LOOP AT it_vbfa INTO wl_vbfa FROM sy-tabix.

        IF wl_vbfa-vbelv     <> wl_vbak-vbeln
        OR wl_vbfa-posnv     <> wl_vbap-posnr.
          EXIT.
        ENDIF.
        IF  wl_vbfa-vbtyp_n <> 'J'
        OR  wl_vbfa-vbtyp_n <> 'T'.


* TLF01 - Fim
*        AND stufe   = '00'.
          vl_quantidade_ent = vl_quantidade_ent + wl_vbfa-rfmng.
          wl_alv-remessa = wl_vbfa-vbeln. "AA01
* TLF01 - Início
*      LOOP AT it_vbfa INTO wl_vbfa
*       WHERE vbelv = wl_vbfa-vbeln
*         AND posnv = wl_vbfa-posnn
*         AND ( vbtyp_n = 'M'
*          OR   vbtyp_n = 'O' ).

        ELSEIF wl_vbfa-vbtyp_n = 'M'
            OR wl_vbfa-vbtyp_n = 'O'.
* TLF01 - Fim
          vl_quantidade_fatura = vl_quantidade_fatura + wl_vbfa-rfmng.

* TLF01 - Início
*      ENDLOOP.
*
*      LOOP AT it_vbfa INTO wl_vbfa
*        WHERE vbelv = wl_vbfa-vbeln
*          AND posnv = wl_vbfa-posnn
*          AND vbtyp_n = 'N'.
        ELSEIF wl_vbfa-vbtyp_n = 'N'.
* TLF01 - Fim
          vl_quantidade_estorno = vl_quantidade_estorno + wl_vbfa-rfmng.
* TLF01 - Início
*      ENDLOOP.
*
*      LOOP AT it_vbfa INTO wl_vbfa
*         WHERE vbelv = wl_vbfa-vbeln
*           AND posnv = wl_vbfa-posnn
*          AND vbtyp_n = 'R'.
        ELSEIF wl_vbfa-vbtyp_n = 'R'.
* TLF01 - Fim
*        AND stufe = '01'.

          vl_quantidade_sm_sai = vl_quantidade_sm_sai + wl_vbfa-rfmng.
* TLF01 - Início
*      ENDLOOP.
*
*      LOOP AT it_vbfa INTO wl_vbfa
*         WHERE vbelv = wl_vbfa-vbeln
*           AND posnv = wl_vbfa-posnn
*          AND vbtyp_n = 'h'.
        ELSEIF wl_vbfa-vbtyp_n = 'h'.
* TLF01 - Fim
*        AND stufe = '01'.

          vl_quantidade_sm_est = vl_quantidade_sm_est + wl_vbfa-rfmng.
* TLF01 - Início
*      ENDLOOP.

        ENDIF.
        READ TABLE it_vbrk REFERENCE INTO DATA(wlr_vbrk) WITH KEY vbeln = wl_vbfa-vbeln.
        CHECK sy-subrc EQ 0.
        wl_alv-fkdat = wlr_vbrk->fkdat.
* TLF01 - Fim
      ENDLOOP.
      "AA01 - Inicio

* TLF01 - Início
    ENDIF.
* TLF01 - Fim

*    "Determina quantidade a faturar
*    wl_alv-qtdaft = vl_quantidade_sm - wl_alv-qtdfat.
*    wl_alv-vlafat = wl_alv-qtdaft * vl_unit_float_point.

***    "Determina quantidade faturada                                  "AA01
***    wl_alv-qtdfat = vl_quantidade_fatura - vl_quantidade_estorno.
***    wl_alv-vlfatu = wl_alv-qtdfat * vl_unit_float_point.

    "AA01 - Inicio
*    IF wl_alv-qtdfat >= wl_alv-qtditm.
**      CONTINUE. "GA01
*    ENDIF.
    "AA01 - Fim

*    wl_alv-qtdent = vl_quantidade_ent - vl_quantidade_sm.   "AA01
*    wl_alv-vlentr = wl_alv-qtdent * vl_unit_float_point.    "AA01
* TLF01 - Início
*    LOOP AT it_vbep INTO wl_vbep
*      WHERE vbeln = wl_vbak-vbeln
*        AND posnr = wl_vbap-posnr.
    READ TABLE it_vbep WITH KEY vbeln = wl_vbak-vbeln
                                posnr = wl_vbap-posnr
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
      LOOP AT it_vbep INTO wl_vbep FROM sy-tabix.

        IF wl_vbep-vbeln <> wl_vbak-vbeln
        OR wl_vbep-posnr <> wl_vbap-posnr.
          EXIT.
        ENDIF.
* TLF01 - Fim
        IF wl_vbep-edatu < vl_primeira_data OR vl_primeira_data IS INITIAL.
          vl_primeira_data = wl_vbep-edatu.
        ENDIF.

        vl_soma_qtd_conf_vbep = vl_soma_qtd_conf_vbep + wl_vbep-bmeng.

        IF wl_vbep-bmeng > 0.
          wl_alv-edatu = wl_vbep-edatu.
*        wl_alv-mbdat = wl_vbep-mbdat.   "AA01
        ENDIF.

      ENDLOOP.
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
    "Data Entrega
    IF wl_alv-edatu IS INITIAL.
      wl_alv-edatu = vl_primeira_data.
*      wl_alv-mbdat = vl_primeira_data.   "AA01
    ENDIF.

* BI01 - Início
*    READ TABLE it_tvro INTO wl_tvro
*      WITH TABLE KEY route = wl_vbap-route.
*    IF sy-subrc = 0.
*      CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
*        EXPORTING
*          input  = wl_tvro-traztd
*        IMPORTING
*          output = vl_traztd.
*
*      CONDENSE vl_traztd NO-GAPS.
*      SPLIT vl_traztd AT ',' INTO vl_dias_c vl_horas_c.
*      vl_dias = vl_dias_c.
*      wl_alv-wadat = vl_primeira_data - vl_dias.
*    ELSE.
*      wl_alv-wadat = vl_primeira_data.
*    ENDIF.
* BI01 - Fim

    "Quantidade confirmada vbep
    wl_alv-qtdvbep = vl_soma_qtd_conf_vbep.

    "AA01 - Inicio
    "Determina quantidade pendente
*    wl_alv-qtdpen = wl_alv-qtditm - wl_alv-qtdfat.
*    wl_alv-vlpend = wl_alv-qtdpen * vl_unit_float_point.

*    IF wl_alv-qtdpen IS INITIAL.
**      CLEAR: wl_alv-qtdpen, wl_alv-volum_pend.
*    ELSEIF wl_alv-qtditm IS NOT INITIAL.
*      wl_alv-pespen = wl_alv-pesitm * wl_alv-qtdpen / wl_alv-qtditm.
**      wl_alv-volum_pend = wl_alv-volum * wl_alv-qtdpen / wl_alv-qtditm.
*    ENDIF.

    "Determina quantidade liberada = "A EXPEDIR"
*    wl_alv-qtdlib = wl_alv-qtdcnf - wl_alv-qtdent.


*    IF wl_alv-qtdlib < 0.
*      wl_alv-qtdlib = 0.
*    ENDIF.
*    wl_alv-vllibe = wl_alv-qtdlib * vl_unit_float_point.

*    IF wl_alv-qtdlib IS INITIAL.
**      CLEAR: wl_alv-peslib, wl_alv-volum_lib.  "AA01
*    ELSEIF wl_alv-qtditm IS NOT INITIAL.
*      wl_alv-peslib = wl_alv-pesitm * wl_alv-qtdlib / wl_alv-qtditm.
**      wl_alv-volum_lib = wl_alv-volum * wl_alv-qtdlib / wl_alv-qtditm.   "AA01
*    ENDIF.
    "AA01 - Fim

    "Define status global da ordem de venda
    IF wl_alv-lifsk IS NOT INITIAL OR
       wl_alv-faksk IS NOT INITIAL OR
       wl_alv-abgru IS NOT INITIAL OR
       wl_alv-cmgst = 'B' OR
       wl_alv-cmgst = 'C'.
*      wl_alv-stglobal = 'Bloqueado'(001).
    ELSE.
*      wl_alv-stglobal = 'Liberado'(002).
    ENDIF.

    "Define status de aprovação da ordem de venda

    "Verifica se todos os itens da OV estão com motivo de recusa
    CLEAR wl_alv-stat_aprov.
* TLF01 - Início
*    LOOP AT it_vbap INTO wl_vbap_aux
*      WHERE vbeln = wl_vbap-vbeln.
    READ TABLE it_vbap WITH KEY vbeln = wl_vbap-vbeln
                       BINARY SEARCH
                       TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
*     Chamado 8000000761 - Stefanini - Régis Medeiros - Inicio
*      LOOP AT it_vbap INTO wl_vbap_aux FROM sy-tabix.
*        IF wl_vbap_aux-vbeln <> wl_vbap-vbeln..
*          EXIT.
*        ENDIF.
** TLF01 - Fim
*        IF wl_vbap_aux-abgru IS INITIAL.
*          CLEAR wl_alv-stat_aprov.
*          EXIT.
*        ELSE.
*          IF wl_alv-stat_aprov IS INITIAL.
*            READ TABLE it_tvagt INTO wl_tvagt
*              WITH TABLE KEY abgru = wl_vbap_aux-abgru.
*
*            IF sy-subrc IS INITIAL.
*              wl_alv-stat_aprov = wl_tvagt-bezei.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDLOOP.
      IF wl_alv-abgru IS NOT INITIAL.
        CLEAR wl_tvagt.
        READ TABLE it_tvagt INTO wl_tvagt
          WITH TABLE KEY abgru = wl_alv-abgru.

        IF sy-subrc IS INITIAL.
          wl_alv-stat_aprov = wl_tvagt-bezei.
        ENDIF.
      ELSE.
        CLEAR wl_alv-stat_aprov.
      ENDIF.
*     Chamado 8000000761 - Stefanini - Régis Medeiros - Fim
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
    IF wl_alv-stat_aprov IS INITIAL.
      READ TABLE it_status INTO wl_status
        WITH TABLE KEY vbeln = wl_vbap-vbeln.

      IF sy-subrc IS INITIAL.
        IF ( wl_status-lib1 IS INITIAL AND
           wl_status-lib2 IS INITIAL ) OR
          ( wl_status-lib1 IS INITIAL AND
          wl_status-blk2 IS NOT INITIAL ).
          "Aprovado
          wl_alv-stat_aprov = vl_aprovados.

        ELSEIF wl_status-lib1 IS INITIAL AND
               wl_status-lib2 IS NOT INITIAL.
          "Nível 2
          wl_alv-stat_aprov = vl_nivel_2.

          "Sempre que for nível 1 ou 2 alterar o status global para Bloqueado
*          wl_alv-stglobal = 'Bloqueado'(001).
        ELSEIF wl_status-lib1 IS NOT INITIAL AND
               wl_status-lib2 IS NOT INITIAL. "AND
*               wl_status-lib3 IS NOT INITIAL.
          IF wl_status-blk1 IS INITIAL OR
             wl_status-blk2 IS INITIAL. "OR
*             wl_status-blk3 IS INITIAL OR
*             wl_status-blk4 IS INITIAL OR
*             wl_status-blk5 IS INITIAL OR
*             wl_status-blk6 IS INITIAL OR
*             wl_status-blk7 IS INITIAL OR
*             wl_status-blk8 IS INITIAL.
            "Nível 1
            wl_alv-stat_aprov = vl_nivel_1.

            "Sempre que for nível 1 ou 2 alterar o status global para Bloqueado
*            wl_alv-stglobal = 'Bloqueado'(001).
          ELSE.
            "Sem necessidade
            wl_alv-stat_aprov = vl_sem_aprov.
          ENDIF.
        ENDIF.
      ELSE.
        "Sem necessidade
        wl_alv-stat_aprov = vl_sem_aprov.
      ENDIF.
    ENDIF.

    "Se o status for diferente de aprovado, limpar os campos abaixo
    IF wl_alv-cmgst = 'B'.
      CLEAR: "wl_alv-mbdat,    "AA01
             wl_alv-wadat,
             wl_alv-edatu.
    ENDIF.

**   GA01 - Início
*    READ TABLE it_konv INTO wl_konv WITH KEY knumv = wl_vbak-knumv
*                                             kposn = wl_vbap-posnr.
*
*    IF sy-subrc IS INITIAL.
*      wl_alv-vltotov = wl_konv-kwert.
*    ENDIF.

*** AA01 - Inicio
* TLF01 - Início
*    LOOP AT it_konv_ov INTO wl_konv_ov WHERE knumv = wl_vbak-knumv
*                                         AND kposn = wl_vbap-posnr.
    READ TABLE it_konv_ov WITH KEY knumv = wl_vbak-knumv
                                   kposn = wl_vbap-posnr
                          BINARY SEARCH
                          TRANSPORTING NO FIELDS.
    IF sy-subrc IS INITIAL.
      LOOP AT it_konv_ov INTO wl_konv_ov FROM sy-tabix.
        IF wl_konv_ov-knumv <> wl_vbak-knumv
        OR wl_konv_ov-kposn <> wl_vbap-posnr.
          EXIT.
        ENDIF.
* TLF01 - Fim
        CASE wl_konv_ov-kschl.
          WHEN 'ICMI'.
*          wl_alv-vltotov = wl_konv_ov-kbetr.
            wl_alv-vltotov = wl_konv_ov-kwert.
            wl_alv-ztnf =    wl_konv_ov-kbetr. "Homine 07.04.2021
* MF03 - Begin (Comentar comando ZNET).
*          WHEN 'ZNET'.
**          wl_alv-vltotnet = wl_konv_ov-kbetr.
*            wl_alv-vltotnet = wl_konv_ov-kwert.
* MF03 - End
          WHEN 'ZVP2'.                               "NM01
            wl_alv-zvp2 =    wl_konv_ov-kbetr / 10.  "NM01
          WHEN 'ZVP4'.                               "NM01
            wl_alv-zvp4 =    wl_konv_ov-kbetr / 10.  "NM01
** Inicio Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
*          WHEN 'ZNT2'.
*            wl_alv-valor_net =    wl_konv_ov-kbetr.
*          WHEN 'ZNT3'.
*            wl_alv-valor_net =    wl_konv_ov-kbetr.
** Fim Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
* MF04 - Begin
*          WHEN 'ZTNF'.                         "Homine 07.04.2021
*            wl_alv-ztnf =    wl_konv_ov-kbetr. "Homine 07.04.2021
* MF04 - End
* LC001 - Begin
          WHEN 'ZICM'.                               "LC001
            wl_alv-zicm =    wl_konv_ov-kbetr / 10.  "LC001
          WHEN 'ZPIS'.                               "LC001
            wl_alv-zpis =    wl_konv_ov-kbetr / 10.  "LC001
          WHEN 'ZCOF'.                               "LC001
            wl_alv-zcof =    wl_konv_ov-kbetr / 10.  "LC001
          WHEN 'ZCRE'.                               "LC001
            wl_alv-zcre =    wl_konv_ov-kbetr / 10.  "LC001
          WHEN 'ZCRA'.                               "LC001
            wl_alv-zcra =    wl_konv_ov-kbetr / 10.  "LC001
          WHEN 'ZFRE'.                               "LC001
            wl_alv-zfre =    wl_konv_ov-kbetr.       "LC001
          WHEN 'ZFRU'.                               "LC001
            wl_alv-zfru =    wl_konv_ov-kbetr.       "LC001
          WHEN 'ZCRO'.                               "LC001
            wl_alv-zcro =    wl_konv_ov-kbetr.       "LC001
* LC001 - End
* **Inicio - TIROL - SOLMAN 7000000868
          WHEN 'ZNCR'.
            IF wl_vbak-auart EQ 'YCO' OR wl_vbak-auart EQ 'VEF'.

              IF wl_konv_ov-kbetr IS NOT INITIAL.
                vl_vlr_uni_zncr =  wl_konv_ov-kbetr.
              ENDIF.

              IF wl_konv_ov-kwert  IS NOT INITIAL.
                vl_vlr_ttl_ov_zncr = wl_konv_ov-kwert.
              ENDIF.
            ENDIF.
          WHEN 'ZPRT'.
            IF wl_vbak-auart EQ 'YCO' OR wl_vbak-auart EQ 'VEF'..

              IF  wl_konv_ov-kbetr IS NOT INITIAL.
                vl_vlr_uni_zprt =  wl_konv_ov-kbetr.
              ENDIF.

              IF  wl_konv_ov-kwert IS NOT INITIAL.
                vl_vlr_ttl_ov_zprt = wl_konv_ov-kwert.
              ENDIF.
            ENDIF.
          WHEN 'ZP00'.
            vl_vlr_zp00 = wl_konv_ov-kbetr.
* **Fim - TIROL - SOLMAN 7000000868
        ENDCASE.
      ENDLOOP.
** Inicio Alteração - Lamartine Cavalcante LC- Homine - 22/03/21 **
      wl_alv-valor_net = wl_alv-ztnf.
      vg_ztnf = wl_alv-ztnf.
      vg_ztnf = ( vg_ztnf * ( wl_alv-zvp2 + wl_alv-zvp4 ) ) / 100 .
      wl_alv-valor_net = wl_alv-valor_net - vg_ztnf.
      wl_alv-vltotnet = wl_alv-valor_net * wl_alv-kwmeng.
** Fim Alteração - Lamartine Cavalcante LC- Homine - 22/03/21 **
* **Inicio - TIROL - SOLMAN 7000000868
      IF wl_vbak-auart EQ 'YCO' OR wl_vbak-auart EQ 'VEF'.

        IF vg_incl_zncr_zprt IS INITIAL.
          vg_incl_zncr_zprt = abap_true.
        ENDIF.

        IF vl_vlr_uni_zncr IS NOT INITIAL.
          wl_alv-vlr_uni = vl_vlr_uni_zncr.
        ELSEIF vl_vlr_uni_zprt IS NOT INITIAL.
          wl_alv-vlr_uni = vl_vlr_uni_zprt.
        ENDIF.

        IF vl_vlr_ttl_ov_zncr IS NOT INITIAL.
          wl_alv-vlr_ttl_ov = vl_vlr_ttl_ov_zncr.
        ELSEIF vl_vlr_ttl_ov_zprt IS NOT INITIAL.
          wl_alv-vlr_ttl_ov = vl_vlr_ttl_ov_zprt.
        ENDIF.

        CLEAR: vl_vlr_uni_zncr,
               vl_vlr_uni_zprt,
               vl_vlr_ttl_ov_zncr,
               vl_vlr_ttl_ov_zprt.
      ENDIF.
* **Fim - TIROL - SOLMAN 7000000868
* TLF01 - Início
    ENDIF.
* TLF01 - Fim
    READ TABLE it_vbrk REFERENCE INTO wlr_vbrk WITH KEY vbeln = wl_vbap-vbeln.

    IF sy-subrc EQ 0.

      READ TABLE it_vbrp REFERENCE INTO DATA(wlr_vbrp) WITH KEY vbeln = wlr_vbrk->vbeln
                                                                posnr = wl_vbap-posnr.

      IF sy-subrc EQ 0.

        READ TABLE it_konv_fatura REFERENCE INTO DATA(wlr_konv_fatura) WITH KEY knumv = wlr_vbrk->vbeln
                                                                                kposn = wlr_vbrp->posnr.
        IF sy-subrc EQ 0.

*          wl_alv-vlfatu = wlr_konv_fatura->kbetr.
          wl_alv-vlfatu = wlr_konv_fatura->kwert.

        ENDIF.

      ENDIF.
    ENDIF.
*** AA01 - Fim

** Início Alteração - Naiany Mélo - ITSGroup - 19.11.2018 **
    IF wl_alv-kwmeng > 0.                                                 "NM01
      wl_alv-vlunit    = wl_alv-vltotov / wl_alv-kwmeng.                  "NM01
* MF03 - Begin
** Inicio Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
      IF wl_alv-valor_net IS INITIAL.
** Fim Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
        IF wl_alv-zvp2 IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zvp2.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
        ELSEIF wl_alv-zvp4 IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zvp4.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
* LC001 - Begin
        ELSEIF wl_alv-zicm IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zicm.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
        ELSEIF wl_alv-zpis IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zpis.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
        ELSEIF wl_alv-zcof IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zcof.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
        ELSEIF wl_alv-zcre IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zcre.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
        ELSEIF wl_alv-zcra IS NOT INITIAL.
          wl_alv-valor_net = 100 - wl_alv-zcra.
          vl_valor_net     = wl_alv-valor_net / 100.
          wl_alv-valor_net = wl_alv-vlunit * vl_valor_net.
          wl_alv-vltotnet  =  wl_alv-valor_net * wl_alv-kwmeng.
* LC001 - End
        ELSE.
          wl_alv-valor_net = wl_alv-vlunit.
          wl_alv-vltotnet  = wl_alv-vltotov.
        ENDIF.
** Inicio Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
      ENDIF.
** Fim Alteração - Lamartine Cavalcante LC- Homine - 18/03/21 **
* MF03 - End
*      wl_alv-valor_net = wl_alv-vltotnet / wl_alv-kwmeng.                 "NM01
***Inicio - TIROL - SOLMAN 7000000868
    ELSEIF wl_vbak-auart EQ 'VEF'.

      wl_alv-vlunit    = wl_alv-vltotov / wl_vbap-zmeng.

      IF wl_alv-ztnf IS NOT INITIAL.

*       wl_alv-valor_net = 100 - vl_vlr_zp00.

*        IF wl_alv-valor_net < 0.
*           wl_alv-valor_net = wl_alv-valor_net * -1.
*        ENDIF.
*        vl_valor_net     = wl_alv-valor_net / 100.
*        wl_alv-valor_net = wl_alv-vlunit    * vl_valor_net.

        wl_alv-valor_net = wl_alv-ztnf.
        wl_alv-vltotnet  = wl_alv-valor_net * wl_vbap-zmeng.

        CLEAR vl_vlr_zp00.
      ENDIF.
***Fim - TIROL - SOLMAN 7000000868
    ENDIF.                                                                "NM01

** Fim   Alteração - Naiany Mélo - ITSGroup - 19.11.2018 **

*   CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Inicio
    IF wl_vbap-abgru IS NOT INITIAL.
*     Seleciona usuário responsável pelo motivo
      DATA: lv_changenr   TYPE cdpos-changenr,
            lv_username   TYPE cdhdr-username,
            lv_persnumber TYPE usr21-persnumber,
            lv_name_first TYPE adrp-name_first,
            lv_name_last  TYPE adrp-name_last,
            lt_cdpos      TYPE TABLE OF cdpos,
            ls_cdpos      TYPE cdpos.

      CLEAR: lv_changenr, lv_username, lv_persnumber, lv_name_first, lv_name_last.
      SELECT *  "SINGLE CHANGENR
*        INTO lv_changenr
        INTO TABLE lt_cdpos
        FROM cdpos
        WHERE objectid EQ wl_vbap-vbeln
          AND fname = 'ABGRU'.

      SORT lt_cdpos ASCENDING BY changenr.
      CLEAR ls_cdpos.
      LOOP AT lt_cdpos INTO ls_cdpos WHERE tabkey+13(6) = wl_vbap-posnr.
        lv_changenr = ls_cdpos-changenr.
      ENDLOOP.
      SELECT SINGLE username
        INTO lv_username
        FROM cdhdr
        WHERE changenr EQ lv_changenr.

      wl_alv-username = lv_username.
*     Seleciona o nome do responsável pelo motivo
      SELECT SINGLE persnumber
        INTO lv_persnumber
        FROM usr21
        WHERE bname EQ lv_username.

      SELECT SINGLE name_first, name_last
        FROM adrp
        INTO ( @lv_name_first, @lv_name_last )
        WHERE persnumber EQ @lv_persnumber.

      CONCATENATE lv_name_first lv_name_last INTO wl_alv-name_full SEPARATED BY space.
    ENDIF.

    PERFORM zf_read_text USING wl_alv-vbeln 'ZDV5' wl_alv-obsexp.

    PERFORM zf_read_text USING wl_alv-vbeln 'ZDV6' wl_alv-obstrans.

    PERFORM zf_obs_cliente USING wl_alv-kunnr wl_alv-obscli.

    "Inclui linha na tabela de retorno
*    INSERT wl_alv INTO TABLE ct_alv.
    IF s_usern IS INITIAL AND s_nfull IS INITIAL.
      INSERT wl_alv INTO TABLE ct_alv.
    ELSE.
      IF s_usern IS NOT INITIAL AND s_nfull IS NOT INITIAL.
        IF wl_alv-username IN s_usern AND wl_alv-name_full IN s_nfull.
          INSERT wl_alv INTO TABLE ct_alv.
        ENDIF.
      ELSEIF s_usern IS NOT INITIAL.
        IF wl_alv-username IN s_usern.
          INSERT wl_alv INTO TABLE ct_alv.
        ENDIF.
      ELSEIF s_nfull IS NOT INITIAL.
        IF wl_alv-name_full IN s_nfull.
          INSERT wl_alv INTO TABLE ct_alv.
        ENDIF.
      ENDIF.
    ENDIF.
*   CHAMADO 0040 - STEFANINI - Régis Medeiros - 03.09.2019 - Fim
  ENDLOOP.

*** AA01 - Inicio
  IF p_sint IS NOT INITIAL.
*
    DATA: tl_alv_aux  TYPE tp_t_alv,
          wl_alv_sint TYPE tp_alv_sint.

    tl_alv_aux[] = ct_alv[].

* Desconsiderar os itens com motivo de recusa
    DELETE tl_alv_aux WHERE abgru IS NOT INITIAL.

    SORT tl_alv_aux BY wadat vkorg vtweg vkbur vkgrp werks regio.

    LOOP AT tl_alv_aux REFERENCE INTO DATA(wlr_alv_aux).
* TLF01 - Início
*      LOOP AT tl_alv_aux REFERENCE INTO DATA(wlr_alv) WHERE wadat = wlr_alv_aux->wadat
*                                                        AND vkorg = wlr_alv_aux->vkorg
*                                                        AND vtweg = wlr_alv_aux->vtweg
*                                                        AND vkbur = wlr_alv_aux->vkbur
*                                                        AND vkgrp = wlr_alv_aux->vkgrp
*                                                        AND werks = wlr_alv_aux->werks
*                                                        AND regio = wlr_alv_aux->regio.
      READ TABLE tl_alv_aux REFERENCE INTO DATA(wlr_alv) WITH KEY wadat = wlr_alv_aux->wadat
                                                                  vkorg = wlr_alv_aux->vkorg
                                                                  vtweg = wlr_alv_aux->vtweg
                                                                  vkbur = wlr_alv_aux->vkbur
                                                                  vkgrp = wlr_alv_aux->vkgrp
                                                                  werks = wlr_alv_aux->werks
                                                                  regio = wlr_alv_aux->regio
                                                                  kvgr2 = wlr_alv_aux->kvgr2.
      IF sy-subrc IS INITIAL.
* TLF01 - Fim

        wl_alv_sint-vkorg = wlr_alv->vkorg.
        wl_alv_sint-vtweg = wlr_alv->vtweg.
        wl_alv_sint-vkbur = wlr_alv->vkbur.
        wl_alv_sint-vkgrp = wlr_alv->vkgrp.
        wl_alv_sint-werks = wlr_alv->werks.
        wl_alv_sint-regio = wlr_alv->regio.
        wl_alv_sint-wadat = wlr_alv->wadat.
        wl_alv_sint-matnr = wlr_alv->matnr.
***** Inicio Anorce  4167
        SELECT SINGLE bezei
                INTO gv_kvgr2
                FROM tvv2t
                WHERE kvgr2 EQ wlr_alv->kvgr2.

        wl_alv_sint-kvgr2 = gv_kvgr2.  "ANORCE
        "        wl_alv_sint-kvgr2 = wlr_alv->kvgr2.  "ANORCE
******  Final ANorce 4167

        wl_alv_sint-kwmeng  = wl_alv_sint-kwmeng  + wlr_alv->kwmeng.
        wl_alv_sint-vltotov = wl_alv_sint-vltotov + wlr_alv->vltotov.

        DELETE tl_alv_aux INDEX sy-tabix.
* TLF01 - Início
*      ENDLOOP.
      ENDIF.
* TLF01 - Fim

** Início Alteração - Naiany Mélo - ITSGroup - 19.11.2018 **
      IF wl_alv_sint-kwmeng > 0.                                            "NM01
        wl_alv_sint-vlunit = wl_alv_sint-vltotov / wl_alv_sint-kwmeng.      "NM01
      ENDIF.                                                                "NM01
** Fim   Alteração - Naiany Mélo - ITSGroup - 19.11.2018 **

      IF wl_alv_sint IS NOT INITIAL.
        APPEND wl_alv_sint TO tl_alv_sint.
      ENDIF.

      CLEAR wl_alv_sint.

    ENDLOOP.

  ENDIF.
*** AA01 - Fim

ENDFORM.                    " PROCESSA_DADOS
*&---------------------------------------------------------------------*
*&      Form  EXIBE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM exibe_alv  USING it_alv TYPE tp_t_alv
                      it_alv_sint TYPE tp_t_alv_sint
                      it_alv_sfat TYPE tp_t_alv_sfat.

  DATA: lr_events TYPE REF TO cl_salv_events_table.  "AA01
  DATA: lo_aggrs TYPE REF TO cl_salv_aggregations.   "AA01
  DATA: lo_sort_column TYPE REF TO cl_salv_sort.     "AA01

  DATA: wl_layout_key TYPE salv_s_layout_key.



  IF p_comp IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = ol_salv_table
          CHANGING
            t_table      = it_alv.
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.
  ENDIF.


  IF p_sint IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = ol_salv_table
          CHANGING
            t_table      = tl_alv_sint.
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.
  ENDIF.

  IF p_sfat IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = ol_salv_table
          CHANGING
            t_table      = tl_alv_sfat.
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.
  ENDIF.

* Ativar as funções da ALV.
  ol_salv_functions = ol_salv_table->get_functions( ).
  ol_salv_functions->set_all( abap_true ).

* Manter dados das colunas da ALV
  ol_salv_columns_table = ol_salv_table->get_columns( ).
  ol_salv_columns_table->set_optimize( abap_true ).
  ol_salv_columns_table->set_key_fixation( abap_true ).

* AA01 - Inicio
* Cria botão Bloqueio de OV
  IF p_comp IS NOT INITIAL.
    ol_salv_table->set_screen_status(
    pfstatus      =  'SALV_STATUS'
    report        =  sy-repid
    set_functions = ol_salv_table->c_functions_all ).
  ENDIF.
* AA01 - Fim

  TRY.
      PERFORM define_fieldcat CHANGING ol_salv_columns_table.
    CATCH cx_salv_not_found.
      RETURN.
  ENDTRY.

  TRY.
      PERFORM f_ajusta_nomes_colunas CHANGING ol_salv_columns_table.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.




* Setar o modo de seleção da grid
  ol_selections = ol_salv_table->get_selections( ).
  ol_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

* Definir settings da ALV
  ol_salv_display = ol_salv_table->get_display_settings( ).
  ol_salv_display->set_striped_pattern( abap_true ).


* Modo Completo
  IF p_comp IS NOT INITIAL.
** Ordens de Venda em carteira (sem remessa)
    IF p_emcart IS NOT INITIAL.
      ol_salv_display->set_list_header( 'Ordens de Venda em carteira (sem remessa)' ).
    ENDIF.

** Ordens de Venda em carteira com Liberação de Crédito e Liberação Comercial
    IF p_carlib IS NOT INITIAL.
      ol_salv_display->set_list_header( 'Ordens de Venda em carteira com Liberação de Crédito/Comercial' ).
    ENDIF.

** Somente o que está em remessa (não foi feito o faturamento)
    IF p_cremes IS NOT INITIAL.
      ol_salv_display->set_list_header( 'Somente o que está em remessa (não foi feito o faturamento)' ).
    ENDIF.

** Faturados
    IF p_fatura IS NOT INITIAL.
      ol_salv_display->set_list_header( 'Faturados' ).
    ENDIF.

** Todos
    IF p_todos IS NOT INITIAL.
      ol_salv_display->set_list_header( 'Todos' ).
    ENDIF.
  ENDIF.

* Modo Sintético - Ordem de Venda
  IF p_sint IS NOT INITIAL.
    ol_salv_display->set_list_header( 'Modo Sintético - Ordem de Venda' ).
  ENDIF.

* Modo Sintético - Fatura
  IF p_sfat IS NOT INITIAL.
    ol_salv_display->set_list_header( 'Modo Sintético - Fatura' ).
  ENDIF.


* Define o layout da ALV
  ol_salv_layout = ol_salv_table->get_layout( ).
  wl_layout_key-report = sy-repid.
  ol_salv_layout->set_key( wl_layout_key ).
  ol_salv_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  ol_salv_layout->set_initial_layout( vg_layout ).                             "AA01 21.06.2017

*** AA01 - Inicio
  IF p_comp IS NOT INITIAL.    "Modo Completo

* Define Ordenação
    ol_salv_sort = ol_salv_table->get_sorts( ).
    TRY.
        ol_salv_sort->add_sort( EXPORTING columnname = 'VBELN'
                                          subtotal   = if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
      CATCH cx_salv_existing .                          "#EC NO_HANDLER
      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
    ENDTRY.

  ENDIF.


  IF p_sint IS NOT INITIAL.    "Modo Sintético OV

    lo_aggrs = ol_salv_table->get_aggregations( ).

    TRY.
        lo_aggrs->add_aggregation( EXPORTING columnname  = 'KWMENG'
                                             aggregation = if_salv_c_aggregation=>total ).

      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.

    TRY.
        lo_aggrs->add_aggregation( EXPORTING columnname  = 'VLTOTOV'
                                             aggregation = if_salv_c_aggregation=>total ).

      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.

    ol_salv_sort = ol_salv_table->get_sorts( ).

    TRY.
        lo_sort_column = ol_salv_sort->add_sort( EXPORTING columnname = 'WADAT'
                                                           subtotal   = if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

    TRY.
        lo_sort_column->set_subtotal( EXPORTING value = if_salv_c_bool_sap=>true ).
      CATCH cx_salv_data_error .
    ENDTRY.

  ENDIF.


  IF p_sfat IS NOT INITIAL.    "Modo Sintético Fatura

    lo_aggrs = ol_salv_table->get_aggregations( ).

    TRY.
        lo_aggrs->add_aggregation( EXPORTING columnname  = 'FKIMG'
                                             aggregation = if_salv_c_aggregation=>total ).

      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.

    TRY.
        lo_aggrs->add_aggregation( EXPORTING columnname  = 'KWERT'
                                             aggregation = if_salv_c_aggregation=>total ).

      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.

    ol_salv_sort = ol_salv_table->get_sorts( ).

    TRY.
        lo_sort_column = ol_salv_sort->add_sort( EXPORTING columnname = 'FKDAT'
                                                           subtotal   = if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

    TRY.
        lo_sort_column->set_subtotal( EXPORTING value = if_salv_c_bool_sap=>true ).
      CATCH cx_salv_data_error .
    ENDTRY.

  ENDIF.

* Get Eventos
  lr_events = ol_salv_table->get_event( ).
  CREATE OBJECT gr_events.
  SET HANDLER gr_events->on_user_command FOR lr_events.
  SET HANDLER gr_events->on_link_click FOR lr_events.
*** AA01 - Fim

  IF vg_authority IS NOT INITIAL.
    MESSAGE s368(00) WITH 'Alguns dados serão suprimidos devido a restrição de perfil.'(005) DISPLAY LIKE 'W'.
  ENDIF.

* Exibir a ALV
  ol_salv_table->display( ).

ENDFORM.                    " EXIBE_ALV
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_NOMES_COLUNAS
*&---------------------------------------------------------------------*
*       Ajuste nomes das colunas no relatório ALV
*----------------------------------------------------------------------*
FORM f_ajusta_nomes_colunas  CHANGING co_columns  TYPE REF TO cl_salv_columns_table.

  CONSTANTS:
    c_tam_coluna TYPE lvc_outlen VALUE 20.

  DATA:
    "Objetos locais
    ol_column      TYPE REF TO cl_salv_column_table,
    "Variáveis locais
    vl_texto_longo TYPE        scrtext_l,
    vl_texto_medio TYPE        scrtext_m,
    vl_texto_curto TYPE        scrtext_s,
    vl_message     TYPE        string,
    vl_descr       TYPE        string,
    vl_nome_campo  TYPE        char30.

  DEFINE rename_alv_col.
    TRY.
      vl_texto_curto = &2.
      vl_texto_medio = &3.
      vl_texto_longo = &4.
      ol_column ?= co_columns->get_column( &1 ).
      ol_column->set_output_length( c_tam_coluna ).
      ol_column->set_short_text( vl_texto_curto ).
      ol_column->set_medium_text( vl_texto_medio ).
      ol_column->set_long_text( vl_texto_longo ).

    CATCH cx_salv_not_found ##no_handler.

    ENDTRY.
  END-OF-DEFINITION.

*  "Ajusta o nome das colunas restantes
  rename_alv_col 'VTEXT'         space 'Desc. Bloq. Remes.'   space.
  rename_alv_col 'TVTEXT'        space 'Desc. Canal Dist.'    space.
  rename_alv_col 'TNAME1'        space 'Desc. Centro'          space.
  rename_alv_col 'EDATU'         space 'Dt Desejada Rem.'     space.
  rename_alv_col 'BSTDK'         space 'Dt. Solic. Agenda'    space.  "MS01
  rename_alv_col 'ZERDAT'        space 'Dt.criação OV'        space.
  rename_alv_col 'ERZET'         space 'Hora criação'         space.
  rename_alv_col 'BEZEI_VKGRP'   space 'Desc. Equipe Vendas'  space.
  rename_alv_col 'BEZEI_VKBUR'   space 'Desc. Escrit. Vendas' space.
  rename_alv_col 'AUFNR'         space 'Ordem de Serviço'     space.
  rename_alv_col 'NAME1'         space 'Nome Emissor'         space.
  rename_alv_col 'ORT01'         space 'Cidade Emissor'       space.
  rename_alv_col 'REGIO'         space 'Estado Emissor'       space.
  rename_alv_col 'LIFNR'         space 'Transportadora'       space.
  rename_alv_col 'NAME1_LIFNR'   space 'Nome Transportadora'  space.
  rename_alv_col 'MAKTX'         space 'Descrição material'   space.
  rename_alv_col 'MATKL'         space 'Grupo de mercadorias' space.
  rename_alv_col 'VOLUM'         space 'Volume'               space.
  rename_alv_col 'VOLUM_PEND'    space 'Volume Pendente'      space.
  rename_alv_col 'VOLUM_LIB'     space 'Volume Liberado'      space.
  rename_alv_col 'VTEXT_ZTERM'   space 'Desc. Cond. Pgto'     space.
  rename_alv_col 'PESITM'        space 'Peso bruto Item'      space.
  rename_alv_col 'PESPEN'        space 'Peso bruto Pendente'  space.
  rename_alv_col 'PESLIB'        space 'Peso bruto Liberado'  space.
  rename_alv_col 'STAT_USER'     space 'Status'               space.
  rename_alv_col 'HKUNNR'        space 'Cliente Grupo'        space.
  rename_alv_col 'NAME1_HKUNNR'  space 'Nome Cliente Grupo'   space.
  rename_alv_col 'ORT01_KUNWE'   space 'Cidade Recebedor'     space.
  rename_alv_col 'REGIO_KUNWE'   space 'Estado Recebedor'     space.
  rename_alv_col 'PRODH1'        space 'Negócio'              space.
  rename_alv_col 'PRODH1_DS'     space 'Desc. Negócio'        space.
  rename_alv_col 'PRODH2'        space 'Natureza'             space.
  rename_alv_col 'PRODH2_DS'     space 'Desc. Natureza'       space.
  rename_alv_col 'PRODH3'        space 'Marca'                space.
  rename_alv_col 'PRODH3_DS'     space 'Desc. Marca'          space.
  rename_alv_col 'PRODH4'        space 'Linha'                space.
  rename_alv_col 'PRODH4_DS'     space 'Desc. Linha'          space.
  rename_alv_col 'PRODH5'        space 'Categoria'            space.
  rename_alv_col 'PRODH5_DS'     space 'Desc. Categoria'      space.
  rename_alv_col 'PRODH6'        space 'Modelo'               space.
  rename_alv_col 'PRODH6_DS'     space 'Desc. Modelo'         space.
  rename_alv_col 'KDGRP_DS'      space 'Desc. Grp Clientes'   space.
  rename_alv_col 'LIFNR_R'       space 'Transp. Redespacho'   space.
  rename_alv_col 'NAME1_LIFNR_R' space 'Nome Transp. Redesp.' space.
  rename_alv_col 'LIFNR_2'       space 'Represante de Vendas' space.
  rename_alv_col 'NAME1_LIFNR_2' space 'Nome Repres. Vendas.' space.
  rename_alv_col 'LFSTA'         space 'Status Remessa'       space.
  rename_alv_col 'ABSTA'         space 'Status Recusa'        space.
  rename_alv_col 'TRANSPORTE'    'Transporte' 'Transporte'    'Transporte'.

** Inicio Alteração - Naiany Melo NL - ITSGROUP - 07/12/18 **
  rename_alv_col 'VLUNIT'        space 'Vlr Unit OV'       space.          "NM01
  rename_alv_col 'ZVP2'          space 'ZVP2'              space.          "NM01
  rename_alv_col 'ZVP4'          space 'ZVP4'              space.          "NM01
  rename_alv_col 'VALOR_NET'     space 'Vlr NET OV'        space.          "NM01
  rename_alv_col 'ZTNF'          space 'ZTNF'              space.          "MF04
** Inicio Alteração - Lamartine Cavalcante - Homine - 24/02/21 **
  rename_alv_col 'ZICM'          space 'ZICM'              space.          "LC001
  rename_alv_col 'ZPIS'          space 'ZPIS'              space.          "LC001
  rename_alv_col 'ZCOF'          space 'ZCOF'              space.          "LC001
  rename_alv_col 'ZCRE'          space 'ZCRE'              space.          "LC001
  rename_alv_col 'ZCRA'          space 'ZCRA'              space.          "LC001
  rename_alv_col 'ZFRE'          space 'ZFRE'              space.          "LC001
  rename_alv_col 'ZFRU'          space 'ZFRU'              space.          "LC001
  rename_alv_col 'ZCRO'          space 'ZCRO'              space.          "LC001
** Final Alteração - Lamartine Cavalcante - Homine - 24/02/21 **
**Inicio - TIROL - SOLMAN 7000000868
  IF vg_incl_zncr_zprt IS NOT INITIAL.
    rename_alv_col 'VLR_UNI'       space 'Tabela-Valor Unitário'   space.
    rename_alv_col 'VLR_TTL_OV'    space 'Tabela-Valor Total OV'   space.
  ENDIF.
**Inicio - TIROL - SOLMAN 7000000868
** Fim Aleração - Naiany Melo NL - ITSGROUP - 07/12/18 **
  rename_alv_col 'KVGR2'     space 'Centro Forn Transf.'   space.    "ANORCE

ENDFORM.                    " F_AJUSTA_NOMES_COLUNAS
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_VBAP
*&---------------------------------------------------------------------*
FORM f_ajusta_vbep_vbap  CHANGING ct_vbep   TYPE tp_t_vbep
                                  ct_vbap   TYPE tp_t_vbap
                                  ct_vbak   TYPE tp_t_vbak.

  FIELD-SYMBOLS:
    <fl_vbap>     TYPE tp_vbap,
    <fl_vbep>     TYPE tp_vbep,
    <fl_vbep_aux> TYPE tp_vbep.

  DATA:
    tl_vbep_aux TYPE tp_t_vbep,
    vl_bmeng    TYPE vbep-bmeng.

* Primeiro sumariza-se a quantidade confirmada na VPEP em somente uma linha (a primeira linha)
  tl_vbep_aux[] = ct_vbep[].

  DELETE ct_vbep WHERE etenr <> '0001'.

  LOOP AT ct_vbep ASSIGNING <fl_vbep>.

    CLEAR vl_bmeng.

    LOOP AT tl_vbep_aux ASSIGNING <fl_vbep_aux> WHERE vbeln = <fl_vbep>-vbeln
                                                  AND posnr = <fl_vbep>-posnr.

      vl_bmeng = vl_bmeng + <fl_vbep_aux>-bmeng.

    ENDLOOP.

    <fl_vbep>-bmeng = vl_bmeng.

*   Se a data na tela de seleção não estiver no primeiro item,
*   desconsiderar esse registro
*    IF <fl_vbep>-wadat NOT IN s_vdatu.
    IF <fl_vbep>-edatu NOT IN s_vdatu.
      DELETE ct_vbep.
    ENDIF.

  ENDLOOP.

* Depois verifica se ainda tem algum registro
  CONSTANTS: c_tpdoc TYPE string VALUE 'ZSD_CONTA_ORDEM_TIPO_FATURA'.

  SELECT SINGLE low FROM tvarvc INTO @DATA(lv_tpdoc) WHERE name EQ @c_tpdoc.

  LOOP AT ct_vbap ASSIGNING <fl_vbap>.

    IF lv_tpdoc IS NOT INITIAL.

      READ TABLE ct_vbak WITH KEY vbeln = <fl_vbap>-vbeln
                                  auart = lv_tpdoc TRANSPORTING NO FIELDS.

      IF sy-subrc IS INITIAL.
        CONTINUE.
      ENDIF.

    ENDIF.

    READ TABLE ct_vbep WITH KEY vbeln = <fl_vbap>-vbeln
                                posnr = <fl_vbap>-posnr TRANSPORTING NO FIELDS.

    IF sy-subrc IS NOT INITIAL.
      DELETE ct_vbap.
    ENDIF.

  ENDLOOP.

  FREE tl_vbep_aux.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_INTERVALO_DATA_SM
*&---------------------------------------------------------------------*
FORM f_busca_intervalo_data_sm  USING ct_vbap TYPE tp_t_vbap.

  DATA:
    vl_menor_tempo     TYPE tvro-traztd,
    vl_maior_tempo_str TYPE c LENGTH 10,
    vl_maior_tempo_int TYPE i,
    vl_maior_tempo     TYPE tvro-traztd,
    vl_menor_tempo_str TYPE c LENGTH 10,
    vl_menor_tempo_int TYPE i,
    tl_tvro            TYPE TABLE OF tvro-traztd.

  FIELD-SYMBOLS <fl_so_vdatu> TYPE fip_s_vdatu_range.

* Busca as datas do intinerário
  SELECT traztd
    FROM tvro
    INTO TABLE tl_tvro
     FOR ALL ENTRIES IN ct_vbap
    WHERE  route = ct_vbap-route.

* Armazena a menor data
  SORT tl_tvro ASCENDING.
  READ TABLE tl_tvro INTO vl_menor_tempo INDEX 1.

* Armazena a maior data
  SORT tl_tvro DESCENDING.
  READ TABLE tl_tvro INTO vl_maior_tempo INDEX 1.

  CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
    EXPORTING
      input  = vl_menor_tempo
    IMPORTING
      output = vl_menor_tempo_str.

  CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
    EXPORTING
      input  = vl_maior_tempo
    IMPORTING
      output = vl_maior_tempo_str.

  REPLACE ALL OCCURRENCES OF ',' IN:
   vl_menor_tempo_str WITH '.',
   vl_maior_tempo_str WITH '.'.

  CONDENSE:
    vl_menor_tempo_str,
    vl_maior_tempo_str.

  vl_menor_tempo_int = vl_menor_tempo_str.
  vl_maior_tempo_int = vl_maior_tempo_str.

  LOOP AT s_vdatu ASSIGNING <fl_so_vdatu>.

    IF <fl_so_vdatu>-high IS NOT INITIAL.
      <fl_so_vdatu>-high = <fl_so_vdatu>-high + vl_maior_tempo_int.
    ELSE.
      <fl_so_vdatu>-option = 'BT'.
      <fl_so_vdatu>-high = <fl_so_vdatu>-low + vl_maior_tempo_int.
    ENDIF.

    IF <fl_so_vdatu>-low IS NOT INITIAL.
      <fl_so_vdatu>-low  = <fl_so_vdatu>-low  + vl_menor_tempo_int.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_USER_COMMAND
*&---------------------------------------------------------------------*
FORM handle_user_command  USING i_ucomm TYPE salv_de_function.

  CASE i_ucomm.
    WHEN 'ZMER069'.
      PERFORM executa_zmer069.
    WHEN 'INTEGRAME'.
      PERFORM executa_me.
    WHEN 'INTEGRAMEA'.
      PERFORM executa_me_agrupado.
    WHEN 'REFRESH'.
      ol_salv_table->close_screen( ).
      CLEAR tl_alv[].
      CLEAR tl_alv_sint[].
      PERFORM executa.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXECUTA_ZMER069
*&---------------------------------------------------------------------*
FORM executa_zmer069 .

  DATA: tl_linhas TYPE salv_t_row,
        tl_ov     TYPE tp_t_ov,
        wl_ov     TYPE tp_ov.


  tl_linhas = ol_selections->get_selected_rows( ).

  IF tl_linhas IS INITIAL.
    MESSAGE s368(00) WITH 'Selecionar pelo menos uma linha'(004) DISPLAY LIKE 'E'.
  ENDIF.

* Ler as linhas selecionadas pelo usuário.
  LOOP AT tl_linhas REFERENCE INTO DATA(wlr_linha).

    READ TABLE tl_alv REFERENCE INTO DATA(wlr_alv) INDEX wlr_linha->*.
    IF sy-subrc EQ 0.

      wl_ov-vbeln = wlr_alv->vbeln.
      wl_ov-posnr = wlr_alv->posnr.
      wl_ov-auart = wlr_alv->auart.
      wl_ov-vstel = wlr_alv->vstel.
      wl_ov-bstdk = wlr_alv->bstdk.
      APPEND wl_ov TO tl_ov.

    ENDIF.

  ENDLOOP.

  PERFORM bloqueia_ov USING tl_ov.

  ol_salv_table->close_screen( ).
  CLEAR tl_alv[].
  PERFORM executa.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F4_LAYOUT
*&---------------------------------------------------------------------*
FORM f4_layout .

  DATA:
    vl_exit    TYPE char1,
    vl_variant TYPE disvariant,
    vl_layout  TYPE disvariant.


  MOVE sy-repid TO vl_layout-report.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = vl_layout
      i_save     = 'A'
    IMPORTING
      e_exit     = vl_exit
      es_variant = vl_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF vl_exit <> 'X'.
      p_layout = vl_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BLOQUEIA_OV
*&---------------------------------------------------------------------*
FORM bloqueia_ov  USING tl_ov TYPE tp_t_ov.

  DATA:
    wl_order_header     TYPE bapisdh1,
    wl_order_header_inx TYPE bapisdh1x,
    wl_schedule         TYPE bapischdl,
    wl_scheduleinx      TYPE bapischdlx,
    wlr_sched           TYPE tp_vbep,
    tl_return           TYPE bapiret2_t,
    tl_return_log       TYPE bapiret2_t,
    tl_recusa           TYPE TABLE OF ztsd_recusa,
    tl_schedule         TYPE TABLE OF bapischdl,
    tl_vbepaux          TYPE  tp_t_vbep,
    tl_scheduleinx      TYPE TABLE OF bapischdlx,
    tl_fields           TYPE STANDARD TABLE OF sval,
    wl_fields           TYPE sval,
    vl_lifsk            TYPE vbak-lifsk,
    vl_vdatu            TYPE vbak-vdatu, "MS01
    vl_returncode.

  CONSTANTS
    cc_agenda TYPE vbak-lifsk VALUE '42'. "42-Agendamento Solicitado

  wl_fields-tabname   = 'VBAK'.
  wl_fields-fieldname = 'LIFSK'.
  APPEND wl_fields TO tl_fields.

*>>> INICIO - MS01
  CLEAR wl_fields.
  wl_fields-tabname   = 'VBAK'.
  wl_fields-fieldname = 'VDATU'.  "Data Desejada da Remessa
  APPEND wl_fields TO tl_fields.
*<<< FIM    - MS01

  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
      popup_title     = 'Bloqueio de Ordem de Venda'
    IMPORTING
      returncode      = vl_returncode
    TABLES
      fields          = tl_fields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  IF sy-subrc EQ 0 AND vl_returncode IS INITIAL.

    READ TABLE tl_fields INTO wl_fields INDEX 1.
    IF sy-subrc EQ 0.
      vl_lifsk = wl_fields-value.
    ELSE.
      vl_lifsk = space.
    ENDIF.

*>>> INICIO - MS01
    CLEAR vl_vdatu.

    "Data Desejada da Remessa
    READ TABLE tl_fields INTO wl_fields INDEX 2.
    IF sy-subrc EQ 0 AND wl_fields-value IS NOT INITIAL.
      vl_vdatu = wl_fields-value.
    ELSE.
      vl_vdatu = vl_vdatu .
    ENDIF.
*<<< FIM    - MS01

    SORT tl_ov BY vbeln.
    DELETE ADJACENT DUPLICATES FROM tl_ov COMPARING vbeln.


    LOOP AT tl_ov REFERENCE INTO DATA(wlr_ov).

      CLEAR: wl_order_header, wl_order_header_inx.

      wl_order_header_inx-updateflag = 'U'.
      wl_order_header_inx-dlv_block = abap_true.
      wl_order_header-dlv_block = vl_lifsk.

*>>> INICIO - MS01
      "Data Desejada da Remessa
      IF vl_vdatu IS NOT INITIAL.
        wl_order_header-req_date_h = vl_vdatu.
        wl_order_header_inx-req_date_h = abap_true.
        CLEAR: tl_schedule, tl_scheduleinx, tl_vbepaux.
        " Busca remessas/schedules


        SELECT vbeln posnr etenr edatu bmeng wadat lifsp mbdat
                   FROM vbep
                   INTO TABLE tl_vbepaux
                   WHERE vbeln = wlr_ov->vbeln.
        IF sy-subrc IS INITIAL.

          LOOP AT tl_vbepaux  INTO wlr_sched.
            CLEAR: wl_scheduleinx , wl_schedule.
            wl_schedule-itm_number    = wlr_sched-posnr.
            wl_schedule-sched_line    = wlr_sched-etenr.
            wl_schedule-req_date      = vl_vdatu.

            wl_scheduleinx-itm_number    = wlr_sched-posnr.
            wl_scheduleinx-sched_line    = wlr_sched-etenr.
            wl_scheduleinx-req_date      = abap_true.
            wl_scheduleinx-updateflag    = 'U'.

            APPEND wl_schedule    TO tl_schedule.
            APPEND wl_scheduleinx TO tl_scheduleinx.

          ENDLOOP.
        ENDIF.
      ENDIF.

      "Bloqueio de remessa cadastrado
      IF vl_lifsk EQ cc_agenda AND wlr_ov->bstdk IS INITIAL. "42-Agendamento Solicitado
        wl_order_header-purch_date = sy-datum.
        wl_order_header_inx-purch_date = abap_true.
      ENDIF.
*<<< FIM    - MS01

      CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
        EXPORTING
          salesdocument    = wlr_ov->vbeln
          order_header_in  = wl_order_header
          order_header_inx = wl_order_header_inx
        TABLES
          return           = tl_return
          schedule_lines   = tl_schedule
          schedule_linesx  = tl_scheduleinx.
*    ENDLOOP. "ES01

      READ TABLE tl_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ENDIF.

    ENDLOOP. "ES01

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXIBE_LOG
*&---------------------------------------------------------------------*
FORM exibe_log  USING   it_return TYPE bapiret2_t .


  DATA:
    tl_message_tab TYPE esp1_message_tab_type,

    wl_message_tab TYPE esp1_message_wa_type,
    wl_return      TYPE bapiret2.

  CHECK it_return[] IS NOT INITIAL .

* --------------------------------------------------------------------
* Múltiplos erros serão exibidos na forma de pop-up
* --------------------------------------------------------------------
  LOOP AT it_return INTO wl_return.
    wl_message_tab-msgid   = wl_return-id.
    wl_message_tab-msgty   = wl_return-type.
    wl_message_tab-msgno   = wl_return-number.
    wl_message_tab-msgv1   = wl_return-message_v1.
    wl_message_tab-msgv2   = wl_return-message_v2.
    wl_message_tab-msgv3   = wl_return-message_v3.
    wl_message_tab-msgv4   = wl_return-message_v4.
    wl_message_tab-lineno  = sy-tabix.
    APPEND wl_message_tab TO tl_message_tab[] .
  ENDLOOP.

  IF lines( tl_message_tab ) > 1.

    CALL FUNCTION 'C14Z_MESSAGES_SHOW_AS_POPUP'
      TABLES
        i_message_tab = tl_message_tab.

  ELSE.

    READ TABLE tl_message_tab INTO wl_message_tab INDEX 1.

    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    MESSAGE ID wl_message_tab-msgid TYPE 'S'
      NUMBER wl_message_tab-msgno
      DISPLAY LIKE wl_message_tab-msgty
      WITH wl_message_tab-msgv1
               wl_message_tab-msgv2
               wl_message_tab-msgv3
               wl_message_tab-msgv4.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DEFINE_FIELDCAT
*&---------------------------------------------------------------------*
FORM define_fieldcat  CHANGING co_columns  TYPE REF TO cl_salv_columns_table.


  TRY.

      ol_salv_column_table ?= co_columns->get_column( 'VBELN' ).
      ol_salv_column_table->set_key( if_salv_c_bool_sap=>true ).
      ol_salv_column_table->set_cell_type( if_salv_c_cell_type=>hotspot ).

      ol_salv_column_table ?= co_columns->get_column( 'FATURA' ).
      ol_salv_column_table->set_key( if_salv_c_bool_sap=>true ).
      ol_salv_column_table->set_cell_type( if_salv_c_cell_type=>hotspot ).

      IF p_sint IS NOT INITIAL OR
         p_sfat IS NOT INITIAL.
        ol_salv_column_table ?= co_columns->get_column( 'MATNR' ).
        ol_salv_column_table->set_visible( value  = if_salv_c_bool_sap=>false ).
      ENDIF.

    CATCH cx_salv_not_found ##no_handler.

  ENDTRY.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LIMPA_TELA
*&---------------------------------------------------------------------*
FORM limpa_tela .

  CLEAR: s_auart[],
         s_vbeln[],
         s_audat[],
         s_vdatu[],
         s_vkorg[],
         s_vtweg[],
         s_vkbur[],
         s_abgru[],
         s_werks[],
         s_lgort[],
         s_kunnr[],
         s_matnr[],
         s_vstel[],
         s_lifsk[],
         s_fkart[],
         s_fkdat[],
         s_vbelnf[].
*         s_matkl[]. "HKS01

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_FATURA
*&---------------------------------------------------------------------*
FORM seleciona_dados_fatura  CHANGING it_alv_sfat TYPE tp_t_alv_sfat.

  SELECT vbrk~vkorg,
         vbrk~vtweg,
         vbrp~vkbur,
         vbrp~vkgrp,
         vbrp~werks,
         vbrk~regio,
         vbrk~fkdat,
         vbrp~fkimg,
         konv~kwert,
         vbrp~kvgr2
    FROM vbrk AS vbrk
   INNER JOIN vbrp AS vbrp
      ON vbrp~vbeln EQ vbrk~vbeln
   INNER JOIN konv AS konv
      ON konv~knumv EQ vbrk~knumv AND
         konv~kposn EQ vbrp~posnr
   WHERE vbrk~vbeln IN @s_vbelnf
     AND vbrk~fkart IN @s_fkart
     AND vbrk~fkdat IN @s_fkdat
     AND vbrk~vkorg IN @s_vkorg
     AND vbrk~vtweg IN @s_vtweg
     AND vbrp~vkbur IN @s_vkbur
     AND vbrp~werks IN @s_werks
     AND vbrp~lgort IN @s_lgort
     AND vbrp~vstel IN @s_vstel
     AND vbrp~kvgr2 IN @s_kvgr2 "ANORCE
     AND vbrk~fksto EQ ' '
     AND konv~kschl EQ 'ICMI'
    INTO CORRESPONDING FIELDS OF TABLE  @it_alv_sfat.  " ANORCE

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESSA_DADOS_FATURA
*&---------------------------------------------------------------------*
FORM processa_dados_fatura  CHANGING it_alv_sfat TYPE tp_t_alv_sfat.

  DATA: tl_alv_aux  TYPE tp_t_alv_sfat,
        tl_alv_sfat TYPE tp_t_alv_sfat,
        wl_alv_sfat TYPE tp_alv_sfat.

  tl_alv_aux[] = it_alv_sfat[].
  CLEAR it_alv_sfat[].

  LOOP AT tl_alv_aux REFERENCE INTO DATA(wlr_alv_aux).
    LOOP AT tl_alv_aux REFERENCE INTO DATA(wlr_alv) WHERE fkdat = wlr_alv_aux->fkdat
                                                      AND vkorg = wlr_alv_aux->vkorg
                                                      AND vtweg = wlr_alv_aux->vtweg
                                                      AND vkbur = wlr_alv_aux->vkbur
                                                      AND vkgrp = wlr_alv_aux->vkgrp
                                                      AND werks = wlr_alv_aux->werks
                                                      AND regio = wlr_alv_aux->regio
                                                      AND matnr = wlr_alv_aux->matnr
                                                      AND kvgr2 = wlr_alv_aux->kvgr2.

      wl_alv_sfat-vkorg = wlr_alv->vkorg.
      wl_alv_sfat-vtweg = wlr_alv->vtweg.
      wl_alv_sfat-vkbur = wlr_alv->vkbur.
      wl_alv_sfat-vkgrp = wlr_alv->vkgrp.
      wl_alv_sfat-werks = wlr_alv->werks.
      wl_alv_sfat-regio = wlr_alv->regio.
      wl_alv_sfat-fkdat = wlr_alv->fkdat.
      wl_alv_sfat-matnr = wlr_alv->matnr.

***** Inicio Anorce  4167
      SELECT SINGLE bezei
              INTO gv_kvgr2
              FROM tvv2t
              WHERE kvgr2 EQ wlr_alv->kvgr2.

      wl_alv_sfat-kvgr2 = gv_kvgr2.  "ANORCE
******  Final ANorce 4167


      wl_alv_sfat-fkimg = wl_alv_sfat-fkimg + wlr_alv->fkimg.
      wl_alv_sfat-kwert = wl_alv_sfat-kwert + wlr_alv->kwert.

      DELETE tl_alv_aux INDEX sy-tabix.

    ENDLOOP.

    IF wl_alv_sfat IS NOT INITIAL.
      APPEND wl_alv_sfat TO it_alv_sfat.
    ENDIF.

    CLEAR wl_alv_sfat.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONSISTE_DAYS
*&---------------------------------------------------------------------*
FORM consiste_days .

  CLEAR: vg_qtde_dias, vg_days, vg_msg, vg_erro.

*  Busca parâmetro para consistir qtde de meses
  SELECT SINGLE low
    FROM tvarvc
      INTO vg_qtde_dias
    WHERE name EQ 'ZMER068/DAYS'.
  IF sy-subrc EQ 0 AND NOT vg_qtde_dias IS INITIAL.

* Data do faturamento
    IF NOT s_fkdat[] IS INITIAL.
      CLEAR: vg_days. "vg_months.
      LOOP AT s_fkdat.
        CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
          EXPORTING
            i_date_from = s_fkdat-low
            i_date_to   = s_fkdat-high
          IMPORTING
            e_days      = vg_days.
      ENDLOOP.
*** Inicio - 11.12.2020 - SOLMAN 7000001093
*      IF vg_days > Vg_QTDE_DIAS.
      IF vg_days > 60.
*** Fim - 11.12.2020 - SOLMAN 7000001093
        vg_erro = abap_true.
        CONCATENATE 'Data do Faturamento'
                    'não pode utrapassar um período de:'
*** Inicio - 11.12.2020 - SOLMAN 7000001093
*                    Vg_QTDE_DIAS 'dias!'
                     '60 dias!'
*** Fim - 11.12.2020 - SOLMAN 7000001093
                    INTO vg_msg SEPARATED BY space.

        MESSAGE vg_msg TYPE 'I'.

      ENDIF.

    ENDIF.


* Data criação OV.
    IF NOT s_audat[] IS INITIAL.
      LOOP AT s_audat.
        CLEAR: vg_days.
        CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
          EXPORTING
            i_date_from = s_audat-low
            i_date_to   = s_audat-high
          IMPORTING
            e_days      = vg_days.
      ENDLOOP.

      IF vg_days > vg_qtde_dias.
        vg_erro = abap_true.
        CONCATENATE 'Data criação OV.'
                    'não pode utrapassar um período de:'
                     vg_qtde_dias 'dias!'
                    INTO vg_msg SEPARATED BY space.

        MESSAGE vg_msg TYPE 'I'.

      ENDIF.

    ENDIF.


* Data de saída mercadoria
    IF NOT s_vdatu[] IS INITIAL.
      CLEAR: vg_days.
      LOOP AT s_vdatu.
        CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
          EXPORTING
            i_date_from = s_vdatu-low
            i_date_to   = s_vdatu-high
          IMPORTING
            e_days      = vg_days.
      ENDLOOP.

*** Inicio - 11.12.2020 - SOLMAN 7000001093
*      IF vg_days > Vg_QTDE_DIAS.
      IF vg_days > 60.
*** Fim - 11.12.2020 - SOLMAN 7000001093
        vg_erro = abap_true.
        CONCATENATE 'Data de saída mercadoria.'
                    'não pode utrapassar um período de:'
*** Inicio - 11.12.2020 - SOLMAN 7000001093
*                    Vg_QTDE_DIAS 'dias!'
                     '60 dias!'
*** Fim - 11.12.2020 - SOLMAN 7000001093
                    INTO vg_msg SEPARATED BY space.

        MESSAGE vg_msg TYPE 'I'.

      ENDIF.

    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_FKDAT_VDATU
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM seleciona_dados_fkdat_vdatu  CHANGING ct_vbap       TYPE tp_t_vbap
                                ct_vbak            TYPE tp_t_vbak
                                ct_tvgrt           TYPE tp_t_tvgrt
                                ct_tvkbt           TYPE tp_t_tvkbt
                                ct_kna1            TYPE tp_t_kna1
                                ct_vbpa            TYPE tp_t_vbpa
                                ct_lfa1            TYPE tp_t_lfa1
                                ct_makt            TYPE tp_t_makt
                                ct_t023t           TYPE tp_t_t023t
                                ct_knvh            TYPE tp_t_knvh
                                ct_vbkd            TYPE tp_t_vbkd
                                ct_tvzbt           TYPE tp_t_tvzbt
                                ct_t173t           TYPE tp_t_t173t
                                ct_vbep            TYPE tp_t_vbep
*                                ct_vbep_sm         TYPE tp_t_vbep_sm
                                ct_vbfa            TYPE tp_t_vbfa
                                ct_tvro            TYPE tp_t_tvro
                                ct_tvagt           TYPE tp_t_tvagt
                                ct_jest            TYPE tp_t_jest
                                ct_t179t           TYPE tp_t_t179t
                                ct_t151t           TYPE tp_t_t151t
                                ct_status          TYPE tp_t_status
                                ct_vbup            TYPE tp_t_vbup
                                ct_j1bnflin        TYPE tp_t_j1bnflin
                                ct_j1bnfdoc        TYPE tp_t_j1bnfdoc
                                ct_j1bnfstx        TYPE tp_t_j1bnfstx
                                ct_konv_ov         TYPE tp_t_konv
                                ct_konv_fatura     TYPE tp_t_konv
                                ct_adrc_emissor    TYPE tp_t_adrc_emissor
                                ct_vbrk            TYPE tp_t_vbrk
                                ct_vbrp            TYPE tp_t_vbrp
                                ct_vbuk            TYPE tp_t_vbuk
                                ct_tj30            TYPE tp_t_tj30.

  DEFINE busca_param_stat.
    CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
      EXPORTING
        i_modulo            = c_param-modulo
        i_param1            = c_param-param1
        i_param2            = c_param-status-param2
        i_param3            = c_param-status-param3
        i_param4            = c_param-status-param4-&1
      IMPORTING
        e_valor             = wl_stat-&1
      EXCEPTIONS
        nao_encontrado      = 1
        range_nao_informado = 2
        OTHERS              = 3.
    IF sy-subrc IS INITIAL.
      CLEAR wl_r_stat.
      wl_r_stat-sign   = 'I'.
      wl_r_stat-option = 'EQ'.
      wl_r_stat-low    = wl_stat-&1.
      APPEND wl_r_stat TO rl_stat.
    ENDIF.
  END-OF-DEFINITION.

  DATA:
    tl_tvgrt_key    TYPE tp_t_tvgrt_key,
    tl_tvkbt_key    TYPE tp_t_tvkbt_key,
    tl_kna1_key     TYPE tp_t_kna1_key,
    tl_lfa1_key     TYPE tp_t_lfa1_key,
    tl_makt_key     TYPE tp_t_makt_key,
    tl_t023t_key    TYPE tp_t_t023t_key,
    tl_tvagt_key    TYPE tp_t_tvagt_key,
    tl_knvh_key     TYPE tp_t_knvh_key,
    tl_jest_key     TYPE tp_t_jest_key,
    tl_tvro_key     TYPE tp_t_tvro_key,
    tl_likp_key     TYPE tp_t_likp_key,
    tl_konv_ov_key  TYPE tp_t_konv_key, "AA01
    tl_konv_fat_key TYPE tp_t_konv_key, "AA01

    rl_stat         TYPE RANGE OF jest-stat,

    wl_vbap         TYPE tp_vbap,
    wl_vbak         TYPE tp_vbak,
    wl_vbpa         TYPE tp_vbpa,
    wl_tvgrt_key    TYPE tp_tvgrt_key,
    wl_tvkbt_key    TYPE tp_tvkbt_key,
    wl_kna1_key     TYPE tp_kna1_key,
    wl_lfa1_key     TYPE tp_lfa1_key,
    wl_makt_key     TYPE tp_makt_key,
    wl_t023t_key    TYPE tp_t023t_key,
    wl_tvagt_key    TYPE tp_tvagt_key,
    wl_knvh_key     TYPE tp_knvh_key,
    wl_knvh         TYPE tp_knvh,
    wl_jest_key     TYPE tp_jest_key,
    wl_jest         TYPE tp_jest,
    wl_vbfa         TYPE tp_vbfa,
    wl_tvzbt        TYPE tp_tvzbt,
    wl_tvro_key     TYPE tp_tvro_key,
    wl_tvro         TYPE tp_tvro,
    wl_stat         TYPE tp_stat,
    wl_status       TYPE tp_status,
    wl_r_stat       LIKE LINE OF rl_stat,
    wl_likp_key     TYPE tp_likp_key,
    wl_konv_ov_key  TYPE tp_konv_key, "AA01
    wl_konv_fat_key TYPE tp_konv_key, "AA01

    vl_nivel_1      TYPE string,
    vl_nivel_2      TYPE string,
    vl_nivel_3      TYPE string,
    vl_aprovados    TYPE string,
    vl_sem_aprov    TYPE string.

* AA01 - 15.06.2017 - Inicio
  TYPES: BEGIN OF tp_vbfa_remessas,
           vbeln TYPE vbfa-vbeln,
           posnn TYPE vbfa-posnn,
         END OF tp_vbfa_remessas,

         BEGIN OF tp_vbfa_faturas,
           vbeln TYPE vbfa-vbeln,
           posnr TYPE vbfa-posnn,
         END OF tp_vbfa_faturas.

  DATA: tl_vbfa_remessas TYPE TABLE OF tp_vbfa_remessas,
        tl_vbfa_faturas  TYPE TABLE OF tp_vbfa_faturas,
        tl_nfe           TYPE TABLE OF tp_vbfa_faturas.
  DATA: tl_j1bnflin_key TYPE tp_t_lin_key,
        wl_j1bnflin_key TYPE tp_lin_key,
        lv_c1           TYPE i.

* Busca Nota Fiscal
  IF s_fkdat[] IS NOT INITIAL.

    IF s_vbeln[] IS NOT INITIAL.

      SELECT vbeln
       FROM vbfa
       INTO TABLE @DATA(tl_fat_nf)
       WHERE vbelv  IN @s_vbeln
         AND vbtyp_n EQ 'M'
         AND erdat   IN @s_fkdat.

      IF tl_fat_nf[] IS NOT INITIAL.

        LOOP AT tl_fat_nf INTO DATA(str_l_fat_nf).

          wl_j1bnflin_key-refkey = str_l_fat_nf-vbeln.
          INSERT wl_j1bnflin_key INTO TABLE tl_j1bnflin_key.

        ENDLOOP.

        SELECT docnum itmnum refkey refitm netwr
         FROM j_1bnflin
         INTO TABLE ct_j1bnflin
         FOR ALL ENTRIES IN tl_j1bnflin_key
         WHERE refkey  EQ tl_j1bnflin_key-refkey.

        IF sy-subrc EQ 0.

          SELECT docnum nfenum
           INTO TABLE ct_j1bnfdoc
           FROM j_1bnfdoc
           FOR ALL ENTRIES IN ct_j1bnflin
           WHERE docnum EQ ct_j1bnflin-docnum
           AND  docdat IN s_fkdat
           AND  direct  EQ '2'.

        ENDIF.
      ENDIF.
    ELSE.

      OPEN CURSOR lv_c1 FOR
        SELECT docnum nfenum
          FROM j_1bnfdoc
          WHERE docdat IN s_fkdat
          AND  direct EQ '2' .
      WHILE NOT lv_c1 IS INITIAL.
        IF NOT lv_c1 IS INITIAL.
          FETCH NEXT CURSOR lv_c1 APPENDING TABLE ct_j1bnfdoc PACKAGE SIZE 10000.
          IF sy-subrc NE 0.
            CLOSE CURSOR lv_c1.
          ENDIF.
        ENDIF.
      ENDWHILE.
      CALL FUNCTION 'STATUS_BUFFER_REFRESH'.

      IF ct_j1bnfdoc[] IS INITIAL.
        RETURN.
      ENDIF.

      SELECT docnum itmnum refkey refitm netwr
      FROM j_1bnflin
      INTO TABLE ct_j1bnflin
      FOR ALL ENTRIES IN ct_j1bnfdoc
      WHERE docnum EQ ct_j1bnfdoc-docnum
       AND refkey  NE space
       AND refitm  NE '000000'.

    ENDIF.

  ELSEIF s_vdatu[] IS NOT INITIAL.

    OPEN CURSOR lv_c1 FOR
      SELECT docnum nfenum
        FROM j_1bnfdoc
        WHERE pstdat IN s_vdatu
         AND  direct EQ '2'.

    WHILE NOT lv_c1 IS INITIAL.
      IF NOT lv_c1 IS INITIAL.
        FETCH NEXT CURSOR lv_c1 APPENDING TABLE ct_j1bnfdoc PACKAGE SIZE 10000.
        IF sy-subrc NE 0.
          CLOSE CURSOR lv_c1.
        ENDIF.
      ENDIF.
    ENDWHILE.

    CALL FUNCTION 'STATUS_BUFFER_REFRESH'.

    IF ct_j1bnfdoc[] IS INITIAL.
      RETURN.
    ENDIF.

    SELECT docnum itmnum refkey refitm netwr
      FROM j_1bnflin
      INTO TABLE ct_j1bnflin
      FOR ALL ENTRIES IN ct_j1bnfdoc
      WHERE docnum EQ ct_j1bnfdoc-docnum
       AND refkey  NE space
       AND refitm  NE '000000'.

  ENDIF.

  FREE tl_j1bnflin_key.

*  SORT ct_j1bnflin BY docnum refkey. "GA01
  DELETE ADJACENT DUPLICATES FROM ct_j1bnflin.

  IF ct_j1bnflin[] IS NOT INITIAL.

    SELECT docnum itmnum taxval
      FROM j_1bnfstx
      INTO TABLE ct_j1bnfstx
       FOR ALL ENTRIES IN ct_j1bnflin
     WHERE docnum = ct_j1bnflin-docnum
       AND itmnum = ct_j1bnflin-itmnum
       AND taxtyp = 'ICS3'.

  ENDIF.

  LOOP AT ct_j1bnflin ASSIGNING FIELD-SYMBOL(<f_j1bnflin_key>).

    APPEND INITIAL LINE TO tl_nfe  ASSIGNING
     FIELD-SYMBOL(<f_nfe>).

    <f_nfe>-vbeln = <f_j1bnflin_key>-refkey .
    <f_nfe>-posnr = <f_j1bnflin_key>-refitm.

  ENDLOOP.

  IF tl_nfe[] IS NOT INITIAL.

    TYPES:BEGIN OF ty_vbfa,
            vbelv TYPE vbfa-vbelv,
            posnv TYPE vbfa-posnv,
            delet,
          END OF ty_vbfa.

    DATA tl_vbfa TYPE TABLE OF ty_vbfa.

    SELECT vbelv posnv
      FROM vbfa
      INTO CORRESPONDING FIELDS OF TABLE tl_vbfa
      FOR ALL ENTRIES IN tl_nfe
       WHERE vbeln EQ tl_nfe-vbeln
        AND  posnn EQ tl_nfe-posnr.

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    IF s_vbeln[] IS NOT INITIAL.
      LOOP AT tl_vbfa ASSIGNING FIELD-SYMBOL(<f_vbfa>).

        READ TABLE s_vbeln WITH KEY low = <f_vbfa>-vbelv
         TRANSPORTING NO FIELDS.

        IF sy-subrc NE 0.
          <f_vbfa>-delet = abap_true.
        ENDIF.
      ENDLOOP.
      DELETE tl_vbfa WHERE delet EQ abap_true.
    ENDIF.

    SELECT vbak~vbeln, vbak~erdat, vbak~erzet, vbak~ernam, vbak~vbtyp, vbak~auart, vbak~lifsk, tvlst~lifsp, tvlst~vtext, vbak~faksk, vbak~vkorg, vbak~vtweg, tvtwt~vtext, vbak~spart,
           vbak~vkgrp, vbak~vkbur, vbak~knumv, vbak~vdatu, vbak~autlf, vbak~bstnk, vbak~bstdk, vbak~kunnr, vbak~objnr, vbak~zzcmgst, vbak~aufnr,
           vbak~xblnr, vbak~augru, tvaut~bezei, vbak~zzcarga, vbak~kvgr2, vbak~vsbed "AA01 "ANORCE
      FROM vbak AS vbak
      INNER JOIN tvlst as tvlst on vbak~lifsk = tvlst~lifsp
      INNER JOIN tvls AS tvls ON
               tvls~lifsp = tvlst~lifsp AND tvlst~spras = @sy-langu
      INNER JOIN tvtwt AS tvtwt ON
               vbak~vtweg = tvtwt~vtweg AND tvtwt~spras = @sy-langu
      LEFT OUTER JOIN tvaut AS tvaut ON
                 tvaut~augru = vbak~augru
             AND tvaut~spras = @sy-langu
      INTO TABLE @ct_vbak
      FOR ALL ENTRIES IN @tl_vbfa
      WHERE vbeln EQ @tl_vbfa-vbelv
        AND auart IN @s_auart
        AND vbak~vtweg IN @s_vtweg
        AND vkbur IN @s_vkbur
        AND vkorg IN @s_vkorg
        AND kunnr IN @s_kunnr "GA01
        AND lifsk IN @s_lifsk  "AA01
        AND vkgrp IN @s_vkgrp
        AND kvgr2 IN @s_kvgr2 . "ANORCE

    IF sy-subrc <> 0.
**SOLMAN 7000001605 - Inicio - 26.01.2021
      SELECT vbeln erdat erzet ernam vbtyp auart lifsk faksk vkorg vtweg spart
             vkgrp vkbur knumv vdatu autlf bstnk bstdk kunnr objnr zzcmgst aufnr
             xblnr augru zzcarga kvgr2
        FROM vbak
        INTO CORRESPONDING FIELDS OF TABLE ct_vbak
        FOR ALL ENTRIES IN tl_vbfa
        WHERE vbeln EQ tl_vbfa-vbelv
          AND auart IN s_auart
          AND vtweg IN s_vtweg
          AND vkbur IN s_vkbur
          AND vkorg IN s_vkorg
          AND kunnr IN s_kunnr "GA01
          AND lifsk IN s_lifsk  "AA01
          AND vkgrp IN s_vkgrp
          AND kvgr2 IN s_kvgr2 . "ANORCE

      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021
    ENDIF.

*   Chamado 8000001335 - Stefanini - Régis Medeiros - 03.12.2019 - Inicio
    IF s_fkdat IS NOT INITIAL.
      SELECT vbfa~vbelv, vbfa~vbeln, vbrk~fkdat
        FROM vbrk
        LEFT OUTER JOIN vbfa AS vbfa ON
                 vbfa~vbeln = vbrk~vbeln
        INTO TABLE @ct_vbfa_fat
        FOR ALL ENTRIES IN @ct_vbak
      WHERE vbfa~vbelv = @ct_vbak-vbeln
        AND fkdat IN @s_fkdat
        AND vbtyp_n EQ 'M'.

      LOOP AT ct_vbak INTO wl_vbak.
        READ TABLE ct_vbfa_fat WITH KEY vbelv = wl_vbak-vbeln TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE TABLE ct_vbak FROM wl_vbak.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IF ct_vbak[] IS INITIAL.
      RETURN.
    ENDIF.

    "Obtém dados referentes aos itens a partir das OVs
    SELECT vbap~vbeln vbap~posnr vbap~matnr vbap~matkl vbap~pstyv vbap~abgru vbap~zmeng vbap~umziz vbap~umzin vbap~meins vbap~netwr vbap~waerk
        vbap~kwmeng vbap~kbmeng vbap~vrkme vbap~brgew vbap~volum vbap~voleh vbap~lprio vbap~werks t001w~name1 vbap~lgort vbap~route vbap~mwsbp vbap~prodh
        vbap~vstel vbap~mvgr1 vbap~charg"AA01
      FROM vbap AS VBAP
      INNER JOIN t001w AS t001w on vbap~werks = t001w~werks
      INTO TABLE ct_vbap
      FOR ALL ENTRIES IN ct_vbak
      WHERE vbeln = ct_vbak-vbeln
        AND abgru IN s_abgru  "GA01
        AND vbap~werks IN s_werks  "GA01
        AND lgort IN s_lgort  "GA01
        AND matnr IN s_matnr  "GA01
        AND vbap~vstel IN s_vstel.  "AA01
*      AND matkl IN s_matkl. "HKS01

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    "elimina OVs desnecessárias
    LOOP AT ct_vbak INTO wl_vbak.
      READ TABLE ct_vbap WITH TABLE KEY vbeln = wl_vbak-vbeln TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        DELETE TABLE ct_vbak FROM wl_vbak.
      ENDIF.
    ENDLOOP.
    "GGS01 - Fim

* AK01 - Início
    "Recupera Status de Remessa (LFSTA) e Status de Recusa (ABSTA) dos itens da ordem
    SELECT vbeln posnr lfsta absta
      FROM vbup
      INTO TABLE ct_vbup
      FOR ALL ENTRIES IN ct_vbap
      WHERE vbeln = ct_vbap-vbeln
      AND   posnr = ct_vbap-posnr.
* AK01 - Fim.

* GA01 - Início
    IF s_vdatu[] IS NOT INITIAL.
      PERFORM f_busca_intervalo_data_sm USING ct_vbap.
    ENDIF.
* GA01 - Fim

    "Obtém os dados de divisão de remessa a partir dos itens obtidos
    IF NOT ct_vbap[] IS INITIAL. "GGS01
      SELECT vbeln posnr etenr edatu bmeng wadat lifsp mbdat
        FROM vbep
        INTO TABLE ct_vbep
        FOR ALL ENTRIES IN ct_vbap
        WHERE vbeln = ct_vbap-vbeln
          AND posnr = ct_vbap-posnr
*      AND wadat IN s_vdatu "GA01
          AND edatu IN s_vdatu "AA01
          AND etenr EQ '1'.    "AA01 "EME01 - Buscar todas div. remessa para ordem

    ENDIF. "GGS01

**SOLMAN 7000001605 - Inicio - 26.01.2021
    IF ct_vbep[] IS INITIAL.

      DELETE s_auart WHERE low NE 'VEF'.

      IF s_auart[] IS INITIAL .
        PERFORM f_ajusta_vbep_vbap CHANGING ct_vbep
                                            ct_vbap
                                            ct_vbak.

        IF sy-subrc <> 0.
          RETURN.
        ENDIF.
      ENDIF.
    ELSE.
**SOLMAN 7000001605 - Fim - 26.01.2021
      PERFORM f_ajusta_vbep_vbap CHANGING ct_vbep
                                          ct_vbap
                                          ct_vbak.

      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
**SOLMAN 7000001605 - Inicio - 26.01.2021
    ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021

    "Obtém transportadora da Ordem de Venda
    IF NOT ct_vbak[] IS INITIAL. "GGS01
      SELECT vbeln posnr parvw kunnr lifnr
        INTO TABLE ct_vbpa
        FROM vbpa
        FOR ALL ENTRIES IN ct_vbak
        WHERE vbeln = ct_vbak-vbeln
          AND posnr = 0
          AND parvw IN (c_parvw-agente_frete,
                        c_parvw-emissor_ordem,
                        c_parvw-recebedor_merc,
                        c_parvw-redespacho,
                        c_parvw-repres_venda, "MF01
                        c_parvw-transp_insumos). "VC01
      IF sy-subrc EQ 0 AND "VC01 - Inicio - Filtro Trasportador de Insumos
         s_lifnr[] IS NOT INITIAL.

        DELETE ct_vbpa WHERE lifnr NOT IN s_lifnr OR
                             parvw NE c_parvw-transp_insumos.

        "Remover as linhas de Header e Itens que não atendem ao filtro do transportador
        LOOP AT ct_vbak INTO wl_vbak.

          READ TABLE ct_vbpa
                WITH KEY vbeln = wl_vbak-vbeln
                TRANSPORTING NO FIELDS.
          IF sy-subrc NE 0.
            DELETE TABLE ct_vbak FROM wl_vbak.

            LOOP AT ct_vbap INTO wl_vbap WHERE vbeln EQ wl_vbak-vbeln.
              DELETE TABLE ct_vbap FROM wl_vbap.
            ENDLOOP.

          ENDIF.

        ENDLOOP.

      ENDIF. "VC01 - Fim
    ENDIF.                    "GGS01

*    IF sy-subrc IS INITIAL. "VC01 IF com funcionalidade prejudicada
    LOOP AT ct_vbpa INTO wl_vbpa.
      IF wl_vbpa-lifnr IS NOT INITIAL.
        CLEAR wl_lfa1_key.
        wl_lfa1_key-lifnr = wl_vbpa-lifnr.
        COLLECT wl_lfa1_key INTO tl_lfa1_key.
      ENDIF.

      IF wl_vbpa-kunnr IS NOT INITIAL.
        CLEAR wl_kna1_key.
        wl_kna1_key-kunnr = wl_vbpa-kunnr.
        COLLECT wl_kna1_key INTO tl_kna1_key.
      ENDIF.
    ENDLOOP.
*  ENDIF. "VC01

    IF tl_lfa1_key IS NOT INITIAL.
      SELECT lifnr name1
        adrnr "AA01
        INTO TABLE ct_lfa1
        FROM lfa1
        FOR ALL ENTRIES IN tl_lfa1_key
        WHERE lifnr = tl_lfa1_key-lifnr.
    ENDIF.

    "Obtém os dados de Fluxos de Documento
**SOLMAN 7000001605 - Inicio - 26.01.2021
    DATA: r_dele_fat    TYPE RANGE OF vbfa-vbeln,
          strl_dele_fat LIKE LINE OF r_dele_fat.

    READ TABLE s_auart WITH KEY low = 'VEF'
     TRANSPORTING NO FIELDS.

    IF sy-subrc EQ 0.
      DATA(vl_yes_vef) = abap_true.
    ENDIF.

*  IF NOT ct_vbap[] IS  INITIAL. "GGS01
    IF NOT ct_vbap[] IS INITIAL AND vl_yes_vef IS INITIAL.
**SOLMAN 7000001605 - Fim - 26.01.2021
      SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
             erdat erzet "GA01
        FROM vbfa
        INTO TABLE ct_vbfa
        FOR ALL ENTRIES IN ct_vbap
        WHERE vbelv = ct_vbap-vbeln
          AND posnv = ct_vbap-posnr
          AND vbtyp_n IN ('J', 'M', 'N', 'R', 'h').
**SOLMAN 7000001605 - Inicio - 26.01.2021
    ELSEIF NOT ct_vbap[] IS  INITIAL AND vl_yes_vef IS NOT INITIAL.

      SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
           erdat erzet "GA01
      FROM vbfa
      INTO TABLE ct_vbfa
      FOR ALL ENTRIES IN ct_vbap
      WHERE vbelv = ct_vbap-vbeln
        AND posnv = ct_vbap-posnr
        AND vbtyp_n EQ 'M'.

      IF ct_vbfa[] IS NOT INITIAL.

        SELECT vbeln
          FROM vbrk
          INTO TABLE @DATA(tl_vbrk_fa)
          FOR ALL ENTRIES IN @ct_vbfa
          WHERE  vbeln EQ @ct_vbfa-vbeln
            AND  fkart EQ  'FA'.

        IF tl_vbrk_fa[] IS NOT INITIAL.

          LOOP AT ct_vbfa ASSIGNING FIELD-SYMBOL(<f_for_dele>).

            READ TABLE tl_vbrk_fa WITH KEY vbeln = <f_for_dele>-vbeln
            TRANSPORTING NO FIELDS.

            IF sy-subrc NE 0.

              strl_dele_fat = VALUE #( sign   = 'I'
                                       option = 'EQ'
                                       low    = <f_for_dele>-vbeln ).

              APPEND strl_dele_fat TO r_dele_fat.
              CLEAR strl_dele_fat.

            ENDIF.
          ENDLOOP.

          DELETE ct_vbfa WHERE vbeln IN r_dele_fat.

        ENDIF.
      ENDIF.
**SOLMAN 7000001605 - Fim - 26.01.2021
    ENDIF. "GGS01

    LOOP AT ct_vbfa INTO wl_vbfa.
      CHECK wl_vbfa-vbtyp_n = 'J'.
      wl_likp_key-vbeln = wl_vbfa-vbeln.
      COLLECT wl_likp_key INTO tl_likp_key.
    ENDLOOP.

    IF NOT tl_likp_key[] IS INITIAL. "GGS01
      SELECT vbelv posnv vbeln posnn vbtyp_n rfmng
             erdat erzet "GA01
        FROM vbfa
        APPENDING TABLE ct_vbfa
        FOR ALL ENTRIES IN tl_likp_key
        WHERE vbelv = tl_likp_key-vbeln
          AND vbtyp_n IN ('M', 'N', 'R', 'h').
    ENDIF. "GGS01

* AA01 - 15.06.2017 - Inicio
* Busca Remessas
    IF NOT ct_vbap[] IS INITIAL. "GGS01
      SELECT vbeln posnn
        FROM vbfa
        INTO TABLE tl_vbfa_remessas
        FOR ALL ENTRIES IN ct_vbap
        WHERE vbelv   EQ ct_vbap-vbeln
          AND posnv   EQ ct_vbap-posnr
          AND ( vbtyp_n EQ 'J'    "Remessa
           OR   vbtyp_n EQ 'T' ). "Remessa Devolução
    ENDIF.

* Busca Fatura
    IF vl_yes_vef IS NOT INITIAL.

      IF tl_vbfa_remessas[] IS NOT INITIAL.
        SELECT vbeln posnn
          FROM vbfa
          INTO TABLE tl_vbfa_faturas
          FOR ALL ENTRIES IN tl_vbfa_remessas
          WHERE vbelv   EQ tl_vbfa_remessas-vbeln
            AND posnv   EQ tl_vbfa_remessas-posnn
            AND ( vbtyp_n EQ 'M'    "Fatura
             OR   vbtyp_n EQ 'O' ). "Nota de Crédito
      ENDIF.

      IF ct_vbap[] IS NOT INITIAL.
        SELECT vbeln posnn
          FROM vbfa
          APPENDING TABLE tl_vbfa_faturas
          FOR ALL ENTRIES IN ct_vbap
          WHERE vbelv   EQ ct_vbap-vbeln
            AND posnv   EQ ct_vbap-posnr
            AND ( vbtyp_n EQ 'M'    "Fatura
             OR   vbtyp_n EQ 'O' ). "Nota de Crédito
      ENDIF.
    ELSE.

      IF tl_vbfa_remessas[] IS NOT INITIAL.

        SELECT vbeln posnn
          FROM vbfa
          INTO TABLE tl_vbfa_faturas
          FOR ALL ENTRIES IN tl_vbfa_remessas
          WHERE vbelv   EQ tl_vbfa_remessas-vbeln
            AND posnv   EQ tl_vbfa_remessas-posnn
            AND ( vbtyp_n EQ 'M'    "Fatura
             OR   vbtyp_n EQ 'O' ). "Nota de Crédito

      ELSEIF ct_vbap[] IS NOT INITIAL.

        SELECT vbeln posnn
          FROM vbfa
          INTO TABLE tl_vbfa_faturas
          FOR ALL ENTRIES IN ct_vbap
          WHERE vbelv   EQ ct_vbap-vbeln
            AND posnv   EQ ct_vbap-posnr
            AND ( vbtyp_n EQ 'M'    "Fatura
             OR   vbtyp_n EQ 'O' ). "Nota de Crédito
      ENDIF.
    ENDIF.

    SORT tl_vbfa_faturas BY vbeln.
    DELETE ADJACENT DUPLICATES FROM tl_vbfa_faturas.

* Busca Flag de Estorno da Fatura
    IF NOT tl_vbfa_faturas[] IS INITIAL. "GGS01
      SELECT vbeln fksto fkdat
        FROM vbrk
        INTO TABLE ct_vbrk
        FOR ALL ENTRIES IN tl_vbfa_faturas
        WHERE vbeln EQ tl_vbfa_faturas-vbeln.
*      AND fksto = 'X'. "GA01 "AA01
    ENDIF. "GGS01

* Busca dados de item da fatura
    IF NOT ct_vbrk[] IS INITIAL. "GGS01
      SELECT vbeln posnr fkimg vrkme netwr mwsbp
        FROM vbrp
        INTO TABLE ct_vbrp
        FOR ALL ENTRIES IN ct_vbrk
      WHERE vbeln EQ ct_vbrk-vbeln.
    ENDIF. "GGS01

    LOOP AT ct_vbap REFERENCE INTO DATA(wlr_vbap).

      READ TABLE ct_vbak REFERENCE INTO DATA(wlr_vbak) WITH KEY vbeln = wlr_vbap->vbeln.

      wl_konv_ov_key-knumv = wlr_vbak->knumv.
      wl_konv_ov_key-posnr = wlr_vbap->posnr.
      APPEND wl_konv_ov_key TO tl_konv_ov_key.

    ENDLOOP.

    SORT tl_konv_ov_key.
    DELETE ADJACENT DUPLICATES FROM tl_konv_ov_key.

    IF NOT tl_konv_ov_key[] IS INITIAL. "GGS01
      SELECT DISTINCT knumv kposn kschl
             kbetr "GA01
             kwert "AA01
        FROM konv
        INTO TABLE ct_konv_ov
        FOR ALL ENTRIES IN tl_konv_ov_key
        WHERE knumv EQ tl_konv_ov_key-knumv
          AND kposn EQ tl_konv_ov_key-posnr
          AND kschl IN ('ICMI','ZNET','ZVP2','ZVP4', 'ZTNF', 'ZNCR','ZPRT','ZP00','ZICM','ZPIS','ZCOF','ZCRE','ZCRA','ZFRE','ZFRU','ZCRO','ZNT2','ZNT3').
    ENDIF. "GGS01


    LOOP AT ct_vbrp REFERENCE INTO DATA(wlr_vbrp).

      READ TABLE ct_vbrk REFERENCE INTO DATA(wlr_vbrk) WITH KEY vbeln = wlr_vbrp->vbeln.

      wl_konv_fat_key-knumv = wlr_vbrk->knumv.
      wl_konv_fat_key-posnr = wlr_vbrp->posnr.
      APPEND wl_konv_fat_key TO tl_konv_fat_key.

    ENDLOOP.

    SORT tl_konv_fat_key.
    DELETE ADJACENT DUPLICATES FROM tl_konv_fat_key.


    IF NOT tl_konv_fat_key[] IS INITIAL. "GGS01
      SELECT DISTINCT knumv kposn kschl
             kbetr "GA01
             kwert "AA01
        FROM konv
        INTO TABLE ct_konv_fatura
        FOR ALL ENTRIES IN tl_konv_fat_key
        WHERE knumv EQ tl_konv_fat_key-knumv
          AND kposn EQ tl_konv_fat_key-posnr
          AND kschl EQ 'ICMI'.
    ENDIF. "GGS01

* Buscar status global
    IF NOT ct_vbak[] IS INITIAL. "GGS01
      SELECT vbeln cmgst
        FROM vbuk
        INTO TABLE ct_vbuk
        FOR ALL ENTRIES IN ct_vbak
        WHERE vbeln EQ ct_vbak-vbeln.
*      AND cmgst IN (' ','A','D').
    ENDIF. "GGS01

    "Obtém os Dados Comerciais a partir dos itens obtidos
    IF NOT ct_vbak[] IS INITIAL. "GGS01
      SELECT vbeln posnr kdgrp bzirk inco1 inco2 valtg zterm kursk
***SOLMAN 7000001835 - Inicio - 26.01.2021
          bstkd
***SOLMAN 7000001835 - Fim   - 26.01.2021
             bstdk           "MS01
             bstkd_e ihrez_e "AA01
        FROM vbkd
        INTO TABLE ct_vbkd
        FOR ALL ENTRIES IN ct_vbak
        WHERE vbeln = ct_vbak-vbeln.
    ENDIF. "GGS01

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    "Seleciona a descrição das condições de pagamento
    IF NOT ct_vbkd IS INITIAL.
      SELECT zterm vtext
        INTO TABLE ct_tvzbt
        FROM tvzbt
        FOR ALL ENTRIES IN ct_vbkd
        WHERE zterm = ct_vbkd-zterm
          AND spras = sy-langu.
    ENDIF.

    "Seleciona a descrição dos tipos de expedição
    IF NOT ct_vbkd IS INITIAL.
      SELECT vsart bezei
        INTO TABLE ct_t173t
        FROM t173t
        FOR ALL ENTRIES IN ct_vbkd
        WHERE vsart = ct_vbkd-vsart
          AND spras = sy-langu.
    ENDIF.

    LOOP AT ct_vbak INTO wl_vbak.
      "Monta tabela de chaves para posterior acesso à TVGRT
      CLEAR wl_tvgrt_key.
      wl_tvgrt_key-vkgrp = wl_vbak-vkgrp.
      COLLECT wl_tvgrt_key INTO tl_tvgrt_key.

      "Monta tabela de chaves para posterior acesso à TVKBT
      CLEAR wl_tvkbt_key.
      wl_tvkbt_key-vkbur = wl_vbak-vkbur.
      COLLECT wl_tvkbt_key INTO tl_tvkbt_key.

      "Monta tabela de chaves para posterior acesso à KNA1
      CLEAR wl_kna1_key.
      wl_kna1_key-kunnr = wl_vbak-kunnr.
      COLLECT wl_kna1_key INTO tl_kna1_key.

      "Monta tabela de chaves para posterior acesso à KNVH
      CLEAR wl_knvh_key.
      wl_knvh_key-kunnr = wl_vbak-kunnr.
      wl_knvh_key-vkorg = wl_vbak-vkorg.
      wl_knvh_key-vtweg = wl_vbak-vtweg.
      wl_knvh_key-spart = wl_vbak-spart.
      COLLECT wl_knvh_key INTO tl_knvh_key.

      "Monta tabela de chaves para posterior acesso à JEST
      CLEAR wl_jest_key.
      wl_jest_key-objnr = wl_vbak-objnr.
      COLLECT wl_jest_key INTO tl_jest_key.
    ENDLOOP.

    IF tl_knvh_key IS NOT INITIAL.
      SELECT hityp kunnr vkorg vtweg spart datab hkunnr
        FROM knvh
        INTO TABLE ct_knvh
        FOR ALL ENTRIES IN tl_knvh_key
        WHERE hityp = 'A'
          AND kunnr = tl_knvh_key-kunnr
          AND vkorg = tl_knvh_key-vkorg
          AND vtweg = tl_knvh_key-vtweg
          AND spart = tl_knvh_key-spart.

      IF sy-subrc IS INITIAL.
        LOOP AT ct_knvh INTO wl_knvh.
          CLEAR wl_kna1_key.
          wl_kna1_key-kunnr = wl_knvh-hkunnr.
          COLLECT wl_kna1_key INTO tl_kna1_key.
        ENDLOOP.
      ENDIF.
    ENDIF.

    "A rotina abaixo montará a tabela de chaves para acesso à MAKT e T023T.
    LOOP AT ct_vbap INTO wl_vbap.
      CLEAR wl_makt_key.
      wl_makt_key-matnr = wl_vbap-matnr.
      COLLECT wl_makt_key INTO tl_makt_key.

      CLEAR wl_t023t_key.
      wl_t023t_key-matkl = wl_vbap-matkl.
      COLLECT wl_t023t_key INTO tl_t023t_key.

      READ TABLE ct_vbak INTO wl_vbak
        WITH TABLE KEY vbeln = wl_vbap-vbeln.

      CLEAR wl_tvagt_key.
      wl_tvagt_key-abgru = wl_vbap-abgru.
      COLLECT wl_tvagt_key INTO tl_tvagt_key.

      CLEAR wl_tvro_key.
      wl_tvro_key-route = wl_vbap-route.
      COLLECT wl_tvro_key INTO tl_tvro_key.
    ENDLOOP.

    IF tl_tvgrt_key[] IS NOT INITIAL.
      "Obtém os textos das Equipes de Vendas
      SELECT vkgrp bezei
        FROM tvgrt
        INTO TABLE ct_tvgrt
        FOR ALL ENTRIES IN tl_tvgrt_key
        WHERE spras = sy-langu
          AND vkgrp = tl_tvgrt_key-vkgrp.
    ENDIF.

    IF tl_tvkbt_key[] IS NOT INITIAL.
      "Obtém os textos dos Escritórios de Vendas
      SELECT vkbur bezei
        FROM tvkbt
        INTO TABLE ct_tvkbt
        FOR ALL ENTRIES IN tl_tvkbt_key
        WHERE spras = sy-langu
          AND vkbur = tl_tvkbt_key-vkbur.
    ENDIF.

    IF tl_kna1_key[] IS NOT INITIAL.
      "Obtém as descrições dos clientes
      SELECT kunnr name1 ort01 regio
             adrnr "AA01
        FROM kna1
        INTO TABLE ct_kna1
        FOR ALL ENTRIES IN tl_kna1_key
        WHERE kunnr = tl_kna1_key-kunnr.
    ENDIF.

* Buscar endereço do Emissor
    IF NOT ct_kna1[] IS INITIAL. "GGS01
      SELECT addrnumber name1 city1 city2 post_code1 street house_num1 region tel_number
        FROM adrc
        INTO TABLE ct_adrc_emissor
         FOR ALL ENTRIES IN ct_kna1
       WHERE addrnumber EQ ct_kna1-adrnr.
    ENDIF. "GGS01

    IF tl_makt_key[] IS NOT INITIAL.
      "Obtém as descrições dos materiais
      SELECT matnr maktx
        FROM makt
        INTO TABLE ct_makt
        FOR ALL ENTRIES IN tl_makt_key
        WHERE matnr = tl_makt_key-matnr
          AND spras = sy-langu.
    ENDIF.

    IF tl_t023t_key[] IS NOT INITIAL.
      "Obtém as descrições dos grupos de mercadoria
      SELECT matkl wgbez
        FROM t023t
        INTO TABLE ct_t023t
        FOR ALL ENTRIES IN tl_t023t_key
        WHERE matkl = tl_t023t_key-matkl
          AND spras = sy-langu.
    ENDIF.

    IF tl_tvagt_key IS NOT INITIAL.
      SELECT spras abgru bezei
        FROM tvagt
        INTO TABLE ct_tvagt
        FOR ALL ENTRIES IN tl_tvagt_key
        WHERE spras = sy-langu
          AND abgru = tl_tvagt_key-abgru.
    ENDIF.

    IF tl_tvro_key IS NOT INITIAL.
      SELECT route traztd
        FROM tvro
        INTO TABLE ct_tvro
        FOR ALL ENTRIES IN tl_tvro_key
        WHERE route = tl_tvro_key-route.
    ENDIF.

    "Hierarquia de produtos
    SELECT prodh vtext
      FROM t179t
      INTO TABLE ct_t179t
      WHERE spras = sy-langu.

    busca_param_stat lib1.
    busca_param_stat lib2.
*  busca_param_stat lib3.
    busca_param_stat blk1.
    busca_param_stat blk2.

    IF tl_jest_key IS NOT INITIAL.
      SELECT objnr stat inact
        FROM jest
        INTO TABLE ct_jest
        FOR ALL ENTRIES IN tl_jest_key
        WHERE objnr = tl_jest_key-objnr.

      SELECT stsma estat
        FROM tj30
        INTO TABLE ct_tj30
        FOR ALL ENTRIES IN ct_jest
      WHERE stsma EQ 'ZSD00000'
        AND estat EQ ct_jest-stat.

      IF sy-subrc IS INITIAL.
        LOOP AT ct_vbak INTO wl_vbak.
          CLEAR wl_status.
          wl_status-vbeln = wl_vbak-vbeln.
          wl_status-lib1  = abap_true.
          wl_status-lib2  = abap_true.
*        wl_status-lib3  = abap_true.
          wl_status-blk1  = abap_true.
          wl_status-blk2  = abap_true.

          LOOP AT ct_jest INTO wl_jest
            WHERE objnr = wl_vbak-objnr.

            CASE wl_jest-stat.
              WHEN wl_stat-lib1.
                wl_status-lib1 = wl_jest-inact.
              WHEN wl_stat-lib2.
                wl_status-lib2 = wl_jest-inact.
              WHEN wl_stat-blk1.
                wl_status-blk1 = wl_jest-inact.
              WHEN wl_stat-blk2.
                wl_status-blk2 = wl_jest-inact.
              WHEN OTHERS.
            ENDCASE.
          ENDLOOP.
          INSERT wl_status INTO TABLE ct_status.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ZF_READ_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_9664   text
*      -->P_WL_ALV_OBSEXP  text
*----------------------------------------------------------------------*
FORM zf_read_text  USING p_vbeln_va
                         p_id       TYPE thead-tdid
                         p_obs      TYPE char128.

  DATA: tl_lines TYPE STANDARD TABLE OF tline.

  DATA: vl_name TYPE thead-tdname.

  CLEAR p_obs.

  vl_name = p_vbeln_va.
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      id                      = p_id
      language                = sy-langu
      name                    = vl_name
      object                  = 'VBBK'
    TABLES
      lines                   = tl_lines
    EXCEPTIONS
      id                      = 1
      language                = 2
      name                    = 3
      not_found               = 4
      object                  = 5
      reference_check         = 6
      wrong_access_to_archive = 7
      OTHERS                  = 8.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
  IF tl_lines[] IS NOT INITIAL.
    LOOP AT tl_lines INTO DATA(wl_lines).
      CONDENSE wl_lines-tdline.
      IF sy-tabix = 1.
        p_obs = wl_lines-tdline.
      ELSE.
        CONCATENATE p_obs wl_lines-tdline INTO p_obs SEPARATED BY space.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZF_OBS_CLIENTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WL_ALV_KUNNR  text
*      -->P_WL_ALV_OBSCLI  text
*----------------------------------------------------------------------*
FORM zf_obs_cliente  USING    p_kunnr
                              p_obscli.

  SELECT SINGLE a~remark
    INTO p_obscli
    FROM kna1 AS k INNER JOIN adrct AS a
      ON k~adrnr = a~addrnumber
   WHERE kunnr = p_kunnr
     AND langu = sy-langu.

ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  EXECUTA_ME
*&---------------------------------------------------------------------*
*       OR01 - Integração Infosalles
*----------------------------------------------------------------------*
FORM executa_me .
  TYPES: BEGIN OF ty_ov,
           vbeln TYPE vbak-vbeln,
           brgew TYPE vbap-brgew,
         END OF ty_ov,
         ty_t_ov TYPE STANDARD TABLE OF ty_ov.

  DATA: ol_proxy     TYPE REF TO zcl_co_buscar_disponibilidade,
        ol_root      TYPE REF TO cx_root,
        ol_table     TYPE REF TO cl_salv_table,
        ol_functions TYPE REF TO cl_salv_functions_list,
        ol_columns   TYPE REF TO cl_salv_columns,
        ol_column    TYPE REF TO cl_salv_column_table.

  DATA: tl_linhas  TYPE salv_t_row,
        tl_vbeln   TYPE saco_vbeln_ranges_tab,
        tl_ov      TYPE ty_t_ov,
        tl_me_resp TYPE ty_t_integra_me_output.

  DATA: wl_alv           TYPE tp_alv,
        wl_ov            TYPE ty_ov,
        wl_input         TYPE zcl_buscar_disponibilidade_en1,
        wl_output        TYPE zcl_buscar_disponibilidade_ent,
        wl_destinatarios TYPE zcl_array_of_pessoa,
        wl_precarga      TYPE zcl_pre_carga,
        wl_pessoa        TYPE zcl_pessoa2,
        wl_me_resp       TYPE ty_integra_me_output,
        wl_retorno       TYPE bapiret2.

  DATA: lv_numeracao TYPE numc10,
        lv_num_carga TYPE zesd_carga.

  CONSTANTS: lc_codpais TYPE numc4 VALUE '1048',
             lc_pais    TYPE string VALUE 'BRASIL',
             BEGIN OF lc_tp_pessoa,
               fisica   TYPE string VALUE 'Fisica',
               juridica TYPE string VALUE 'Juridica',
             END OF lc_tp_pessoa,
             BEGIN OF lc_numeracao,
               nr_range_nr TYPE inri-nrrangenr VALUE '01',
               object      TYPE inri-object    VALUE 'ZSDMECOD',
             END OF lc_numeracao,
             BEGIN OF lc_fields,
               status_icon TYPE lvc_fname VALUE 'STATUS_ICON',
               status      TYPE lvc_fname VALUE 'STATUS',
               vbeln       TYPE lvc_fname VALUE 'VBELN',
               msg         TYPE lvc_fname VALUE 'MSG',
             END OF lc_fields,
             BEGIN OF lc_status,
               erro    TYPE string VALUE 'false',
               sucesso TYPE string VALUE 'true',
             END OF lc_status.


  tl_linhas = ol_selections->get_selected_rows( ).

  IF tl_linhas IS INITIAL.
    MESSAGE s368(00) WITH 'Selecionar pelo menos uma linha'(004) DISPLAY LIKE 'E'.
  ENDIF.

  " Percorre as linhas selecionadas
  LOOP AT tl_linhas INTO DATA(vl_linha).
    " Lê pedido selecionado
    READ TABLE tl_alv INTO wl_alv INDEX vl_linha.

    IF NOT line_exists( tl_vbeln[ low = wl_alv-vbeln ] ).
      tl_vbeln = VALUE saco_vbeln_ranges_tab( BASE tl_vbeln ( sign = 'I' option = 'EQ' low = wl_alv-vbeln  ) ).
    ENDIF.
  ENDLOOP.

  " Percorre as linhas selecionadas
  LOOP AT tl_vbeln INTO DATA(wl_vbeln).
    " Lê pedido selecionado
    LOOP AT tl_alv INTO wl_alv WHERE vbeln = wl_vbeln-low.

      " Verifica se já temos OV na lista
      READ TABLE tl_ov ASSIGNING FIELD-SYMBOL(<wl_ov>) WITH KEY vbeln = wl_alv-vbeln.

      IF <wl_ov> IS ASSIGNED.
        " Já temos, só incrementa somatórios
        <wl_ov>-brgew = <wl_ov>-brgew + wl_alv-brgew.
      ELSE.
        " Nova OV
        wl_ov-vbeln = wl_alv-vbeln.
        wl_ov-brgew = wl_alv-brgew.
        APPEND wl_ov TO tl_ov.
      ENDIF.

      " Limpa
      CLEAR wl_ov.
      UNASSIGN <wl_ov>.
    ENDLOOP.
  ENDLOOP.

  IF tl_alv[] IS NOT INITIAL.
    SELECT kna1~kunnr, kna1~stcd1, kna1~stcd2, kna1~stcd3, kna1~ort02, kna1~pstlz,
           kna1~ort01, kna1~txjcd, kna1~name1, kna1~name2, adrc~street, adrc~house_num1
                             FROM kna1
                             INNER JOIN adrc ON adrc~addrnumber = kna1~adrnr
                             INTO TABLE @DATA(tl_cliente)
                             FOR ALL ENTRIES IN @tl_alv
                             WHERE kna1~kunnr = @tl_alv-kunnr AND
                                   date_from < @sy-datum.
  ENDIF.

  " Ler as linhas selecionadas pelo usuário.
  LOOP AT tl_ov INTO wl_ov.
    " Lê pedido selecionado
    READ TABLE tl_alv INTO wl_alv WITH KEY vbeln = wl_ov-vbeln.

    IF sy-subrc = 0.
      " Verifica se já temos carga carregada
      IF wl_alv-zzcarga IS INITIAL.
        READ TABLE tl_cliente INTO DATA(wl_cliente) WITH KEY kunnr = wl_alv-kunnr.

        TRY.
            CREATE OBJECT ol_proxy.

            wl_input-disponibilidade_carregamento-data_hora_entrega = wl_alv-vdatu+6(2) && '/' && wl_alv-vdatu+4(2) && '/' && wl_alv-vdatu(4).
            CONCATENATE wl_input-disponibilidade_carregamento-data_hora_entrega '00:00:00' INTO wl_input-disponibilidade_carregamento-data_hora_entrega SEPARATED BY space.
            wl_input-disponibilidade_carregamento-reservar_horario_se_atende_ent = abap_true.

            wl_pessoa-cpfcnpj = COND #( WHEN wl_cliente-stcd1 IS NOT INITIAL
                                              THEN wl_cliente-stcd1
                                        WHEN wl_cliente-stcd2 IS NOT INITIAL
                                              THEN wl_cliente-stcd2 ).

            wl_pessoa-codigo_atividade                  = space.
            wl_pessoa-codigo_integracao                 = space.
            wl_pessoa-endereco-bairro                   = wl_cliente-ort02.
            wl_pessoa-endereco-cep                      = wl_cliente-pstlz.
            wl_pessoa-endereco-cidade-descricao         = wl_cliente-ort01.
            wl_pessoa-endereco-cidade-ibge              = wl_cliente-txjcd+3.
            wl_pessoa-endereco-cidade-pais-codigo_pais  = lc_codpais.
            wl_pessoa-endereco-cidade-pais-nome_pais    = lc_pais.
            wl_pessoa-endereco-inscricao_estadual       = wl_cliente-stcd3.
            wl_pessoa-endereco-logradouro               = wl_cliente-street.
            wl_pessoa-endereco-numero                   = wl_cliente-house_num1.
            wl_pessoa-rgie                              = space.
            wl_pessoa-rgie                              = space.
            wl_pessoa-razao_social                      = wl_cliente-name1 && space && wl_cliente-name2.
            wl_pessoa-tipo_pessoa = COND #( WHEN wl_cliente-stcd1 IS NOT INITIAL
                                              THEN lc_tp_pessoa-juridica
                                        WHEN wl_cliente-stcd2 IS NOT INITIAL
                                              THEN lc_tp_pessoa-fisica ).

            APPEND wl_pessoa TO wl_destinatarios-pessoa.
            wl_input-disponibilidade_carregamento-destinatarios = wl_destinatarios.

            CALL FUNCTION 'NUMBER_GET_NEXT'
              EXPORTING
                nr_range_nr             = lc_numeracao-nr_range_nr
                object                  = lc_numeracao-object
              IMPORTING
                number                  = lv_numeracao
              EXCEPTIONS
                interval_not_found      = 1
                number_range_not_intern = 2
                object_not_found        = 3
                quantity_is_0           = 4
                quantity_is_not_1       = 5
                interval_overflow       = 6
                buffer_overflow         = 7
                OTHERS                  = 8.

            IF sy-subrc <> 0.

            ENDIF.

            wl_precarga-cubagem_total             = 0.
            IF wl_alv-auart NE 'ZVTR' .
              wl_precarga-filial-codigo_integracao  = wl_alv-werks.  "centro da OV - WERKS
            ELSE.
              wl_precarga-filial-codigo_integracao  = wl_alv-kvgr2(4)	. " Centro Transferencia
            ENDIF.
            wl_precarga-numero_pre_carga          = sy-datum && lv_numeracao.
            wl_precarga-peso_total                = wl_ov-brgew.
            wl_precarga-tipo_carga_embarcador-codigo_integracao = 3.          " Transporte Linha Seca
            wl_precarga-modelo_veicular-codigo_integracao = 'C'.              " Carreta
            wl_input-disponibilidade_carregamento-pre_carga = wl_precarga.

            ol_proxy->buscar_disponibilidade_entrega( EXPORTING output = wl_input
                                                      IMPORTING input = wl_output ).

            " Verifica se temos erro
            IF wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva IS INITIAL.
              wl_me_resp-status = cl_rmsl_message=>con_msg_type_error.
              wl_me_resp-msg    = wl_output-buscar_disponibilidade_entrega-mensagem.
              wl_me_resp-status_icon = icon_red_light.
            ELSE.
              wl_me_resp-status = cl_rmsl_message=>con_msg_type_info.
              wl_me_resp-msg    = 'Protocolo Reserva criado:'(t01) && wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva.
              wl_me_resp-status_icon = icon_green_light.

              lv_num_carga = wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva.
              wl_retorno = zcl_infosales_aux=>atualiza_cargaov( EXPORTING it_ov = tl_vbeln
                                                                          iv_num_carga = lv_num_carga ).

            ENDIF.

            wl_me_resp-vbeln  = wl_alv-vbeln.
            APPEND wl_me_resp TO tl_me_resp.

          CATCH cx_root INTO ol_root.
            wl_me_resp-status = cl_rmsl_message=>con_msg_type_error.
            wl_me_resp-status_icon = icon_red_light.
            wl_me_resp-vbeln  = wl_alv-vbeln.
            wl_me_resp-msg    = ol_root->get_text( ).

            APPEND wl_me_resp TO tl_me_resp.
        ENDTRY.
      ELSE.
        wl_me_resp-vbeln  = wl_alv-vbeln.
        wl_me_resp-status = cl_rmsl_message=>con_msg_type_info.
        wl_me_resp-msg    = 'Reserva já criada:'(t02) && wl_alv-zzcarga.
        wl_me_resp-status_icon = icon_yellow_light.
        APPEND wl_me_resp TO tl_me_resp.
      ENDIF.
    ENDIF.
  ENDLOOP.

  " Exibe Popup de resultado
  TRY.
      cl_salv_table=>factory( IMPORTING r_salv_table = ol_table
                                   CHANGING t_table  = tl_me_resp ).


      ol_table->set_screen_popup( start_column = 10
                                  end_column   = 100
                                  start_line   = 1
                                  end_line     = 20 ).

      ol_functions = ol_table->get_functions( ).
      ol_functions->set_all( abap_true ).

      ol_columns = ol_table->get_columns( ).
      ol_columns->set_optimize( abap_true ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-status_icon ).
      ol_column->set_short_text( value = 'Status' ).
      ol_column->set_medium_text( value = 'Status' ).
      ol_column->set_long_text( value = 'Status' ).
      ol_column->set_icon( abap_true ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-status ).
      ol_column->set_visible( abap_false ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-vbeln ).
      ol_column->set_short_text( value = 'Documento' ).
      ol_column->set_medium_text( value = 'Documento' ).
      ol_column->set_long_text( value = 'Documento' ).
      ol_column->set_visible( abap_false ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-msg ).
      ol_column->set_short_text( value = 'Mensagem' ).
      ol_column->set_medium_text( value = 'Mensagem' ).
      ol_column->set_long_text( value = 'Mensagem' ).

      ol_table->display( ).
    CATCH cx_root.

  ENDTRY.

ENDFORM.





*&---------------------------------------------------------------------*
*&      Form  EXECUTA_ME_AGRUPADO
*&---------------------------------------------------------------------*
*       OR01 - Integração Infosalles agrupando itens
*----------------------------------------------------------------------*
FORM executa_me_agrupado .
  TYPES: BEGIN OF ty_agrupado,
           werks TYPE vbap-werks,
           brgew TYPE vbap-brgew,
         END OF ty_agrupado.


  DATA: ol_proxy     TYPE REF TO zcl_co_buscar_disponibilidade,
        ol_root      TYPE REF TO cx_root,
        ol_table     TYPE REF TO cl_salv_table,
        ol_functions TYPE REF TO cl_salv_functions_list,
        ol_columns   TYPE REF TO cl_salv_columns,
        ol_column    TYPE REF TO cl_salv_column_table.

  DATA: tl_linhas  TYPE salv_t_row,
        tl_vbeln   TYPE saco_vbeln_ranges_tab,
        tl_kunnr   TYPE STANDARD TABLE OF kunnr,
        tl_me_resp TYPE ty_t_integra_me_output.

  DATA: wl_alv           TYPE tp_alv,
        wl_input         TYPE zcl_buscar_disponibilidade_en1,
        wl_output        TYPE zcl_buscar_disponibilidade_ent,
        wl_destinatarios TYPE zcl_array_of_pessoa,
        wl_precarga      TYPE zcl_pre_carga,
        wl_pessoa        TYPE zcl_pessoa2,
        wl_me_resp       TYPE ty_integra_me_output,
        wl_retorno       TYPE bapiret2,
        wl_agrupado      TYPE ty_agrupado.

  DATA: lv_numeracao TYPE numc10,
        lv_num_carga TYPE zesd_carga.

  CONSTANTS: lc_codpais TYPE numc4 VALUE '1048',
             lc_pais    TYPE string VALUE 'BRASIL',
             BEGIN OF lc_tp_pessoa,
               fisica   TYPE string VALUE 'Fisica',
               juridica TYPE string VALUE 'Juridica',
             END OF lc_tp_pessoa,
             BEGIN OF lc_numeracao,
               nr_range_nr TYPE inri-nrrangenr VALUE '01',
               object      TYPE inri-object    VALUE 'ZSDMECOD',
             END OF lc_numeracao,
             BEGIN OF lc_fields,
               status_icon TYPE lvc_fname VALUE 'STATUS_ICON',
               status      TYPE lvc_fname VALUE 'STATUS',
               vbeln       TYPE lvc_fname VALUE 'VBELN',
               msg         TYPE lvc_fname VALUE 'MSG',
             END OF lc_fields,
             BEGIN OF lc_status,
               erro    TYPE string VALUE 'false',
               sucesso TYPE string VALUE 'true',
             END OF lc_status.


  tl_linhas = ol_selections->get_selected_rows( ).

  IF tl_linhas IS INITIAL.
    MESSAGE s368(00) WITH 'Selecionar pelo menos uma linha'(004) DISPLAY LIKE 'E'.
  ENDIF.

  " Percorre as linhas selecionadas
  LOOP AT tl_linhas INTO DATA(vl_linha).
    " Lê pedido selecionado
    READ TABLE tl_alv INTO wl_alv INDEX vl_linha.

    IF NOT line_exists( tl_vbeln[ low = wl_alv-vbeln ] ).
      tl_vbeln = VALUE saco_vbeln_ranges_tab( BASE tl_vbeln ( sign = 'I' option = 'EQ' low = wl_alv-vbeln  ) ).
    ENDIF.

    IF NOT line_exists( tl_kunnr[ table_line = wl_alv-kunnr ] ).
      APPEND wl_alv-kunnr TO tl_kunnr.
    ENDIF.
  ENDLOOP.


  " Percorre as linhas selecionadas
  LOOP AT tl_vbeln INTO DATA(ls_vbeln).
    " Lê pedido selecionado
    LOOP AT tl_alv INTO wl_alv WHERE vbeln = ls_vbeln-low.
      " Primeiro item sempre vai SETAR o Centro
      IF wl_agrupado-werks IS INITIAL.
        wl_agrupado-werks = wl_alv-werks.
      ELSE.
        IF wl_agrupado-werks <> wl_alv-werks..
          MESSAGE s368(00) WITH 'Centros Divergêntes não podem ser agrupados'(009) DISPLAY LIKE 'E'.
        ENDIF.
      ENDIF.

      " Verifica se já temos carga
      IF wl_alv-zzcarga IS INITIAL.
        " Agrupa pesos
        wl_agrupado-brgew = wl_agrupado-brgew + wl_alv-brgew.
      ELSE.
        wl_me_resp-vbeln  = wl_alv-vbeln.
        wl_me_resp-status = cl_rmsl_message=>con_msg_type_info.
        wl_me_resp-msg    = 'Reserva já criada:'(t02) && wl_alv-zzcarga.
        wl_me_resp-status_icon = icon_yellow_light.
        APPEND wl_me_resp TO tl_me_resp.
      ENDIF.
    ENDLOOP.
  ENDLOOP.

  IF tl_kunnr[] IS NOT INITIAL.
    SELECT kna1~kunnr, kna1~stcd1, kna1~stcd2, kna1~stcd3, kna1~ort02, kna1~pstlz,
           kna1~ort01, kna1~txjcd, kna1~name1, kna1~name2, adrc~street, adrc~house_num1
                             FROM kna1
                             INNER JOIN adrc ON adrc~addrnumber = kna1~adrnr
                             INTO TABLE @DATA(tl_cliente)
                             FOR ALL ENTRIES IN @tl_kunnr
                             WHERE kna1~kunnr = @tl_kunnr-table_line AND
                                   date_from < @sy-datum.
  ENDIF.

  TRY.
      CREATE OBJECT ol_proxy.

      wl_input-disponibilidade_carregamento-data_hora_entrega = wl_alv-vdatu+6(2) && '/' && wl_alv-vdatu+4(2) && '/' && wl_alv-vdatu(4).
      CONCATENATE wl_input-disponibilidade_carregamento-data_hora_entrega '00:00:00' INTO wl_input-disponibilidade_carregamento-data_hora_entrega SEPARATED BY space.
      wl_input-disponibilidade_carregamento-reservar_horario_se_atende_ent = abap_true.

      LOOP AT tl_cliente INTO DATA(wl_cliente).

        wl_pessoa-cpfcnpj = COND #( WHEN wl_cliente-stcd1 IS NOT INITIAL
                                          THEN wl_cliente-stcd1
                                    WHEN wl_cliente-stcd2 IS NOT INITIAL
                                          THEN wl_cliente-stcd2 ).

        wl_pessoa-codigo_atividade                  = space.
        wl_pessoa-codigo_integracao                 = space.
        wl_pessoa-endereco-bairro                   = wl_cliente-ort02.
        wl_pessoa-endereco-cep                      = wl_cliente-pstlz.
        wl_pessoa-endereco-cidade-descricao         = wl_cliente-ort01.
        wl_pessoa-endereco-cidade-ibge              = wl_cliente-txjcd+3.
        wl_pessoa-endereco-cidade-pais-codigo_pais  = lc_codpais.
        wl_pessoa-endereco-cidade-pais-nome_pais    = lc_pais.
        wl_pessoa-endereco-inscricao_estadual       = wl_cliente-stcd3.
        wl_pessoa-endereco-logradouro               = wl_cliente-street.
        wl_pessoa-endereco-numero                   = wl_cliente-house_num1.
        wl_pessoa-rgie                              = space.
        wl_pessoa-rgie                              = space.
        wl_pessoa-razao_social                      = wl_cliente-name1 && space && wl_cliente-name2.
        wl_pessoa-tipo_pessoa = COND #( WHEN wl_cliente-stcd1 IS NOT INITIAL
                                          THEN lc_tp_pessoa-juridica
                                    WHEN wl_cliente-stcd2 IS NOT INITIAL
                                          THEN lc_tp_pessoa-fisica ).

        APPEND wl_pessoa TO wl_destinatarios-pessoa.
      ENDLOOP.

      wl_input-disponibilidade_carregamento-destinatarios = wl_destinatarios.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = lc_numeracao-nr_range_nr
          object                  = lc_numeracao-object
        IMPORTING
          number                  = lv_numeracao
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.

      IF sy-subrc <> 0.

      ENDIF.

      wl_precarga-cubagem_total             = 0.
      IF wl_alv-auart NE 'ZVTR' .
        wl_precarga-filial-codigo_integracao  = wl_agrupado-werks.  "centro da OV - WERKS
      ELSE.
        " Para centro de transferencia pega o primeiro item
        READ TABLE tl_alv INTO DATA(wl_avl) WITH KEY vbeln = tl_vbeln[ 1 ]-low.

        wl_precarga-filial-codigo_integracao  = wl_alv-kvgr2(4)	. " Centro Transferencia
      ENDIF.

      wl_precarga-numero_pre_carga          = sy-datum && lv_numeracao.
      wl_precarga-peso_total                = wl_agrupado-brgew.
      wl_precarga-tipo_carga_embarcador-codigo_integracao = 3.          " Transporte Linha Seca
      wl_precarga-modelo_veicular-codigo_integracao = 'C'.              " Carreta
      wl_input-disponibilidade_carregamento-pre_carga = wl_precarga.

      ol_proxy->buscar_disponibilidade_entrega( EXPORTING output = wl_input
                                                IMPORTING input = wl_output ).

      " Verifica se temos erro
      IF wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva IS INITIAL.
        wl_me_resp-status = cl_rmsl_message=>con_msg_type_error.
        wl_me_resp-msg    = wl_output-buscar_disponibilidade_entrega-mensagem.
        wl_me_resp-status_icon = icon_red_light.
      ELSE.
        wl_me_resp-status = cl_rmsl_message=>con_msg_type_info.
        wl_me_resp-msg    = 'Protocolo Reserva criado:'(t01) && wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva.
        wl_me_resp-status_icon = icon_green_light.

        lv_num_carga = wl_output-buscar_disponibilidade_entrega-objeto-protocolo_reserva.
        wl_retorno = zcl_infosales_aux=>atualiza_cargaov( EXPORTING it_ov = tl_vbeln
                                                                    iv_num_carga = lv_num_carga ).

      ENDIF.

      wl_me_resp-vbeln  = wl_alv-vbeln.
      APPEND wl_me_resp TO tl_me_resp.

    CATCH cx_root INTO ol_root.
      wl_me_resp-status = cl_rmsl_message=>con_msg_type_error.
      wl_me_resp-status_icon = icon_red_light.
      wl_me_resp-vbeln  = wl_alv-vbeln.
      wl_me_resp-msg    = ol_root->get_text( ).

      APPEND wl_me_resp TO tl_me_resp.
  ENDTRY.

  " Exibe Popup de resultado
  TRY.
      cl_salv_table=>factory( IMPORTING r_salv_table = ol_table
                                   CHANGING t_table  = tl_me_resp ).


      ol_table->set_screen_popup( start_column = 10
                                  end_column   = 100
                                  start_line   = 1
                                  end_line     = 20 ).

      ol_functions = ol_table->get_functions( ).
      ol_functions->set_all( abap_true ).

      ol_columns = ol_table->get_columns( ).
      ol_columns->set_optimize( abap_true ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-status_icon ).
      ol_column->set_short_text( value = 'Status' ).
      ol_column->set_medium_text( value = 'Status' ).
      ol_column->set_long_text( value = 'Status' ).
      ol_column->set_icon( abap_true ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-status ).
      ol_column->set_visible( abap_false ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-vbeln ).
      ol_column->set_short_text( value = 'Documento' ).
      ol_column->set_medium_text( value = 'Documento' ).
      ol_column->set_long_text( value = 'Documento' ).
      ol_column->set_visible( abap_false ).

      FREE ol_column.
      ol_column ?= ol_columns->get_column( lc_fields-msg ).
      ol_column->set_short_text( value = 'Mensagem' ).
      ol_column->set_medium_text( value = 'Mensagem' ).
      ol_column->set_long_text( value = 'Mensagem' ).

      ol_table->display( ).
    CATCH cx_root.

  ENDTRY.

ENDFORM.
