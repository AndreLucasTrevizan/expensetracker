// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  revenue Revenue[]
  payment Payments[]
  total Total[]
  installmentPurchase InstallmentPurchases[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Total {
  id Int @id @default(autoincrement())
  valueCard Decimal @db.Decimal(9,2)
  valueWallet Decimal @db.Decimal(9,2)
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("total")
}

model Revenue {
  id Int @id @default(autoincrement())
  description String
  value Decimal @db.Decimal(9,2)
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("revenue")
}

model InstallmentPurchases {
  id Int @id @default(autoincrement())
  description String //Cama
  amountOfInstallment Int //10
  installmentValue Decimal @db.Decimal(9,2) //250.23
  totalExpense Decimal @db.Decimal(9,2) //3502.20
  isPayed Boolean @default(false) //false
  partPayed Boolean @default(false)
  installmentsPayed Int?
  onCard Boolean @default(true)
  dueDay Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  payment Payments[]

  @@map("installment_purchases")
}

model Payments {
  id Int @id @default(autoincrement())
  description String
  price Decimal @db.Decimal(9,2) //756,64
  isIstallment Boolean @default(false) //true
  userId Int
  operationId Int
  installmentPurchaseId Int?
  invoice Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  operation Operation @relation(fields: [operationId], references: [id])
  installmentPurchase InstallmentPurchases? @relation(fields: [installmentPurchaseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Operation {
  id Int @id @default(autoincrement())
  name String @unique
  payment Payments[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("operations")
}